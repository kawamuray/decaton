<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (252 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="2035.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="2019.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="2003.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1987.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1971.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1955.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1939.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1923.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1907.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1891.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1875.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1859.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1843.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1827.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1811.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1795.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1779.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1763.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1747.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1731.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1715.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1699.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1683.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1667.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1651.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1635.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1619.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1603.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1587.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1571.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1555.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1539.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1523.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1507.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1491.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1475.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1459.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1443.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1427.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1411.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1395.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1379.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1363.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1347.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1331.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1315.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1299.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1283.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1267.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1251.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1235.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1219.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1203.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1187.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1171.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1155.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1139.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1123.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1107.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1091.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1075.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1059.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1043.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1027.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="1011.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="995.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="979.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="963.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="947.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="931.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="915.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="899.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="883.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="867.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="851.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="835.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="819.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="803.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="787.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="771.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="755.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="739.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="723.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="707.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="691.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="675.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="659.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="643.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="627.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="611.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="595.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="579.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="563.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="547.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="531.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="515.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="499.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="483.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="467.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="451.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="435.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="419.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="403.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="387.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="371.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="355.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="339.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="323.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="307.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="291.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="275.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="259.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="243.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="227.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="211.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="195.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="179.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="163.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="147.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="131.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="115.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="99.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="83.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="67.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="51.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.40%)</title><rect x="10.0" y="35.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.40%)</title><rect x="14.7" y="2035.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="17.7" y="2046.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.40%)</title><rect x="14.7" y="2019.0" width="4.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="17.7" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (35 samples, 13.89%)</title><rect x="19.4" y="2035.0" width="163.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="22.4" y="2046.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.40%)</title><rect x="19.4" y="2019.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.4" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (34 samples, 13.49%)</title><rect x="24.0" y="2019.0" width="159.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.0" y="2030.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (1 samples, 0.40%)</title><rect x="24.0" y="2003.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.0" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.40%)</title><rect x="24.0" y="1987.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.0" y="1998.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (20 samples, 7.94%)</title><rect x="28.7" y="2003.0" width="93.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.7" y="2014.0">java/lang/I..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1917099307.accept (20 samples, 7.94%)</title><rect x="28.7" y="1987.0" width="93.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.7" y="1998.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (20 samples, 7.94%)</title><rect x="28.7" y="1971.0" width="93.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.7" y="1982.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (16 samples, 6.35%)</title><rect x="28.7" y="1955.0" width="75.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.7" y="1966.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (16 samples, 6.35%)</title><rect x="28.7" y="1939.0" width="75.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.7" y="1950.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (16 samples, 6.35%)</title><rect x="28.7" y="1923.0" width="75.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.7" y="1934.0">com/line..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (12 samples, 4.76%)</title><rect x="42.8" y="1907.0" width="56.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="45.8" y="1918.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 4.76%)</title><rect x="42.8" y="1891.0" width="56.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="45.8" y="1902.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 4.76%)</title><rect x="42.8" y="1875.0" width="56.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="45.8" y="1886.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (11 samples, 4.37%)</title><rect x="42.8" y="1859.0" width="51.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.8" y="1870.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 1.19%)</title><rect x="42.8" y="1843.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="45.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 1.19%)</title><rect x="42.8" y="1827.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 1.19%)</title><rect x="42.8" y="1811.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 3.17%)</title><rect x="56.8" y="1843.0" width="37.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.8" y="1854.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 3.17%)</title><rect x="56.8" y="1827.0" width="37.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.8" y="1838.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 3.17%)</title><rect x="56.8" y="1811.0" width="37.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.8" y="1822.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 3.17%)</title><rect x="56.8" y="1795.0" width="37.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.8" y="1806.0">jav..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (7 samples, 2.78%)</title><rect x="61.5" y="1779.0" width="32.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.5" y="1790.0">su..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.178] (1 samples, 0.40%)</title><rect x="61.5" y="1763.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="64.5" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 2.38%)</title><rect x="66.2" y="1763.0" width="28.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="69.2" y="1774.0">Un..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.40%)</title><rect x="66.2" y="1747.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="69.2" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 1.59%)</title><rect x="70.9" y="1747.0" width="18.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="73.9" y="1758.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.40%)</title><rect x="89.6" y="1747.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="92.6" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.40%)</title><rect x="94.3" y="1859.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="97.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="94.3" y="1843.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.40%)</title><rect x="94.3" y="1827.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.40%)</title><rect x="94.3" y="1811.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.3" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="99.0" y="1907.0" width="4.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="102.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (1 samples, 0.40%)</title><rect x="103.7" y="1955.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.7" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="103.7" y="1939.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.7" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="103.7" y="1923.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="106.7" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (3 samples, 1.19%)</title><rect x="108.3" y="1955.0" width="14.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.3" y="1966.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.19%)</title><rect x="108.3" y="1939.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="111.3" y="1950.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.40%)</title><rect x="117.7" y="1923.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="120.7" y="1934.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.40%)</title><rect x="117.7" y="1907.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="120.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 5.16%)</title><rect x="122.4" y="2003.0" width="60.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="125.4" y="2014.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (13 samples, 5.16%)</title><rect x="122.4" y="1987.0" width="60.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="125.4" y="1998.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.38%)</title><rect x="122.4" y="1971.0" width="28.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="125.4" y="1982.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (6 samples, 2.38%)</title><rect x="122.4" y="1955.0" width="28.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="125.4" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 2.38%)</title><rect x="122.4" y="1939.0" width="28.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="125.4" y="1950.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.98%)</title><rect x="122.4" y="1923.0" width="23.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="125.4" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.98%)</title><rect x="122.4" y="1907.0" width="23.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="125.4" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.79%)</title><rect x="127.1" y="1891.0" width="9.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="130.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.40%)</title><rect x="127.1" y="1875.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.40%)</title><rect x="127.1" y="1859.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="130.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.40%)</title><rect x="127.1" y="1843.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="130.1" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.40%)</title><rect x="127.1" y="1827.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="130.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.40%)</title><rect x="127.1" y="1811.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="130.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.40%)</title><rect x="127.1" y="1795.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="130.1" y="1806.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.array (1 samples, 0.40%)</title><rect x="127.1" y="1779.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.40%)</title><rect x="131.7" y="1875.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.40%)</title><rect x="131.7" y="1859.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="134.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.40%)</title><rect x="131.7" y="1843.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="134.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.40%)</title><rect x="131.7" y="1827.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="134.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.79%)</title><rect x="136.4" y="1891.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="139.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.79%)</title><rect x="136.4" y="1875.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="139.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.79%)</title><rect x="136.4" y="1859.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.4" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.79%)</title><rect x="136.4" y="1843.0" width="9.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.40%)</title><rect x="145.8" y="1923.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.40%)</title><rect x="145.8" y="1907.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="148.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="145.8" y="1891.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="145.8" y="1875.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="148.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="145.8" y="1859.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="148.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 1.98%)</title><rect x="150.5" y="1971.0" width="23.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.5" y="1982.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 1.98%)</title><rect x="150.5" y="1955.0" width="23.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.5" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 1.19%)</title><rect x="150.5" y="1939.0" width="14.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="153.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.40%)</title><rect x="150.5" y="1923.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.40%)</title><rect x="150.5" y="1907.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="153.5" y="1918.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.40%)</title><rect x="150.5" y="1891.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="153.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.40%)</title><rect x="150.5" y="1875.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.5" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.40%)</title><rect x="150.5" y="1859.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.40%)</title><rect x="155.2" y="1923.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.2" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.40%)</title><rect x="155.2" y="1907.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="158.2" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.40%)</title><rect x="155.2" y="1891.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.2" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.40%)</title><rect x="155.2" y="1875.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="158.2" y="1886.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.40%)</title><rect x="155.2" y="1859.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.2" y="1870.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.40%)</title><rect x="155.2" y="1843.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="158.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.40%)</title><rect x="159.8" y="1923.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.40%)</title><rect x="159.8" y="1907.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="162.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.40%)</title><rect x="159.8" y="1891.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="162.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.40%)</title><rect x="159.8" y="1875.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.8" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.40%)</title><rect x="159.8" y="1859.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="162.8" y="1870.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.40%)</title><rect x="159.8" y="1843.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="162.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.79%)</title><rect x="164.5" y="1939.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.5" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.40%)</title><rect x="164.5" y="1923.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.5" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="164.5" y="1907.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="167.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.40%)</title><rect x="164.5" y="1891.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.40%)</title><rect x="164.5" y="1875.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="167.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="164.5" y="1859.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="164.5" y="1843.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="167.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.40%)</title><rect x="164.5" y="1827.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="167.5" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.40%)</title><rect x="164.5" y="1811.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="167.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.40%)</title><rect x="164.5" y="1795.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="167.5" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.40%)</title><rect x="164.5" y="1779.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="167.5" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.40%)</title><rect x="164.5" y="1763.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="167.5" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.40%)</title><rect x="169.2" y="1923.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="172.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.40%)</title><rect x="173.9" y="1971.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="173.9" y="1955.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="173.9" y="1939.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.40%)</title><rect x="173.9" y="1923.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="176.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.40%)</title><rect x="173.9" y="1907.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.40%)</title><rect x="173.9" y="1891.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="176.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.40%)</title><rect x="173.9" y="1875.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.40%)</title><rect x="173.9" y="1859.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.9" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.40%)</title><rect x="173.9" y="1843.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.9" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.40%)</title><rect x="173.9" y="1827.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="176.9" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.40%)</title><rect x="173.9" y="1811.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.9" y="1822.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.40%)</title><rect x="173.9" y="1795.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="176.9" y="1806.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.40%)</title><rect x="173.9" y="1779.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="176.9" y="1790.0"></text>
</g>
<g>
<title>java/nio/Bits.copyToArray (1 samples, 0.40%)</title><rect x="173.9" y="1763.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="176.9" y="1774.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.40%)</title><rect x="173.9" y="1747.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.9" y="1758.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.40%)</title><rect x="173.9" y="1731.0" width="4.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="176.9" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="178.6" y="1971.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="181.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.40%)</title><rect x="178.6" y="1955.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.40%)</title><rect x="178.6" y="1939.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="181.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.40%)</title><rect x="178.6" y="1923.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="178.6" y="1907.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="178.6" y="1891.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="178.6" y="1875.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.6" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="178.6" y="1859.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="181.6" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="178.6" y="1843.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="181.6" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.40%)</title><rect x="178.6" y="1827.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="181.6" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.40%)</title><rect x="178.6" y="1811.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="181.6" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.40%)</title><rect x="178.6" y="1795.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="181.6" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.40%)</title><rect x="178.6" y="1779.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="181.6" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/1628694746.test (1 samples, 0.40%)</title><rect x="178.6" y="1763.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="181.6" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.40%)</title><rect x="178.6" y="1747.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/571091911.test (1 samples, 0.40%)</title><rect x="178.6" y="1731.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.6" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.40%)</title><rect x="178.6" y="1715.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="1726.0"></text>
</g>
<g>
<title>java/lang/Thread.run (77 samples, 30.56%)</title><rect x="183.3" y="2035.0" width="360.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.3" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (77 samples, 30.56%)</title><rect x="183.3" y="2019.0" width="360.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.3" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (77 samples, 30.56%)</title><rect x="183.3" y="2003.0" width="360.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.3" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.40%)</title><rect x="197.3" y="1987.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.3" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/700404230.run (51 samples, 20.24%)</title><rect x="202.0" y="1987.0" width="238.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.0" y="1998.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (51 samples, 20.24%)</title><rect x="202.0" y="1971.0" width="238.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.0" y="1982.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (51 samples, 20.24%)</title><rect x="202.0" y="1955.0" width="238.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.0" y="1966.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (51 samples, 20.24%)</title><rect x="202.0" y="1939.0" width="238.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.0" y="1950.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="202.0" y="1923.0" width="4.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="205.0" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="202.0" y="1907.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="205.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (10 samples, 3.97%)</title><rect x="206.7" y="1923.0" width="46.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.7" y="1934.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/1384010761.extract (10 samples, 3.97%)</title><rect x="206.7" y="1907.0" width="46.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.7" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (10 samples, 3.97%)</title><rect x="206.7" y="1891.0" width="46.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.7" y="1902.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 3.97%)</title><rect x="206.7" y="1875.0" width="46.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="209.7" y="1886.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 3.97%)</title><rect x="206.7" y="1859.0" width="46.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="209.7" y="1870.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 3.97%)</title><rect x="206.7" y="1843.0" width="46.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.7" y="1854.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.40%)</title><rect x="206.7" y="1827.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.7" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.40%)</title><rect x="206.7" y="1811.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.7" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.40%)</title><rect x="206.7" y="1795.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="209.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.40%)</title><rect x="206.7" y="1779.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.40%)</title><rect x="206.7" y="1763.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="209.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 3.17%)</title><rect x="211.3" y="1827.0" width="37.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="214.3" y="1838.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.40%)</title><rect x="211.3" y="1811.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="211.3" y="1795.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="214.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.40%)</title><rect x="211.3" y="1779.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.40%)</title><rect x="211.3" y="1763.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.40%)</title><rect x="216.0" y="1811.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.0" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.40%)</title><rect x="216.0" y="1795.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="216.0" y="1779.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="219.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="216.0" y="1763.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="219.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 2.38%)</title><rect x="220.7" y="1811.0" width="28.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.7" y="1822.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.79%)</title><rect x="220.7" y="1795.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.40%)</title><rect x="225.4" y="1779.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 1.59%)</title><rect x="230.1" y="1795.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 1.59%)</title><rect x="230.1" y="1779.0" width="18.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="230.1" y="1763.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.19%)</title><rect x="234.8" y="1763.0" width="14.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.40%)</title><rect x="239.4" y="1747.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.40%)</title><rect x="239.4" y="1731.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.40%)</title><rect x="239.4" y="1715.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.40%)</title><rect x="239.4" y="1699.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.4" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.40%)</title><rect x="239.4" y="1683.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="242.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.40%)</title><rect x="244.1" y="1747.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.40%)</title><rect x="248.8" y="1827.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.8" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.40%)</title><rect x="248.8" y="1811.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.40%)</title><rect x="248.8" y="1795.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="251.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.40%)</title><rect x="248.8" y="1779.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.40%)</title><rect x="248.8" y="1763.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="251.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (36 samples, 14.29%)</title><rect x="253.5" y="1923.0" width="168.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.5" y="1934.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (5 samples, 1.98%)</title><rect x="258.2" y="1907.0" width="23.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.2" y="1918.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 1.59%)</title><rect x="262.9" y="1891.0" width="18.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.9" y="1902.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 1.59%)</title><rect x="262.9" y="1875.0" width="18.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.59%)</title><rect x="262.9" y="1859.0" width="18.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.9" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.19%)</title><rect x="267.5" y="1843.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="270.5" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="281.6" y="1907.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (17 samples, 6.75%)</title><rect x="286.3" y="1907.0" width="79.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.3" y="1918.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (17 samples, 6.75%)</title><rect x="286.3" y="1891.0" width="79.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.3" y="1902.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 3.57%)</title><rect x="291.0" y="1875.0" width="42.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="294.0" y="1886.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.57%)</title><rect x="291.0" y="1859.0" width="42.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.0" y="1870.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 2.38%)</title><rect x="305.0" y="1843.0" width="28.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="1854.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.79%)</title><rect x="319.0" y="1827.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="322.0" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.40%)</title><rect x="323.7" y="1811.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="326.7" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.40%)</title><rect x="323.7" y="1795.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="326.7" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.40%)</title><rect x="323.7" y="1779.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="326.7" y="1790.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.40%)</title><rect x="323.7" y="1763.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="326.7" y="1774.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.40%)</title><rect x="328.4" y="1827.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.79%)</title><rect x="333.1" y="1875.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.79%)</title><rect x="333.1" y="1859.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="336.1" y="1870.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.40%)</title><rect x="333.1" y="1843.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="336.1" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.40%)</title><rect x="333.1" y="1827.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="336.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.40%)</title><rect x="337.8" y="1843.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.8" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 1.98%)</title><rect x="342.5" y="1875.0" width="23.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.5" y="1886.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.98%)</title><rect x="342.5" y="1859.0" width="23.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="345.5" y="1870.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.40%)</title><rect x="342.5" y="1843.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="345.5" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.40%)</title><rect x="342.5" y="1827.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="345.5" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.40%)</title><rect x="342.5" y="1811.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.5" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="342.5" y="1795.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="345.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.40%)</title><rect x="342.5" y="1779.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="345.5" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.40%)</title><rect x="342.5" y="1763.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="345.5" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.59%)</title><rect x="347.1" y="1843.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.1" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.19%)</title><rect x="351.8" y="1827.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.79%)</title><rect x="356.5" y="1811.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="359.5" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.40%)</title><rect x="361.2" y="1795.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="364.2" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (9 samples, 3.57%)</title><rect x="365.9" y="1907.0" width="42.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.9" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (9 samples, 3.57%)</title><rect x="365.9" y="1891.0" width="42.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="368.9" y="1902.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/122164731.process (3 samples, 1.19%)</title><rect x="365.9" y="1875.0" width="14.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="368.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (3 samples, 1.19%)</title><rect x="365.9" y="1859.0" width="14.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="368.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 1.19%)</title><rect x="365.9" y="1843.0" width="14.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="370.6" y="1827.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="373.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.40%)</title><rect x="370.6" y="1811.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="373.6" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="370.6" y="1795.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.6" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.40%)</title><rect x="370.6" y="1779.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="373.6" y="1790.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="370.6" y="1763.0" width="4.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="373.6" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.40%)</title><rect x="375.2" y="1827.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="378.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.40%)</title><rect x="375.2" y="1811.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="378.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="375.2" y="1795.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="378.2" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (1 samples, 0.40%)</title><rect x="375.2" y="1779.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.2" y="1790.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (1 samples, 0.40%)</title><rect x="375.2" y="1763.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.2" y="1774.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.40%)</title><rect x="375.2" y="1747.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="378.2" y="1758.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (1 samples, 0.40%)</title><rect x="375.2" y="1731.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="378.2" y="1742.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/DecatonTask.&lt;init&gt; (1 samples, 0.40%)</title><rect x="379.9" y="1875.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.19%)</title><rect x="384.6" y="1875.0" width="14.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="387.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 1.19%)</title><rect x="384.6" y="1859.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="387.6" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="394.0" y="1843.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="397.0" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="394.0" y="1827.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="397.0" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.40%)</title><rect x="394.0" y="1811.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="397.0" y="1822.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.40%)</title><rect x="394.0" y="1795.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="397.0" y="1806.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/453523494.linkToTargetMethod (1 samples, 0.40%)</title><rect x="398.7" y="1875.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="401.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/55331187.invokeStatic_L_L (1 samples, 0.40%)</title><rect x="398.7" y="1859.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="401.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/1628623885.get$Lambda (1 samples, 0.40%)</title><rect x="398.7" y="1843.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="401.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/1628623885.&lt;init&gt; (1 samples, 0.40%)</title><rect x="398.7" y="1827.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="401.7" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="398.7" y="1811.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="401.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="403.3" y="1875.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="403.3" y="1859.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="406.3" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="403.3" y="1843.0" width="4.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="406.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.40%)</title><rect x="408.0" y="1907.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="411.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.elapsedNanos (1 samples, 0.40%)</title><rect x="408.0" y="1891.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.0" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="408.0" y="1875.0" width="4.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="411.0" y="1886.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="408.0" y="1859.0" width="4.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="411.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2064489822.linkToTargetMethod (1 samples, 0.40%)</title><rect x="412.7" y="1907.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="415.7" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/809762318.invokeStatic_L3_L (1 samples, 0.40%)</title><rect x="412.7" y="1891.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="415.7" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/182181071.get$Lambda (1 samples, 0.40%)</title><rect x="412.7" y="1875.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="415.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$273/182181071.&lt;init&gt; (1 samples, 0.40%)</title><rect x="412.7" y="1859.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="415.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.40%)</title><rect x="417.4" y="1907.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="420.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.59%)</title><rect x="422.1" y="1923.0" width="18.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.19%)</title><rect x="426.7" y="1907.0" width="14.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="429.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.79%)</title><rect x="431.4" y="1891.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="434.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$290/694372435.accept (2 samples, 0.79%)</title><rect x="431.4" y="1875.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$0 (2 samples, 0.79%)</title><rect x="431.4" y="1859.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="434.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1944173734.complete (2 samples, 0.79%)</title><rect x="431.4" y="1843.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="434.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$0 (2 samples, 0.79%)</title><rect x="431.4" y="1827.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="434.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (2 samples, 0.79%)</title><rect x="431.4" y="1811.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="434.4" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.79%)</title><rect x="431.4" y="1795.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="434.4" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (2 samples, 0.79%)</title><rect x="431.4" y="1779.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.4" y="1790.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.40%)</title><rect x="436.1" y="1763.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="439.1" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.40%)</title><rect x="436.1" y="1747.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="439.1" y="1758.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.79%)</title><rect x="440.8" y="1987.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="443.8" y="1998.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (2 samples, 0.79%)</title><rect x="440.8" y="1971.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="443.8" y="1982.0"></text>
</g>
<g>
<title>BarrierSet::obj_equals(oopDesc*, oopDesc*) (1 samples, 0.40%)</title><rect x="440.8" y="1955.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="443.8" y="1966.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.40%)</title><rect x="445.5" y="1955.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="448.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (1 samples, 0.40%)</title><rect x="450.2" y="1987.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="453.2" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.40%)</title><rect x="450.2" y="1971.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="453.2" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (1 samples, 0.40%)</title><rect x="450.2" y="1955.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="453.2" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.40%)</title><rect x="454.8" y="1987.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="457.8" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="454.8" y="1971.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="457.8" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.40%)</title><rect x="454.8" y="1955.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="457.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (18 samples, 7.14%)</title><rect x="459.5" y="1987.0" width="84.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="462.5" y="1998.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (18 samples, 7.14%)</title><rect x="459.5" y="1971.0" width="84.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.5" y="1982.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.getAndDecrement (3 samples, 1.19%)</title><rect x="459.5" y="1955.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (13 samples, 5.16%)</title><rect x="473.6" y="1955.0" width="60.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.6" y="1966.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (13 samples, 5.16%)</title><rect x="473.6" y="1939.0" width="60.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="476.6" y="1950.0">java/u..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (13 samples, 5.16%)</title><rect x="473.6" y="1923.0" width="60.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="476.6" y="1934.0">sun/mi..</text>
</g>
<g>
<title>Unsafe_Park (13 samples, 5.16%)</title><rect x="473.6" y="1907.0" width="60.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="476.6" y="1918.0">Unsafe..</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.40%)</title><rect x="473.6" y="1891.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="476.6" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.40%)</title><rect x="478.3" y="1891.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="481.3" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.79%)</title><rect x="482.9" y="1891.0" width="9.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="485.9" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.59%)</title><rect x="492.3" y="1891.0" width="18.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="495.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 1.19%)</title><rect x="511.0" y="1891.0" width="14.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="514.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.40%)</title><rect x="525.1" y="1891.0" width="4.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="528.1" y="1902.0"></text>
</g>
<g>
<title>_init (1 samples, 0.40%)</title><rect x="529.8" y="1891.0" width="4.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="532.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.40%)</title><rect x="534.4" y="1955.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="537.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.40%)</title><rect x="534.4" y="1939.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="537.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.40%)</title><rect x="534.4" y="1923.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="537.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.40%)</title><rect x="539.1" y="1955.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="539.1" y="1939.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.1" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.40%)</title><rect x="539.1" y="1923.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.40%)</title><rect x="539.1" y="1907.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="542.1" y="1918.0"></text>
</g>
<g>
<title>start_thread (138 samples, 54.76%)</title><rect x="543.8" y="2035.0" width="646.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="546.8" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (138 samples, 54.76%)</title><rect x="543.8" y="2019.0" width="646.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="546.8" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 5.16%)</title><rect x="543.8" y="2003.0" width="60.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="546.8" y="2014.0">GangWo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.40%)</title><rect x="548.5" y="1987.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="551.5" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.40%)</title><rect x="548.5" y="1971.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="551.5" y="1982.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.40%)</title><rect x="548.5" y="1955.0" width="4.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="551.5" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) [clone .part.431] (11 samples, 4.37%)</title><rect x="553.2" y="1987.0" width="51.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="556.2" y="1998.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 3.57%)</title><rect x="553.2" y="1971.0" width="42.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="556.2" y="1982.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.19%)</title><rect x="553.2" y="1955.0" width="14.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="556.2" y="1966.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.40%)</title><rect x="557.9" y="1939.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="560.9" y="1950.0"></text>
</g>
<g>
<title>__memcpy_ssse3_back (1 samples, 0.40%)</title><rect x="562.5" y="1939.0" width="4.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="565.5" y="1950.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (4 samples, 1.59%)</title><rect x="567.2" y="1955.0" width="18.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="570.2" y="1966.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.79%)</title><rect x="586.0" y="1955.0" width="9.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="589.0" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (1 samples, 0.40%)</title><rect x="595.3" y="1971.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="598.3" y="1982.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.40%)</title><rect x="595.3" y="1955.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="598.3" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.40%)</title><rect x="595.3" y="1939.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="598.3" y="1950.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.40%)</title><rect x="595.3" y="1923.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="598.3" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="600.0" y="1971.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="603.0" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="600.0" y="1955.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="603.0" y="1966.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="600.0" y="1939.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="603.0" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.40%)</title><rect x="600.0" y="1923.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="603.0" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.40%)</title><rect x="600.0" y="1907.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="603.0" y="1918.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.40%)</title><rect x="600.0" y="1891.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="603.0" y="1902.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.40%)</title><rect x="600.0" y="1875.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="603.0" y="1886.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.40%)</title><rect x="600.0" y="1859.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="603.0" y="1870.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.40%)</title><rect x="600.0" y="1843.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="603.0" y="1854.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.40%)</title><rect x="600.0" y="1827.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="603.0" y="1838.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.40%)</title><rect x="600.0" y="1811.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.0" y="1822.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (125 samples, 49.60%)</title><rect x="604.7" y="2003.0" width="585.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="607.7" y="2014.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (124 samples, 49.21%)</title><rect x="604.7" y="1987.0" width="580.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="607.7" y="1998.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (124 samples, 49.21%)</title><rect x="604.7" y="1971.0" width="580.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="607.7" y="1982.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (121 samples, 48.02%)</title><rect x="604.7" y="1955.0" width="566.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="607.7" y="1966.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (121 samples, 48.02%)</title><rect x="604.7" y="1939.0" width="566.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="607.7" y="1950.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool)</text>
</g>
<g>
<title>Compile::Code_Gen() (47 samples, 18.65%)</title><rect x="604.7" y="1923.0" width="220.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="607.7" y="1934.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.79%)</title><rect x="604.7" y="1907.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="607.7" y="1918.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.79%)</title><rect x="604.7" y="1891.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="607.7" y="1902.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.40%)</title><rect x="604.7" y="1875.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="607.7" y="1886.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.40%)</title><rect x="604.7" y="1859.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="607.7" y="1870.0"></text>
</g>
<g>
<title>CodeBuffer::~CodeBuffer() (1 samples, 0.40%)</title><rect x="604.7" y="1843.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="607.7" y="1854.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.40%)</title><rect x="604.7" y="1827.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="607.7" y="1838.0"></text>
</g>
<g>
<title>storePNode::reloc() const (1 samples, 0.40%)</title><rect x="609.4" y="1875.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="612.4" y="1886.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.40%)</title><rect x="614.0" y="1907.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="617.0" y="1918.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="614.0" y="1891.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="617.0" y="1902.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) [clone .part.152] (1 samples, 0.40%)</title><rect x="614.0" y="1875.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="617.0" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.59%)</title><rect x="618.7" y="1907.0" width="18.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="621.7" y="1918.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.40%)</title><rect x="618.7" y="1891.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="621.7" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.19%)</title><rect x="623.4" y="1891.0" width="14.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="626.4" y="1902.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.40%)</title><rect x="628.1" y="1875.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="631.1" y="1886.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.40%)</title><rect x="632.8" y="1875.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="635.8" y="1886.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.40%)</title><rect x="632.8" y="1859.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="635.8" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.40%)</title><rect x="632.8" y="1843.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="635.8" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.59%)</title><rect x="637.5" y="1907.0" width="18.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="640.5" y="1918.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.59%)</title><rect x="637.5" y="1891.0" width="18.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="640.5" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.79%)</title><rect x="642.1" y="1875.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="645.1" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.40%)</title><rect x="651.5" y="1875.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="654.5" y="1886.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.40%)</title><rect x="651.5" y="1859.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="654.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 14.29%)</title><rect x="656.2" y="1907.0" width="168.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="659.2" y="1918.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.40%)</title><rect x="656.2" y="1891.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="659.2" y="1902.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.40%)</title><rect x="660.9" y="1891.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="663.9" y="1902.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.40%)</title><rect x="665.6" y="1891.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="668.6" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.79%)</title><rect x="670.2" y="1891.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="673.2" y="1902.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="670.2" y="1875.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="673.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.40%)</title><rect x="674.9" y="1875.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="677.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 1.98%)</title><rect x="679.6" y="1891.0" width="23.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="682.6" y="1902.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="679.6" y="1875.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="682.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 1.59%)</title><rect x="684.3" y="1875.0" width="18.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="687.3" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.40%)</title><rect x="693.7" y="1859.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="696.7" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="698.3" y="1859.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="701.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.79%)</title><rect x="703.0" y="1891.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="706.0" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.78%)</title><rect x="712.4" y="1891.0" width="32.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="715.4" y="1902.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 1.59%)</title><rect x="717.1" y="1875.0" width="18.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="720.1" y="1886.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.40%)</title><rect x="726.4" y="1859.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="729.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="731.1" y="1859.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.1" y="1870.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="735.8" y="1875.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="738.8" y="1886.0"></text>
</g>
<g>
<title>lower_pressure(LRG*, unsigned int, Block*, unsigned int*, unsigned int*) [clone .isra.134] (1 samples, 0.40%)</title><rect x="740.5" y="1875.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="743.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.40%)</title><rect x="745.2" y="1891.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="748.2" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.214] (1 samples, 0.40%)</title><rect x="749.8" y="1891.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="752.8" y="1902.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="749.8" y="1875.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="752.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.215] (2 samples, 0.79%)</title><rect x="754.5" y="1891.0" width="9.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="757.5" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.59%)</title><rect x="763.9" y="1891.0" width="18.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="766.9" y="1902.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 1.59%)</title><rect x="763.9" y="1875.0" width="18.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="766.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::skip_copies(Node*) (1 samples, 0.40%)</title><rect x="773.3" y="1859.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="776.3" y="1870.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.40%)</title><rect x="777.9" y="1859.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="780.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.19%)</title><rect x="782.6" y="1891.0" width="14.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="785.6" y="1902.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (2 samples, 0.79%)</title><rect x="782.6" y="1875.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="785.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.40%)</title><rect x="787.3" y="1859.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="790.3" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="787.3" y="1843.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="790.3" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.40%)</title><rect x="792.0" y="1875.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="795.0" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.40%)</title><rect x="792.0" y="1859.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="795.0" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.40%)</title><rect x="792.0" y="1843.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="795.0" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.40%)</title><rect x="796.7" y="1891.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="799.7" y="1902.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="796.7" y="1875.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="799.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.40%)</title><rect x="801.3" y="1891.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="804.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.79%)</title><rect x="806.0" y="1891.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="809.0" y="1902.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.79%)</title><rect x="806.0" y="1875.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="809.0" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.79%)</title><rect x="815.4" y="1891.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="818.4" y="1902.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="820.1" y="1875.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="823.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="820.1" y="1859.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="823.1" y="1870.0"></text>
</g>
<g>
<title>Compile::Optimize() (61 samples, 24.21%)</title><rect x="824.8" y="1923.0" width="285.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="827.8" y="1934.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (3 samples, 1.19%)</title><rect x="824.8" y="1907.0" width="14.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="827.8" y="1918.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (3 samples, 1.19%)</title><rect x="824.8" y="1891.0" width="14.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="827.8" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (2 samples, 0.79%)</title><rect x="829.4" y="1875.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="832.4" y="1886.0"></text>
</g>
<g>
<title>Node::ensure_control_or_add_prec(Node*) (1 samples, 0.40%)</title><rect x="829.4" y="1859.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="832.4" y="1870.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.40%)</title><rect x="829.4" y="1843.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="832.4" y="1854.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="834.1" y="1859.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="837.1" y="1870.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="834.1" y="1843.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="837.1" y="1854.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.79%)</title><rect x="838.8" y="1907.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="841.8" y="1918.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="843.5" y="1891.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="846.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="843.5" y="1875.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="846.5" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="843.5" y="1859.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="846.5" y="1870.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.40%)</title><rect x="843.5" y="1843.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="846.5" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::allocation() (1 samples, 0.40%)</title><rect x="843.5" y="1827.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="846.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.79%)</title><rect x="848.2" y="1907.0" width="9.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="851.2" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.79%)</title><rect x="848.2" y="1891.0" width="9.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="851.2" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="848.2" y="1875.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="851.2" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="848.2" y="1859.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="851.2" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_edge(PointsToNode*, PointsToNode*) [clone .isra.294] (1 samples, 0.40%)</title><rect x="848.2" y="1843.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="851.2" y="1854.0"></text>
</g>
<g>
<title>GrowableArray&lt;PointsToNode*&gt;::append(PointsToNode* const&amp;) (1 samples, 0.40%)</title><rect x="852.9" y="1875.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="855.9" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.79%)</title><rect x="857.5" y="1907.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="860.5" y="1918.0"></text>
</g>
<g>
<title>LoadNKlassNode::Value(PhaseTransform*) const (1 samples, 0.40%)</title><rect x="862.2" y="1891.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="865.2" y="1902.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="862.2" y="1875.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="865.2" y="1886.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="862.2" y="1859.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="865.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (41 samples, 16.27%)</title><rect x="866.9" y="1907.0" width="192.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="869.9" y="1918.0">PhaseIdealLoop::build_and..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="866.9" y="1891.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="869.9" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unswitching(IdealLoopTree*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="866.9" y="1875.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="869.9" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_slow_version_of_loop(IdealLoopTree*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="866.9" y="1859.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="869.9" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.40%)</title><rect x="866.9" y="1843.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="869.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 1.59%)</title><rect x="871.6" y="1891.0" width="18.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.6" y="1902.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="885.6" y="1875.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="888.6" y="1886.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="885.6" y="1859.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="888.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.19%)</title><rect x="890.3" y="1891.0" width="14.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="893.3" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (26 samples, 10.32%)</title><rect x="904.4" y="1891.0" width="121.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="907.4" y="1902.0">PhaseIdealLoop:..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (23 samples, 9.13%)</title><rect x="918.4" y="1875.0" width="107.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.4" y="1886.0">PhaseIdealLoo..</text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.40%)</title><rect x="918.4" y="1859.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="921.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (22 samples, 8.73%)</title><rect x="923.1" y="1859.0" width="103.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="926.1" y="1870.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (18 samples, 7.14%)</title><rect x="941.8" y="1843.0" width="84.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.8" y="1854.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 1.19%)</title><rect x="1026.1" y="1891.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1029.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.19%)</title><rect x="1040.2" y="1891.0" width="14.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1043.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 1.19%)</title><rect x="1040.2" y="1875.0" width="14.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1043.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.40%)</title><rect x="1040.2" y="1859.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1043.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.40%)</title><rect x="1044.8" y="1859.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1047.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.40%)</title><rect x="1044.8" y="1843.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1047.8" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.40%)</title><rect x="1049.5" y="1859.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.5" y="1870.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1049.5" y="1843.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1052.5" y="1854.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.40%)</title><rect x="1049.5" y="1827.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.5" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.40%)</title><rect x="1049.5" y="1811.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.5" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.40%)</title><rect x="1049.5" y="1795.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.5" y="1806.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.40%)</title><rect x="1049.5" y="1779.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.5" y="1790.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1054.2" y="1891.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1057.2" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1054.2" y="1875.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.2" y="1886.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1054.2" y="1859.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.2" y="1870.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.40%)</title><rect x="1054.2" y="1843.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 4.37%)</title><rect x="1058.9" y="1907.0" width="51.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.9" y="1918.0">Phase..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (11 samples, 4.37%)</title><rect x="1058.9" y="1891.0" width="51.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.9" y="1902.0">Phase..</text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1058.9" y="1875.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.9" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1063.6" y="1875.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1066.6" y="1886.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1063.6" y="1859.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1066.6" y="1870.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.40%)</title><rect x="1063.6" y="1843.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.6" y="1854.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1063.6" y="1827.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.6" y="1838.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 1.19%)</title><rect x="1068.3" y="1875.0" width="14.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.3" y="1886.0"></text>
</g>
<g>
<title>NodeHash::grow() (2 samples, 0.79%)</title><rect x="1068.3" y="1859.0" width="9.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.3" y="1870.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.40%)</title><rect x="1077.6" y="1859.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.6" y="1870.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.40%)</title><rect x="1077.6" y="1843.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1082.3" y="1875.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1085.3" y="1886.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1082.3" y="1859.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.3" y="1870.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.40%)</title><rect x="1082.3" y="1843.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.3" y="1854.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.40%)</title><rect x="1087.0" y="1875.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.0" y="1886.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1091.7" y="1875.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.7" y="1886.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.40%)</title><rect x="1091.7" y="1859.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.7" y="1870.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.79%)</title><rect x="1096.3" y="1875.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.3" y="1886.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.40%)</title><rect x="1096.3" y="1859.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.3" y="1870.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.40%)</title><rect x="1096.3" y="1843.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1099.3" y="1854.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.40%)</title><rect x="1096.3" y="1827.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.3" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.40%)</title><rect x="1101.0" y="1859.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.0" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1105.7" y="1875.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.7" y="1886.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.40%)</title><rect x="1105.7" y="1859.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.7" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1843.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1827.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.7" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1811.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.7" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1795.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.7" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1779.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.7" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1763.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.7" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1747.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.7" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1731.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.7" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1715.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.7" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1699.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1108.7" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1683.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1108.7" y="1694.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.40%)</title><rect x="1105.7" y="1667.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.7" y="1678.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1105.7" y="1651.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.7" y="1662.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 3.97%)</title><rect x="1110.4" y="1923.0" width="46.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.4" y="1934.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 3.97%)</title><rect x="1110.4" y="1907.0" width="46.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.4" y="1918.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 3.97%)</title><rect x="1110.4" y="1891.0" width="46.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.4" y="1902.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 3.97%)</title><rect x="1110.4" y="1875.0" width="46.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1113.4" y="1886.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 3.97%)</title><rect x="1110.4" y="1859.0" width="46.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.4" y="1870.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (10 samples, 3.97%)</title><rect x="1110.4" y="1843.0" width="46.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.4" y="1854.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1110.4" y="1827.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.4" y="1838.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1110.4" y="1811.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.4" y="1822.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1110.4" y="1795.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.4" y="1806.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1110.4" y="1779.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.4" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1110.4" y="1763.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.4" y="1774.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1110.4" y="1747.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.4" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1110.4" y="1731.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1113.4" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1110.4" y="1715.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.4" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.40%)</title><rect x="1110.4" y="1699.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.4" y="1710.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1110.4" y="1683.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.4" y="1694.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1110.4" y="1667.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.4" y="1678.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.40%)</title><rect x="1110.4" y="1651.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1113.4" y="1662.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.78%)</title><rect x="1115.1" y="1827.0" width="32.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.1" y="1838.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.78%)</title><rect x="1115.1" y="1811.0" width="32.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.1" y="1822.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.78%)</title><rect x="1115.1" y="1795.0" width="32.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.1" y="1806.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.78%)</title><rect x="1115.1" y="1779.0" width="32.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.1" y="1790.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.78%)</title><rect x="1115.1" y="1763.0" width="32.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.1" y="1774.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.78%)</title><rect x="1115.1" y="1747.0" width="32.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.1" y="1758.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.78%)</title><rect x="1115.1" y="1731.0" width="32.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.1" y="1742.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.78%)</title><rect x="1115.1" y="1715.0" width="32.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.1" y="1726.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.78%)</title><rect x="1115.1" y="1699.0" width="32.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.1" y="1710.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.78%)</title><rect x="1115.1" y="1683.0" width="32.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.1" y="1694.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.78%)</title><rect x="1115.1" y="1667.0" width="32.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1118.1" y="1678.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.78%)</title><rect x="1115.1" y="1651.0" width="32.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.1" y="1662.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1115.1" y="1635.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.1" y="1646.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1115.1" y="1619.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.1" y="1630.0"></text>
</g>
<g>
<title>InlineTree::build_inline_tree_for_callee(ciMethod*, JVMState*, int) (1 samples, 0.40%)</title><rect x="1115.1" y="1603.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.1" y="1614.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.40%)</title><rect x="1115.1" y="1587.0" width="4.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1118.1" y="1598.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.40%)</title><rect x="1119.8" y="1635.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.8" y="1646.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.40%)</title><rect x="1119.8" y="1619.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.8" y="1630.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1119.8" y="1603.0" width="4.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.8" y="1614.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.40%)</title><rect x="1119.8" y="1587.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.8" y="1598.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.98%)</title><rect x="1124.4" y="1635.0" width="23.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.4" y="1646.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.98%)</title><rect x="1124.4" y="1619.0" width="23.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.4" y="1630.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.98%)</title><rect x="1124.4" y="1603.0" width="23.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.4" y="1614.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.98%)</title><rect x="1124.4" y="1587.0" width="23.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.4" y="1598.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.98%)</title><rect x="1124.4" y="1571.0" width="23.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.4" y="1582.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.59%)</title><rect x="1124.4" y="1555.0" width="18.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.4" y="1566.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1124.4" y="1539.0" width="9.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.4" y="1550.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1124.4" y="1523.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.4" y="1534.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1124.4" y="1507.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.4" y="1518.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1124.4" y="1491.0" width="9.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1124.4" y="1475.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1124.4" y="1459.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.4" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1124.4" y="1443.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.4" y="1454.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1124.4" y="1427.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.4" y="1438.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1124.4" y="1411.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.4" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1124.4" y="1395.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1124.4" y="1379.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1124.4" y="1363.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.4" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1124.4" y="1347.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.4" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1124.4" y="1331.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.4" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1124.4" y="1315.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.4" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1124.4" y="1299.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1124.4" y="1283.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1124.4" y="1267.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.4" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1124.4" y="1251.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1127.4" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1124.4" y="1235.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.4" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1124.4" y="1219.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1124.4" y="1203.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1124.4" y="1187.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1124.4" y="1171.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.4" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1124.4" y="1155.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.4" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1124.4" y="1139.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1124.4" y="1123.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1124.4" y="1107.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1124.4" y="1091.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1124.4" y="1075.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.4" y="1086.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.40%)</title><rect x="1124.4" y="1059.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.4" y="1070.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.40%)</title><rect x="1124.4" y="1043.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1129.1" y="1459.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.1" y="1470.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1129.1" y="1443.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.1" y="1454.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.40%)</title><rect x="1129.1" y="1427.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.1" y="1438.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1129.1" y="1411.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.1" y="1422.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1129.1" y="1395.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.1" y="1406.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1133.8" y="1539.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.8" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1133.8" y="1523.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.8" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1133.8" y="1507.0" width="9.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.8" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1133.8" y="1491.0" width="9.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1133.8" y="1475.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1133.8" y="1459.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1133.8" y="1443.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.8" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1133.8" y="1427.0" width="9.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1133.8" y="1411.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.8" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1133.8" y="1395.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1133.8" y="1379.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1133.8" y="1363.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1133.8" y="1347.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.8" y="1358.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1133.8" y="1331.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="1342.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1133.8" y="1315.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.8" y="1326.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1133.8" y="1299.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.8" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1133.8" y="1283.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1133.8" y="1267.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.8" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1133.8" y="1251.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.8" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1138.5" y="1331.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.5" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1138.5" y="1315.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1138.5" y="1299.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1138.5" y="1283.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1138.5" y="1267.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1138.5" y="1251.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.5" y="1262.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1138.5" y="1235.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.5" y="1246.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd, bool) (1 samples, 0.40%)</title><rect x="1138.5" y="1219.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.5" y="1230.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.40%)</title><rect x="1138.5" y="1203.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.5" y="1214.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1138.5" y="1187.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.5" y="1198.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1138.5" y="1171.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.5" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.40%)</title><rect x="1138.5" y="1155.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.40%)</title><rect x="1143.2" y="1555.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.2" y="1566.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.40%)</title><rect x="1143.2" y="1539.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.2" y="1550.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1147.9" y="1827.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.9" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1147.9" y="1811.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.9" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1147.9" y="1795.0" width="9.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.9" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1147.9" y="1779.0" width="9.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1147.9" y="1763.0" width="9.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.9" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1147.9" y="1747.0" width="9.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.9" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1147.9" y="1731.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.9" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.79%)</title><rect x="1147.9" y="1715.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.9" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.79%)</title><rect x="1147.9" y="1699.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.79%)</title><rect x="1147.9" y="1683.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.79%)</title><rect x="1147.9" y="1667.0" width="9.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.79%)</title><rect x="1147.9" y="1651.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.79%)</title><rect x="1147.9" y="1635.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.9" y="1646.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.40%)</title><rect x="1147.9" y="1619.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.9" y="1630.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.40%)</title><rect x="1147.9" y="1603.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.9" y="1614.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1147.9" y="1587.0" width="4.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.9" y="1598.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.40%)</title><rect x="1147.9" y="1571.0" width="4.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.9" y="1582.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1152.5" y="1619.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.5" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1152.5" y="1603.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.5" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1152.5" y="1587.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.5" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1152.5" y="1571.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.5" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1152.5" y="1555.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.5" y="1566.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.40%)</title><rect x="1152.5" y="1539.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.5" y="1550.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.40%)</title><rect x="1152.5" y="1523.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.5" y="1534.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.40%)</title><rect x="1152.5" y="1507.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.5" y="1518.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.40%)</title><rect x="1152.5" y="1491.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.5" y="1502.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.79%)</title><rect x="1157.2" y="1923.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.2" y="1934.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1157.2" y="1907.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1160.2" y="1918.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1161.9" y="1907.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.9" y="1918.0"></text>
</g>
<g>
<title>Type::Initialize(Compile*) (1 samples, 0.40%)</title><rect x="1166.6" y="1923.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.6" y="1934.0"></text>
</g>
<g>
<title>DictI::operator++() (1 samples, 0.40%)</title><rect x="1166.6" y="1907.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.6" y="1918.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.19%)</title><rect x="1171.3" y="1955.0" width="14.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.3" y="1966.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.19%)</title><rect x="1171.3" y="1939.0" width="14.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.3" y="1950.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.19%)</title><rect x="1171.3" y="1923.0" width="14.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.3" y="1934.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.19%)</title><rect x="1171.3" y="1907.0" width="14.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.3" y="1918.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.40%)</title><rect x="1171.3" y="1891.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.3" y="1902.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.40%)</title><rect x="1171.3" y="1875.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.3" y="1886.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.40%)</title><rect x="1171.3" y="1859.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1870.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.40%)</title><rect x="1171.3" y="1843.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="1854.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1171.3" y="1827.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="1838.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1171.3" y="1811.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.3" y="1822.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.40%)</title><rect x="1171.3" y="1795.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.3" y="1806.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.40%)</title><rect x="1171.3" y="1779.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.3" y="1790.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.40%)</title><rect x="1171.3" y="1763.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.3" y="1774.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.40%)</title><rect x="1171.3" y="1747.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.3" y="1758.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.40%)</title><rect x="1176.0" y="1891.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="1902.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (1 samples, 0.40%)</title><rect x="1176.0" y="1875.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="1886.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (1 samples, 0.40%)</title><rect x="1176.0" y="1859.0" width="4.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="1870.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.40%)</title><rect x="1176.0" y="1843.0" width="4.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="1854.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.40%)</title><rect x="1176.0" y="1827.0" width="4.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.0" y="1838.0"></text>
</g>
<g>
<title>external_word_Relocation::pack_data_to(CodeSection*) (1 samples, 0.40%)</title><rect x="1176.0" y="1811.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.0" y="1822.0"></text>
</g>
<g>
<title>StubCodeDesc::desc_for(unsigned char*) (1 samples, 0.40%)</title><rect x="1176.0" y="1795.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.0" y="1806.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.40%)</title><rect x="1180.6" y="1891.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="1902.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.40%)</title><rect x="1180.6" y="1875.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="1886.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.40%)</title><rect x="1180.6" y="1859.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="1870.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.40%)</title><rect x="1180.6" y="1843.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="1854.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.40%)</title><rect x="1185.3" y="1987.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.3" y="1998.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.40%)</title><rect x="1185.3" y="1971.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.3" y="1982.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.40%)</title><rect x="1185.3" y="1955.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.3" y="1966.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.40%)</title><rect x="1185.3" y="1939.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.3" y="1950.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.40%)</title><rect x="1185.3" y="1923.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.3" y="1934.0"></text>
</g>
</g>
</svg>
