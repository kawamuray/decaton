<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (1,125 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (262 samples, 23.29%)</title><rect x="10.0" y="1251.0" width="274.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitOffsetsIfNecessary (1 samples, 0.09%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.09%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="10.0" y="1203.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitSync (1 samples, 0.09%)</title><rect x="10.0" y="1187.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsSync (1 samples, 0.09%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.09%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="10.0" y="1043.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.09%)</title><rect x="10.0" y="1027.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="10.0" y="1011.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.09%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/TaggedFields.read (1 samples, 0.09%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/TaggedFields.read (1 samples, 0.09%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.09%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (261 samples, 23.20%)</title><rect x="11.0" y="1235.0" width="273.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.0" y="1246.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (3 samples, 0.27%)</title><rect x="11.0" y="1219.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="14.0" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.27%)</title><rect x="11.0" y="1203.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1786475273.accept (3 samples, 0.27%)</title><rect x="11.0" y="1187.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="14.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (3 samples, 0.27%)</title><rect x="11.0" y="1171.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="14.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.18%)</title><rect x="12.1" y="1155.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.1" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.18%)</title><rect x="12.1" y="1139.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (5 samples, 0.44%)</title><rect x="14.2" y="1219.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="17.2" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (5 samples, 0.44%)</title><rect x="14.2" y="1203.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.27%)</title><rect x="16.3" y="1187.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.3" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.27%)</title><rect x="16.3" y="1171.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.27%)</title><rect x="16.3" y="1155.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="16.3" y="1139.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="16.3" y="1123.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="16.3" y="1107.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="17.3" y="1107.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="17.3" y="1091.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.3" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="17.3" y="1075.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="20.3" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.09%)</title><rect x="17.3" y="1059.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.09%)</title><rect x="18.4" y="1139.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="21.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.09%)</title><rect x="18.4" y="1123.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="19.4" y="1219.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.4" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="19.4" y="1203.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="22.4" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="19.4" y="1187.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="22.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (196 samples, 17.42%)</title><rect x="20.5" y="1219.0" width="205.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.5" y="1230.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/267914652.accept (191 samples, 16.98%)</title><rect x="21.5" y="1203.0" width="200.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.5" y="1214.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (191 samples, 16.98%)</title><rect x="21.5" y="1187.0" width="200.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="1198.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (157 samples, 13.96%)</title><rect x="21.5" y="1171.0" width="164.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="24.5" y="1182.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (157 samples, 13.96%)</title><rect x="21.5" y="1155.0" width="164.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.5" y="1166.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (157 samples, 13.96%)</title><rect x="21.5" y="1139.0" width="164.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.5" y="1150.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (157 samples, 13.96%)</title><rect x="21.5" y="1123.0" width="164.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="24.5" y="1134.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (157 samples, 13.96%)</title><rect x="21.5" y="1107.0" width="164.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.5" y="1118.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (157 samples, 13.96%)</title><rect x="21.5" y="1091.0" width="164.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.5" y="1102.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (115 samples, 10.22%)</title><rect x="21.5" y="1075.0" width="120.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.5" y="1086.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (15 samples, 1.33%)</title><rect x="21.5" y="1059.0" width="15.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="24.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (15 samples, 1.33%)</title><rect x="21.5" y="1043.0" width="15.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="24.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (9 samples, 0.80%)</title><rect x="27.8" y="1027.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (9 samples, 0.80%)</title><rect x="27.8" y="1011.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 0.98%)</title><rect x="37.3" y="1059.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (11 samples, 0.98%)</title><rect x="37.3" y="1043.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.36%)</title><rect x="40.4" y="1027.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.4" y="1038.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (4 samples, 0.36%)</title><rect x="40.4" y="1011.0" width="4.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="43.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.36%)</title><rect x="44.6" y="1027.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="47.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (89 samples, 7.91%)</title><rect x="48.8" y="1059.0" width="93.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.8" y="1070.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (89 samples, 7.91%)</title><rect x="48.8" y="1043.0" width="93.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="1054.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (89 samples, 7.91%)</title><rect x="48.8" y="1027.0" width="93.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.8" y="1038.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (88 samples, 7.82%)</title><rect x="48.8" y="1011.0" width="92.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="1022.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (87 samples, 7.73%)</title><rect x="49.9" y="995.0" width="91.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.9" y="1006.0">sun/misc/Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="49.9" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="52.9" y="990.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="50.9" y="979.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="53.9" y="990.0"></text>
</g>
<g>
<title>Unsafe_Unpark (78 samples, 6.93%)</title><rect x="52.0" y="979.0" width="81.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="55.0" y="990.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="52.0" y="963.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="55.0" y="974.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="53.0" y="963.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="56.0" y="974.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="54.1" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="57.1" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_signal (57 samples, 5.07%)</title><rect x="55.1" y="963.0" width="59.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="58.1" y="974.0">__pthr..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.44%)</title><rect x="114.9" y="963.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="117.9" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.16%)</title><rect x="120.1" y="963.0" width="13.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="123.1" y="974.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.44%)</title><rect x="133.8" y="979.0" width="5.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="136.8" y="990.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="139.0" y="979.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="142.0" y="990.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="140.1" y="979.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="143.1" y="990.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.09%)</title><rect x="141.1" y="1011.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="144.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 2.40%)</title><rect x="142.2" y="1075.0" width="28.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="145.2" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 2.40%)</title><rect x="142.2" y="1059.0" width="28.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.2" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (27 samples, 2.40%)</title><rect x="142.2" y="1043.0" width="28.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="145.2" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.80%)</title><rect x="170.5" y="1075.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (8 samples, 0.71%)</title><rect x="170.5" y="1059.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="173.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 0.71%)</title><rect x="170.5" y="1043.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="173.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="175.7" y="1027.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.7" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="176.8" y="1027.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="179.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.09%)</title><rect x="178.9" y="1059.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="181.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.09%)</title><rect x="178.9" y="1043.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.53%)</title><rect x="179.9" y="1075.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.53%)</title><rect x="179.9" y="1059.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="182.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.09%)</title><rect x="179.9" y="1043.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.09%)</title><rect x="179.9" y="1027.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="182.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 0.44%)</title><rect x="181.0" y="1043.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="184.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (4 samples, 0.36%)</title><rect x="182.0" y="1027.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="185.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.registerOffset (2 samples, 0.18%)</title><rect x="186.2" y="1171.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.18%)</title><rect x="186.2" y="1155.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="189.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (4 samples, 0.36%)</title><rect x="188.3" y="1171.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.3" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.36%)</title><rect x="188.3" y="1155.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.3" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.36%)</title><rect x="188.3" y="1139.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="191.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (28 samples, 2.49%)</title><rect x="192.5" y="1171.0" width="29.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="195.5" y="1182.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (27 samples, 2.40%)</title><rect x="192.5" y="1155.0" width="28.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.5" y="1166.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.71%)</title><rect x="209.3" y="1139.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.18%)</title><rect x="209.3" y="1123.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="212.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.18%)</title><rect x="209.3" y="1107.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.18%)</title><rect x="209.3" y="1091.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="212.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.09%)</title><rect x="211.4" y="1123.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.44%)</title><rect x="212.4" y="1123.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.4" y="1134.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="217.7" y="1139.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="220.7" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="218.7" y="1139.0" width="2.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="221.7" y="1150.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="220.8" y="1155.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="223.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.09%)</title><rect x="221.9" y="1203.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.9" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="221.9" y="1187.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="221.9" y="1171.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.18%)</title><rect x="222.9" y="1203.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="225.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.18%)</title><rect x="222.9" y="1187.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="225.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.18%)</title><rect x="222.9" y="1171.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.18%)</title><rect x="222.9" y="1155.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="225.9" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.09%)</title><rect x="222.9" y="1139.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.09%)</title><rect x="224.0" y="1139.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.09%)</title><rect x="224.0" y="1123.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="225.0" y="1203.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="228.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="225.0" y="1187.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.98%)</title><rect x="226.1" y="1219.0" width="58.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.1" y="1230.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (56 samples, 4.98%)</title><rect x="226.1" y="1203.0" width="58.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.1" y="1214.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (23 samples, 2.04%)</title><rect x="226.1" y="1187.0" width="24.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.1" y="1198.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (23 samples, 2.04%)</title><rect x="226.1" y="1171.0" width="24.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.1" y="1182.0">o..</text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="226.1" y="1155.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.1" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="226.1" y="1139.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.1" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="226.1" y="1123.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (22 samples, 1.96%)</title><rect x="227.1" y="1155.0" width="23.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.1" y="1166.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (17 samples, 1.51%)</title><rect x="227.1" y="1139.0" width="17.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (17 samples, 1.51%)</title><rect x="227.1" y="1123.0" width="17.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.89%)</title><rect x="228.2" y="1107.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.62%)</title><rect x="231.3" y="1091.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="234.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.62%)</title><rect x="231.3" y="1075.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.62%)</title><rect x="231.3" y="1059.0" width="7.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="234.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.62%)</title><rect x="231.3" y="1043.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.62%)</title><rect x="231.3" y="1027.0" width="7.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.62%)</title><rect x="231.3" y="1011.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.53%)</title><rect x="232.4" y="995.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (6 samples, 0.53%)</title><rect x="238.7" y="1107.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="241.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.53%)</title><rect x="238.7" y="1091.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.44%)</title><rect x="238.7" y="1075.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.44%)</title><rect x="238.7" y="1059.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.09%)</title><rect x="243.9" y="1075.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.9" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.09%)</title><rect x="243.9" y="1059.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (3 samples, 0.27%)</title><rect x="245.0" y="1139.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.27%)</title><rect x="245.0" y="1123.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="245.0" y="1107.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="245.0" y="1091.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="248.0" y="1102.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="245.0" y="1075.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="248.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="246.0" y="1107.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="246.0" y="1091.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="246.0" y="1075.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLead (2 samples, 0.18%)</title><rect x="248.1" y="1139.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (13 samples, 1.16%)</title><rect x="250.2" y="1187.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="253.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (12 samples, 1.07%)</title><rect x="250.2" y="1171.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (10 samples, 0.89%)</title><rect x="250.2" y="1155.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.18%)</title><rect x="250.2" y="1139.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/645722815.accept (1 samples, 0.09%)</title><rect x="251.2" y="1123.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.09%)</title><rect x="251.2" y="1107.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.09%)</title><rect x="251.2" y="1091.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.09%)</title><rect x="251.2" y="1075.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.09%)</title><rect x="251.2" y="1059.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.2" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.36%)</title><rect x="252.3" y="1139.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.36%)</title><rect x="252.3" y="1123.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="255.3" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.36%)</title><rect x="252.3" y="1107.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.36%)</title><rect x="252.3" y="1091.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.3" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.36%)</title><rect x="252.3" y="1075.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="255.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="253.3" y="1059.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.3" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="253.3" y="1043.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.3" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (2 samples, 0.18%)</title><rect x="254.4" y="1059.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$77/713926086.get (2 samples, 0.18%)</title><rect x="254.4" y="1043.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.18%)</title><rect x="256.5" y="1139.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="259.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.18%)</title><rect x="256.5" y="1123.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="259.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="256.5" y="1107.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="256.5" y="1091.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="256.5" y="1075.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="257.5" y="1059.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="257.5" y="1043.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="257.5" y="1027.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.09%)</title><rect x="257.5" y="1011.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="260.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.18%)</title><rect x="258.6" y="1139.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.18%)</title><rect x="258.6" y="1123.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.18%)</title><rect x="258.6" y="1107.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.6" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="258.6" y="1091.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.6" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.18%)</title><rect x="258.6" y="1075.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.6" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="258.6" y="1059.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.6" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="258.6" y="1043.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.6" y="1054.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="258.6" y="1027.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.6" y="1038.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.09%)</title><rect x="258.6" y="1011.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.6" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.09%)</title><rect x="258.6" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.6" y="1006.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="259.6" y="1027.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.6" y="1038.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.09%)</title><rect x="259.6" y="1011.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.09%)</title><rect x="259.6" y="995.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.18%)</title><rect x="260.7" y="1155.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.18%)</title><rect x="260.7" y="1139.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.18%)</title><rect x="260.7" y="1123.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="260.7" y="1107.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="263.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.18%)</title><rect x="260.7" y="1091.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.7" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.18%)</title><rect x="260.7" y="1075.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.7" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.18%)</title><rect x="260.7" y="1059.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.7" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.18%)</title><rect x="260.7" y="1043.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="263.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="260.7" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.7" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="260.7" y="1011.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="263.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.09%)</title><rect x="261.7" y="1027.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.09%)</title><rect x="261.7" y="1011.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="262.8" y="1171.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="262.8" y="1155.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="262.8" y="1139.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="262.8" y="1123.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.71%)</title><rect x="263.8" y="1187.0" width="8.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="266.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.62%)</title><rect x="263.8" y="1171.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.09%)</title><rect x="263.8" y="1155.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.09%)</title><rect x="263.8" y="1139.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.09%)</title><rect x="263.8" y="1123.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="263.8" y="1107.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.09%)</title><rect x="263.8" y="1091.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="263.8" y="1075.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.09%)</title><rect x="263.8" y="1059.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="266.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.09%)</title><rect x="263.8" y="1043.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.53%)</title><rect x="264.9" y="1155.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="267.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.44%)</title><rect x="264.9" y="1139.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (5 samples, 0.44%)</title><rect x="264.9" y="1123.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (5 samples, 0.44%)</title><rect x="264.9" y="1107.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (5 samples, 0.44%)</title><rect x="264.9" y="1091.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="267.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (5 samples, 0.44%)</title><rect x="264.9" y="1075.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="267.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (5 samples, 0.44%)</title><rect x="264.9" y="1059.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.9" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (5 samples, 0.44%)</title><rect x="264.9" y="1043.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.9" y="1054.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="264.9" y="1027.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="267.9" y="1038.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="265.9" y="1027.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="268.9" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.09%)</title><rect x="268.0" y="1027.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.0" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.09%)</title><rect x="268.0" y="1011.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="271.0" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.09%)</title><rect x="268.0" y="995.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.0" y="1006.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.09%)</title><rect x="268.0" y="979.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.0" y="990.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureReadOpen (1 samples, 0.09%)</title><rect x="269.1" y="1027.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.1" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.isConnected (1 samples, 0.09%)</title><rect x="269.1" y="1011.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.09%)</title><rect x="270.1" y="1139.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.1" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.09%)</title><rect x="270.1" y="1123.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.1" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.09%)</title><rect x="270.1" y="1107.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.1" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.09%)</title><rect x="270.1" y="1091.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="273.1" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.09%)</title><rect x="270.1" y="1075.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="273.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.09%)</title><rect x="271.2" y="1171.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="271.2" y="1155.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="271.2" y="1139.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="271.2" y="1123.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.09%)</title><rect x="271.2" y="1107.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.09%)</title><rect x="271.2" y="1091.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.09%)</title><rect x="271.2" y="1075.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.2" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.hasNext (1 samples, 0.09%)</title><rect x="271.2" y="1059.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.62%)</title><rect x="272.2" y="1187.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.62%)</title><rect x="272.2" y="1171.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="275.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 0.36%)</title><rect x="272.2" y="1155.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="275.2" y="1166.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.09%)</title><rect x="272.2" y="1139.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.2" y="1150.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="272.2" y="1123.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="275.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$240/1949845132.accept (3 samples, 0.27%)</title><rect x="273.3" y="1139.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (3 samples, 0.27%)</title><rect x="273.3" y="1123.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (3 samples, 0.27%)</title><rect x="273.3" y="1107.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="276.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (3 samples, 0.27%)</title><rect x="273.3" y="1091.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.27%)</title><rect x="273.3" y="1075.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="273.3" y="1059.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.18%)</title><rect x="276.4" y="1155.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.09%)</title><rect x="276.4" y="1139.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="277.5" y="1139.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="277.5" y="1123.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="277.5" y="1107.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.5" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="277.5" y="1091.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.5" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="277.5" y="1075.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.5" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="277.5" y="1059.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.5" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="277.5" y="1043.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="280.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="277.5" y="1027.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="277.5" y="1011.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.09%)</title><rect x="277.5" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sessionHandler (1 samples, 0.09%)</title><rect x="278.5" y="1155.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="278.5" y="1139.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="281.5" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="278.5" y="1123.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.09%)</title><rect x="278.5" y="1107.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="281.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.09%)</title><rect x="279.6" y="1187.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="279.6" y="1171.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="279.6" y="1155.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="279.6" y="1139.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (4 samples, 0.36%)</title><rect x="280.6" y="1187.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (4 samples, 0.36%)</title><rect x="280.6" y="1171.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (4 samples, 0.36%)</title><rect x="280.6" y="1155.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="283.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (4 samples, 0.36%)</title><rect x="280.6" y="1139.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (3 samples, 0.27%)</title><rect x="280.6" y="1123.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (2 samples, 0.18%)</title><rect x="281.7" y="1107.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="284.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="283.8" y="1123.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="286.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="283.8" y="1107.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.09%)</title><rect x="283.8" y="1091.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (659 samples, 58.58%)</title><rect x="284.8" y="1251.0" width="691.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.8" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (659 samples, 58.58%)</title><rect x="284.8" y="1235.0" width="691.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.8" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (659 samples, 58.58%)</title><rect x="284.8" y="1219.0" width="691.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="287.8" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/567808441.run (438 samples, 38.93%)</title><rect x="292.2" y="1203.0" width="459.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.2" y="1214.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$26..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (438 samples, 38.93%)</title><rect x="292.2" y="1187.0" width="459.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.2" y="1198.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$put..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (438 samples, 38.93%)</title><rect x="292.2" y="1171.0" width="459.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.2" y="1182.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (433 samples, 38.49%)</title><rect x="292.2" y="1155.0" width="454.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.2" y="1166.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.schedul..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.62%)</title><rect x="298.4" y="1139.0" width="7.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="301.4" y="1150.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.36%)</title><rect x="301.6" y="1123.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="304.6" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (128 samples, 11.38%)</title><rect x="305.8" y="1139.0" width="134.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.8" y="1150.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (128 samples, 11.38%)</title><rect x="305.8" y="1123.0" width="134.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.8" y="1134.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (128 samples, 11.38%)</title><rect x="305.8" y="1107.0" width="134.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.8" y="1118.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (128 samples, 11.38%)</title><rect x="305.8" y="1091.0" width="134.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.8" y="1102.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (128 samples, 11.38%)</title><rect x="305.8" y="1075.0" width="134.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.8" y="1086.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (128 samples, 11.38%)</title><rect x="305.8" y="1059.0" width="134.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.8" y="1070.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 4.62%)</title><rect x="305.8" y="1043.0" width="54.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.8" y="1054.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (24 samples, 2.13%)</title><rect x="306.8" y="1027.0" width="25.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="309.8" y="1038.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (24 samples, 2.13%)</title><rect x="306.8" y="1011.0" width="25.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="309.8" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (24 samples, 2.13%)</title><rect x="306.8" y="995.0" width="25.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.8" y="1006.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (24 samples, 2.13%)</title><rect x="306.8" y="979.0" width="25.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="309.8" y="990.0">j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.18%)</title><rect x="328.9" y="963.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="331.0" y="963.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.0" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="331.0" y="947.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (27 samples, 2.40%)</title><rect x="332.0" y="1027.0" width="28.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="335.0" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (23 samples, 2.04%)</title><rect x="335.2" y="1011.0" width="24.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.2" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.44%)</title><rect x="335.2" y="995.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (5 samples, 0.44%)</title><rect x="335.2" y="979.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="338.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (15 samples, 1.33%)</title><rect x="340.4" y="995.0" width="15.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="343.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (15 samples, 1.33%)</title><rect x="340.4" y="979.0" width="15.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="343.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="353.0" y="963.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.0" y="974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="353.0" y="947.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="356.0" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="353.0" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="356.0" y="942.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="353.0" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="356.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.18%)</title><rect x="354.0" y="963.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (3 samples, 0.27%)</title><rect x="356.1" y="995.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="359.1" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.27%)</title><rect x="356.1" y="979.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="359.1" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.27%)</title><rect x="356.1" y="963.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="359.1" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.27%)</title><rect x="356.1" y="947.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="359.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="358.2" y="931.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="361.2" y="942.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="358.2" y="915.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="361.2" y="926.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="358.2" y="899.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="361.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="359.3" y="1011.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (74 samples, 6.58%)</title><rect x="360.3" y="1043.0" width="77.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="363.3" y="1054.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (6 samples, 0.53%)</title><rect x="360.3" y="1027.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (6 samples, 0.53%)</title><rect x="360.3" y="1011.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="363.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (6 samples, 0.53%)</title><rect x="360.3" y="995.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="363.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (6 samples, 0.53%)</title><rect x="360.3" y="979.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (1 samples, 0.09%)</title><rect x="362.4" y="963.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.09%)</title><rect x="362.4" y="947.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="365.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.checkedByteOffset (1 samples, 0.09%)</title><rect x="362.4" y="931.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.resetWithEmpty (3 samples, 0.27%)</title><rect x="363.5" y="963.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.09%)</title><rect x="366.6" y="1027.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="366.6" y="1011.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="369.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="366.6" y="995.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 0.80%)</title><rect x="367.7" y="1027.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="370.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.71%)</title><rect x="368.7" y="1011.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.62%)</title><rect x="369.8" y="995.0" width="7.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.44%)</title><rect x="371.9" y="979.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.9" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="374.0" y="963.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="377.0" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="374.0" y="947.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="377.0" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="374.0" y="931.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="377.0" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="374.0" y="915.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="377.0" y="926.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="374.0" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="377.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.18%)</title><rect x="375.0" y="963.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.53%)</title><rect x="377.1" y="1027.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="380.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.53%)</title><rect x="377.1" y="1011.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="380.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (6 samples, 0.53%)</title><rect x="377.1" y="995.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="380.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (6 samples, 0.53%)</title><rect x="377.1" y="979.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.18%)</title><rect x="378.2" y="963.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="381.2" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.27%)</title><rect x="380.3" y="963.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="383.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (52 samples, 4.62%)</title><rect x="383.4" y="1027.0" width="54.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.4" y="1038.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.80%)</title><rect x="383.4" y="1011.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="386.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="387.6" y="995.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="387.6" y="979.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="390.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.36%)</title><rect x="388.6" y="995.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="391.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (43 samples, 3.82%)</title><rect x="392.8" y="1011.0" width="45.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="395.8" y="1022.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (43 samples, 3.82%)</title><rect x="392.8" y="995.0" width="45.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="395.8" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (43 samples, 3.82%)</title><rect x="392.8" y="979.0" width="45.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="395.8" y="990.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 1.07%)</title><rect x="396.0" y="963.0" width="12.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="399.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.44%)</title><rect x="399.1" y="947.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.44%)</title><rect x="399.1" y="931.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="402.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.44%)</title><rect x="399.1" y="915.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="402.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.36%)</title><rect x="400.2" y="899.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="403.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.27%)</title><rect x="404.4" y="947.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.27%)</title><rect x="404.4" y="931.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="406.5" y="915.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="407.5" y="947.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="408.6" y="963.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.71%)</title><rect x="409.6" y="963.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="412.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.36%)</title><rect x="413.8" y="947.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.36%)</title><rect x="413.8" y="931.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.36%)</title><rect x="413.8" y="915.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.8" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.36%)</title><rect x="413.8" y="899.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="416.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.09%)</title><rect x="418.0" y="963.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="421.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (12 samples, 1.07%)</title><rect x="419.1" y="963.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (12 samples, 1.07%)</title><rect x="419.1" y="947.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (12 samples, 1.07%)</title><rect x="419.1" y="931.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (12 samples, 1.07%)</title><rect x="419.1" y="915.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="422.1" y="926.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (12 samples, 1.07%)</title><rect x="419.1" y="899.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="422.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="425.4" y="883.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="428.4" y="894.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.44%)</title><rect x="426.4" y="883.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="429.4" y="894.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (5 samples, 0.44%)</title><rect x="426.4" y="867.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="429.4" y="878.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.isVMAnonymousClass (1 samples, 0.09%)</title><rect x="430.6" y="851.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="433.6" y="862.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.09%)</title><rect x="430.6" y="835.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="433.6" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="430.6" y="819.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="433.6" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.44%)</title><rect x="431.7" y="963.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.7" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.44%)</title><rect x="431.7" y="947.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="434.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.44%)</title><rect x="431.7" y="931.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="434.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="435.8" y="915.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="438.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.09%)</title><rect x="436.9" y="963.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="439.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="436.9" y="947.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="439.9" y="958.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.09%)</title><rect x="436.9" y="931.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.18%)</title><rect x="437.9" y="1043.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="440.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.18%)</title><rect x="437.9" y="1027.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.18%)</title><rect x="437.9" y="1011.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="440.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.18%)</title><rect x="437.9" y="995.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.18%)</title><rect x="437.9" y="979.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (1 samples, 0.09%)</title><rect x="439.0" y="963.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="442.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (266 samples, 23.64%)</title><rect x="440.0" y="1139.0" width="279.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="443.0" y="1150.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (53 samples, 4.71%)</title><rect x="442.1" y="1123.0" width="55.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.1" y="1134.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (53 samples, 4.71%)</title><rect x="442.1" y="1107.0" width="55.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="445.1" y="1118.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (48 samples, 4.27%)</title><rect x="447.4" y="1091.0" width="50.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.4" y="1102.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.62%)</title><rect x="447.4" y="1075.0" width="7.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="450.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.62%)</title><rect x="447.4" y="1059.0" width="7.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.62%)</title><rect x="447.4" y="1043.0" width="7.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.62%)</title><rect x="447.4" y="1027.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="450.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="453.7" y="1011.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.09%)</title><rect x="453.7" y="995.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="456.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (41 samples, 3.64%)</title><rect x="454.7" y="1075.0" width="43.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="457.7" y="1086.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (16 samples, 1.42%)</title><rect x="481.0" y="1059.0" width="16.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="484.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="481.0" y="1043.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="481.0" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="484.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (15 samples, 1.33%)</title><rect x="482.0" y="1043.0" width="15.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.36%)</title><rect x="493.5" y="1027.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="496.5" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.44%)</title><rect x="497.7" y="1123.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.36%)</title><rect x="498.8" y="1107.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="501.8" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="498.8" y="1091.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="501.8" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="498.8" y="1075.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="501.8" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="498.8" y="1059.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="501.8" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="498.8" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="501.8" y="1054.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="498.8" y="1027.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="501.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.27%)</title><rect x="499.8" y="1091.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="502.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (141 samples, 12.53%)</title><rect x="503.0" y="1123.0" width="147.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.0" y="1134.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (141 samples, 12.53%)</title><rect x="503.0" y="1107.0" width="147.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="506.0" y="1118.0">com/linecorp/decato..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="504.0" y="1091.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="507.0" y="1102.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.27%)</title><rect x="505.1" y="1091.0" width="3.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="508.1" y="1102.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="505.1" y="1075.0" width="3.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="508.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (46 samples, 4.09%)</title><rect x="508.2" y="1091.0" width="48.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="511.2" y="1102.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (33 samples, 2.93%)</title><rect x="513.5" y="1075.0" width="34.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="516.5" y="1086.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (32 samples, 2.84%)</title><rect x="514.5" y="1059.0" width="33.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="517.5" y="1070.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (20 samples, 1.78%)</title><rect x="519.8" y="1043.0" width="20.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="522.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (20 samples, 1.78%)</title><rect x="519.8" y="1027.0" width="20.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="522.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (20 samples, 1.78%)</title><rect x="519.8" y="1011.0" width="20.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="522.8" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.71%)</title><rect x="525.0" y="995.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="528.0" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.36%)</title><rect x="525.0" y="979.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="528.0" y="990.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="525.0" y="963.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="528.0" y="974.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.27%)</title><rect x="526.1" y="963.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="529.1" y="974.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.27%)</title><rect x="526.1" y="947.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="529.1" y="958.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.09%)</title><rect x="526.1" y="931.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="529.1" y="942.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="526.1" y="915.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="529.1" y="926.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.18%)</title><rect x="527.1" y="931.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="530.1" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.36%)</title><rect x="529.2" y="979.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="532.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.36%)</title><rect x="529.2" y="963.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="532.2" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.18%)</title><rect x="530.2" y="947.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="533.2" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (2 samples, 0.18%)</title><rect x="530.2" y="931.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="533.2" y="942.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="530.2" y="915.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="533.2" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="530.2" y="899.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="533.2" y="910.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.09%)</title><rect x="530.2" y="883.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="533.2" y="894.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.09%)</title><rect x="531.3" y="915.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="534.3" y="926.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="532.3" y="947.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="535.3" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="532.3" y="931.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="535.3" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.62%)</title><rect x="533.4" y="995.0" width="7.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="536.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.27%)</title><rect x="540.7" y="1043.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="543.7" y="1054.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.27%)</title><rect x="543.9" y="1043.0" width="3.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="546.9" y="1054.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="547.0" y="1043.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="550.0" y="1054.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.09%)</title><rect x="548.1" y="1075.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="551.1" y="1086.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.62%)</title><rect x="549.1" y="1075.0" width="7.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="552.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.36%)</title><rect x="556.5" y="1091.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.18%)</title><rect x="556.5" y="1075.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="559.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.18%)</title><rect x="556.5" y="1059.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="559.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.18%)</title><rect x="556.5" y="1043.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="559.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.18%)</title><rect x="558.6" y="1075.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="561.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.18%)</title><rect x="558.6" y="1059.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="561.6" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (86 samples, 7.64%)</title><rect x="560.7" y="1091.0" width="90.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="563.7" y="1102.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (75 samples, 6.67%)</title><rect x="572.2" y="1075.0" width="78.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="575.2" y="1086.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.53%)</title><rect x="572.2" y="1059.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="575.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.53%)</title><rect x="572.2" y="1043.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="575.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.53%)</title><rect x="572.2" y="1027.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="575.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.53%)</title><rect x="572.2" y="1011.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="575.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.09%)</title><rect x="577.4" y="995.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="580.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (69 samples, 6.13%)</title><rect x="578.5" y="1059.0" width="72.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.5" y="1070.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (63 samples, 5.60%)</title><rect x="584.8" y="1043.0" width="66.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="587.8" y="1054.0">java/ut..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="615.2" y="1027.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="618.2" y="1038.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.09%)</title><rect x="615.2" y="1011.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="618.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.93%)</title><rect x="616.3" y="1027.0" width="34.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="619.3" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.18%)</title><rect x="637.2" y="1011.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.53%)</title><rect x="639.3" y="1011.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="642.3" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="644.6" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="647.6" y="1006.0"></text>
</g>
<g>
<title>vtable stub (5 samples, 0.44%)</title><rect x="645.6" y="1011.0" width="5.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="648.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (45 samples, 4.00%)</title><rect x="650.9" y="1123.0" width="47.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.9" y="1134.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (45 samples, 4.00%)</title><rect x="650.9" y="1107.0" width="47.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="653.9" y="1118.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="653.0" y="1091.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="656.0" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="653.0" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="656.0" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="653.0" y="1059.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="656.0" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="653.0" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="656.0" y="1054.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="653.0" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="656.0" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="653.0" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="656.0" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/334307265.process (17 samples, 1.51%)</title><rect x="654.0" y="1091.0" width="17.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (16 samples, 1.42%)</title><rect x="655.1" y="1075.0" width="16.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="658.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (14 samples, 1.24%)</title><rect x="655.1" y="1059.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="658.1" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.27%)</title><rect x="657.2" y="1043.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="660.2" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.27%)</title><rect x="657.2" y="1027.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.2" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.27%)</title><rect x="657.2" y="1011.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="660.2" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.27%)</title><rect x="657.2" y="995.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="660.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.18%)</title><rect x="658.2" y="979.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="661.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (2 samples, 0.18%)</title><rect x="660.3" y="1043.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.3" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="660.3" y="1027.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="663.3" y="1038.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="660.3" y="1011.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="663.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.62%)</title><rect x="662.4" y="1043.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="665.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="669.8" y="1059.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="672.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="670.8" y="1043.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="673.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="670.8" y="1027.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="673.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="670.8" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="673.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="671.8" y="1091.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="674.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.27%)</title><rect x="671.8" y="1075.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="674.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (6 samples, 0.53%)</title><rect x="675.0" y="1091.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="678.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (6 samples, 0.53%)</title><rect x="675.0" y="1075.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="678.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1530906720.get$Lambda (6 samples, 0.53%)</title><rect x="675.0" y="1059.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="678.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$264/1530906720.&lt;init&gt; (4 samples, 0.36%)</title><rect x="677.1" y="1043.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="680.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (10 samples, 0.89%)</title><rect x="681.3" y="1091.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="684.3" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.80%)</title><rect x="682.3" y="1075.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="685.3" y="1086.0"></text>
</g>
<g>
<title>itable stub (7 samples, 0.62%)</title><rect x="682.3" y="1059.0" width="7.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="685.3" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.18%)</title><rect x="689.7" y="1059.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="692.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.53%)</title><rect x="691.8" y="1091.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="694.8" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="694.9" y="1075.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="697.9" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="694.9" y="1059.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="697.9" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="694.9" y="1043.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="697.9" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="694.9" y="1027.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="697.9" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="694.9" y="1011.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="697.9" y="1022.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="694.9" y="995.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="697.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.18%)</title><rect x="696.0" y="1075.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="699.0" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.09%)</title><rect x="697.0" y="1059.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="700.0" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="697.0" y="1043.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="700.0" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="697.0" y="1027.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="700.0" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="697.0" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="700.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.78%)</title><rect x="698.1" y="1123.0" width="20.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="701.1" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.18%)</title><rect x="702.3" y="1107.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="705.3" y="1118.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="702.3" y="1091.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="705.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.24%)</title><rect x="704.4" y="1107.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="707.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.07%)</title><rect x="706.5" y="1091.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="709.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$265/1577699692.accept (10 samples, 0.89%)</title><rect x="706.5" y="1075.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (10 samples, 0.89%)</title><rect x="706.5" y="1059.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.5" y="1070.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (10 samples, 0.89%)</title><rect x="706.5" y="1043.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.5" y="1054.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (10 samples, 0.89%)</title><rect x="706.5" y="1027.0" width="10.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="709.5" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.53%)</title><rect x="709.6" y="1011.0" width="6.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="712.6" y="1022.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.44%)</title><rect x="710.7" y="995.0" width="5.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="713.7" y="1006.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="715.9" y="1011.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="718.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1451929171.accept (2 samples, 0.18%)</title><rect x="717.0" y="1075.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="720.0" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="717.0" y="1059.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="720.0" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.09%)</title><rect x="718.0" y="1043.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="721.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/502800944.linkToTargetMethod (1 samples, 0.09%)</title><rect x="719.0" y="1139.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="722.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1263877414.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="719.0" y="1123.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="722.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1451929171.get$Lambda (1 samples, 0.09%)</title><rect x="719.0" y="1107.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="722.0" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="719.0" y="1091.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="722.0" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="719.0" y="1075.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="722.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.16%)</title><rect x="720.1" y="1139.0" width="13.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="723.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.07%)</title><rect x="721.1" y="1123.0" width="12.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="724.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.80%)</title><rect x="724.3" y="1107.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="727.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$266/1451929171.accept (9 samples, 0.80%)</title><rect x="724.3" y="1091.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="727.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$scheduleThenProcess$22 (9 samples, 0.80%)</title><rect x="724.3" y="1075.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="727.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl$$Lambda$259/1621823235.complete (9 samples, 0.80%)</title><rect x="724.3" y="1059.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="727.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.lambda$reportFetchedOffset$36 (9 samples, 0.80%)</title><rect x="724.3" y="1043.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="727.3" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.complete (9 samples, 0.80%)</title><rect x="724.3" y="1027.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="727.3" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.80%)</title><rect x="724.3" y="1011.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="727.3" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isDebugEnabled (9 samples, 0.80%)</title><rect x="724.3" y="995.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="727.3" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (9 samples, 0.80%)</title><rect x="724.3" y="979.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="727.3" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (9 samples, 0.80%)</title><rect x="724.3" y="963.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="727.3" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.98%)</title><rect x="733.7" y="1139.0" width="11.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="736.7" y="1150.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.80%)</title><rect x="735.8" y="1123.0" width="9.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="738.8" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="745.3" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="748.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (5 samples, 0.44%)</title><rect x="746.3" y="1155.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="749.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.44%)</title><rect x="751.6" y="1203.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="754.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.44%)</title><rect x="751.6" y="1187.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="754.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.44%)</title><rect x="751.6" y="1171.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="754.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.44%)</title><rect x="751.6" y="1155.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="754.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (209 samples, 18.58%)</title><rect x="756.8" y="1203.0" width="219.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="759.8" y="1214.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (209 samples, 18.58%)</title><rect x="756.8" y="1187.0" width="219.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="759.8" y="1198.0">java/util/concurrent/LinkedBl..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (196 samples, 17.42%)</title><rect x="756.8" y="1171.0" width="205.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="759.8" y="1182.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (17 samples, 1.51%)</title><rect x="760.0" y="1155.0" width="17.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="763.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 1.24%)</title><rect x="777.8" y="1155.0" width="14.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="780.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.24%)</title><rect x="777.8" y="1139.0" width="14.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.24%)</title><rect x="777.8" y="1123.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="780.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.24%)</title><rect x="777.8" y="1107.0" width="14.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.18%)</title><rect x="792.5" y="1155.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="795.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.18%)</title><rect x="792.5" y="1139.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="795.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (159 samples, 14.13%)</title><rect x="794.6" y="1155.0" width="166.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="797.6" y="1166.0">java/util/concurrent/..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (159 samples, 14.13%)</title><rect x="794.6" y="1139.0" width="166.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="797.6" y="1150.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="803.0" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="806.0" y="1134.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="804.0" y="1123.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="807.0" y="1134.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.18%)</title><rect x="805.1" y="1123.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="808.1" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.36%)</title><rect x="807.2" y="1123.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="810.2" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Park (142 samples, 12.62%)</title><rect x="811.4" y="1123.0" width="148.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="814.4" y="1134.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.18%)</title><rect x="814.5" y="1107.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="817.5" y="1118.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 2.13%)</title><rect x="816.6" y="1107.0" width="25.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="819.6" y="1118.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.62%)</title><rect x="823.9" y="1091.0" width="7.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="826.9" y="1102.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="825.0" y="1075.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="828.0" y="1086.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="825.0" y="1059.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="828.0" y="1070.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.18%)</title><rect x="826.0" y="1075.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="829.0" y="1086.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.27%)</title><rect x="828.1" y="1075.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="831.1" y="1086.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="831.3" y="1091.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="834.3" y="1102.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="832.3" y="1091.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="835.3" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (8 samples, 0.71%)</title><rect x="833.4" y="1091.0" width="8.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.4" y="1102.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="841.8" y="1107.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="844.8" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="842.8" y="1107.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="845.8" y="1118.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.36%)</title><rect x="844.9" y="1107.0" width="4.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="847.9" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (27 samples, 2.40%)</title><rect x="849.1" y="1107.0" width="28.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="852.1" y="1118.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 4.62%)</title><rect x="877.4" y="1107.0" width="54.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="880.4" y="1118.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.44%)</title><rect x="932.0" y="1107.0" width="5.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="935.0" y="1118.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.27%)</title><rect x="937.2" y="1107.0" width="3.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="940.2" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.36%)</title><rect x="940.4" y="1107.0" width="4.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="943.4" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="944.6" y="1107.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="947.6" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.36%)</title><rect x="945.6" y="1107.0" width="4.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="948.6" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.09%)</title><rect x="949.8" y="1107.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="952.8" y="1118.0"></text>
</g>
<g>
<title>_init (2 samples, 0.18%)</title><rect x="950.9" y="1107.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="953.9" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="953.0" y="1107.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.0" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="954.0" y="1107.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="957.0" y="1118.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.18%)</title><rect x="956.1" y="1107.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="959.1" y="1118.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.18%)</title><rect x="958.2" y="1107.0" width="2.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="961.2" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.09%)</title><rect x="960.3" y="1123.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.3" y="1134.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="961.3" y="1155.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="964.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 1.16%)</title><rect x="962.4" y="1171.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="965.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.16%)</title><rect x="962.4" y="1155.0" width="13.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="965.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.16%)</title><rect x="962.4" y="1139.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="965.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.16%)</title><rect x="962.4" y="1123.0" width="13.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="965.4" y="1134.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.09%)</title><rect x="976.0" y="1251.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="979.0" y="1262.0"></text>
</g>
<g>
<title>start_thread (203 samples, 18.04%)</title><rect x="977.1" y="1251.0" width="212.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="980.1" y="1262.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (203 samples, 18.04%)</title><rect x="977.1" y="1235.0" width="212.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="980.1" y="1246.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 1.51%)</title><rect x="977.1" y="1219.0" width="17.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="980.1" y="1230.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (4 samples, 0.36%)</title><rect x="977.1" y="1203.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="980.1" y="1214.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.36%)</title><rect x="977.1" y="1187.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="980.1" y="1198.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="977.1" y="1171.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="980.1" y="1182.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.27%)</title><rect x="978.1" y="1171.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="981.1" y="1182.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 1.07%)</title><rect x="981.3" y="1203.0" width="12.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="984.3" y="1214.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.09%)</title><rect x="981.3" y="1187.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="984.3" y="1198.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="981.3" y="1171.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.3" y="1182.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.36%)</title><rect x="982.3" y="1187.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.3" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="982.3" y="1171.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="985.3" y="1182.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="982.3" y="1155.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="985.3" y="1166.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="982.3" y="1139.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="985.3" y="1150.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="982.3" y="1123.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="985.3" y="1134.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int) (1 samples, 0.09%)</title><rect x="983.4" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="986.4" y="1166.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.09%)</title><rect x="983.4" y="1139.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="986.4" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.18%)</title><rect x="984.4" y="1171.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="987.4" y="1182.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="984.4" y="1155.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.4" y="1166.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="985.5" y="1155.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="988.5" y="1166.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (1 samples, 0.09%)</title><rect x="985.5" y="1139.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.5" y="1150.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.62%)</title><rect x="986.5" y="1187.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.5" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.62%)</title><rect x="986.5" y="1171.0" width="7.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.5" y="1182.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (6 samples, 0.53%)</title><rect x="986.5" y="1155.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.5" y="1166.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (6 samples, 0.53%)</title><rect x="986.5" y="1139.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="989.5" y="1150.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.53%)</title><rect x="986.5" y="1123.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.5" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (6 samples, 0.53%)</title><rect x="986.5" y="1107.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="989.5" y="1118.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.36%)</title><rect x="988.6" y="1091.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.6" y="1102.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="990.7" y="1075.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.7" y="1086.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="991.8" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="994.8" y="1086.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.09%)</title><rect x="991.8" y="1059.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.8" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="992.8" y="1155.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="995.8" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.09%)</title><rect x="992.8" y="1139.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="995.8" y="1150.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.09%)</title><rect x="992.8" y="1123.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="995.8" y="1134.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.09%)</title><rect x="993.9" y="1203.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="996.9" y="1214.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.09%)</title><rect x="993.9" y="1187.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.9" y="1198.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.09%)</title><rect x="993.9" y="1171.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="996.9" y="1182.0"></text>
</g>
<g>
<title>JavaThread::run() (184 samples, 16.36%)</title><rect x="994.9" y="1219.0" width="193.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.9" y="1230.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (184 samples, 16.36%)</title><rect x="994.9" y="1203.0" width="193.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.9" y="1214.0">JavaThread::thread_main_i..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (184 samples, 16.36%)</title><rect x="994.9" y="1187.0" width="193.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="997.9" y="1198.0">CompileBroker::compiler_t..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (182 samples, 16.18%)</title><rect x="994.9" y="1171.0" width="190.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.9" y="1182.0">CompileBroker::invoke_com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (180 samples, 16.00%)</title><rect x="994.9" y="1155.0" width="188.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="997.9" y="1166.0">C2Compiler::compile_meth..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (180 samples, 16.00%)</title><rect x="994.9" y="1139.0" width="188.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="997.9" y="1150.0">Compile::Compile(ciEnv*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (65 samples, 5.78%)</title><rect x="994.9" y="1123.0" width="68.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="997.9" y="1134.0">Compile..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (5 samples, 0.44%)</title><rect x="994.9" y="1107.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.9" y="1118.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.18%)</title><rect x="996.0" y="1091.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.0" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="996.0" y="1075.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="999.0" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="996.0" y="1059.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.0" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="997.0" y="1075.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1000.0" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="997.0" y="1059.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1000.0" y="1070.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.18%)</title><rect x="998.1" y="1091.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1001.1" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.18%)</title><rect x="998.1" y="1075.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1001.1" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.62%)</title><rect x="1000.2" y="1107.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1003.2" y="1118.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.18%)</title><rect x="1000.2" y="1091.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1003.2" y="1102.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.09%)</title><rect x="1001.2" y="1075.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.44%)</title><rect x="1002.2" y="1091.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1005.2" y="1102.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="1002.2" y="1075.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1005.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 0.36%)</title><rect x="1003.3" y="1075.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1006.3" y="1086.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.18%)</title><rect x="1005.4" y="1059.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1008.4" y="1070.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (2 samples, 0.18%)</title><rect x="1005.4" y="1043.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1008.4" y="1054.0"></text>
</g>
<g>
<title>State::_sub_Op_If(Node const*) (1 samples, 0.09%)</title><rect x="1006.4" y="1027.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.4" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.36%)</title><rect x="1007.5" y="1107.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1010.5" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.09%)</title><rect x="1007.5" y="1091.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.5" y="1102.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.09%)</title><rect x="1007.5" y="1075.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1010.5" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.27%)</title><rect x="1008.5" y="1091.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1011.5" y="1102.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.09%)</title><rect x="1008.5" y="1075.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1011.5" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.18%)</title><rect x="1009.6" y="1075.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1012.6" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1010.6" y="1059.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.6" y="1070.0"></text>
</g>
<g>
<title>loadConPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1010.6" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.6" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (49 samples, 4.36%)</title><rect x="1011.7" y="1107.0" width="51.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1014.7" y="1118.0">Phase..</text>
</g>
<g>
<title>BoxLockNode::out_RegMask() const (1 samples, 0.09%)</title><rect x="1011.7" y="1091.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1014.7" y="1102.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1012.7" y="1091.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1015.7" y="1102.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1013.8" y="1091.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1016.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.09%)</title><rect x="1014.8" y="1091.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1017.8" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1014.8" y="1075.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1017.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 0.44%)</title><rect x="1015.9" y="1091.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1018.9" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1016.9" y="1075.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1019.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.18%)</title><rect x="1019.0" y="1075.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1022.0" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="1020.1" y="1059.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1023.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.36%)</title><rect x="1021.1" y="1091.0" width="4.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1024.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 0.89%)</title><rect x="1025.3" y="1091.0" width="10.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.3" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1030.6" y="1075.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.36%)</title><rect x="1031.6" y="1075.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1034.6" y="1086.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1033.7" y="1059.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.7" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1034.8" y="1059.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (3 samples, 0.27%)</title><rect x="1035.8" y="1091.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.8" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.18%)</title><rect x="1036.9" y="1075.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1039.9" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1037.9" y="1059.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1040.9" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.36%)</title><rect x="1039.0" y="1091.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1042.0" y="1102.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.09%)</title><rect x="1041.1" y="1075.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1044.1" y="1086.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.09%)</title><rect x="1042.1" y="1075.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.1" y="1086.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1042.1" y="1059.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.1" y="1070.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1042.1" y="1043.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1045.1" y="1054.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.09%)</title><rect x="1042.1" y="1027.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.1" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.09%)</title><rect x="1043.2" y="1091.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.2" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1044.2" y="1091.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.2" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1044.2" y="1075.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.2" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::eliminate_copy_of_constant(Node*, Node*, Block*, Node_List&amp;, Node_List&amp;, int, int) (1 samples, 0.09%)</title><rect x="1045.3" y="1075.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1048.3" y="1086.0"></text>
</g>
<g>
<title>TypeLong::make(long) (1 samples, 0.09%)</title><rect x="1045.3" y="1059.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1048.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 0.53%)</title><rect x="1046.3" y="1091.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.3" y="1102.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1046.3" y="1075.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1049.3" y="1086.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1047.4" y="1075.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.4" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 0.36%)</title><rect x="1048.4" y="1075.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.4" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (2 samples, 0.18%)</title><rect x="1048.4" y="1059.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.4" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.18%)</title><rect x="1050.5" y="1059.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.5" y="1070.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="1050.5" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.5" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.09%)</title><rect x="1051.5" y="1043.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1054.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 0.27%)</title><rect x="1052.6" y="1091.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.6" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="1053.6" y="1075.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1056.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1055.7" y="1091.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.18%)</title><rect x="1056.8" y="1091.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1059.8" y="1102.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.18%)</title><rect x="1056.8" y="1075.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1059.8" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.27%)</title><rect x="1058.9" y="1091.0" width="3.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.9" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1061.0" y="1075.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1064.0" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1062.0" y="1091.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1065.0" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (107 samples, 9.51%)</title><rect x="1063.1" y="1123.0" width="112.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.1" y="1134.0">Compile::Optim..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1063.1" y="1107.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1066.1" y="1118.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1063.1" y="1091.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.1" y="1102.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1063.1" y="1075.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.1" y="1086.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1063.1" y="1059.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1066.1" y="1070.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.18%)</title><rect x="1064.1" y="1107.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1067.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1065.2" y="1091.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1065.2" y="1075.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1068.2" y="1086.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1065.2" y="1059.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1068.2" y="1070.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1065.2" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.2" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1065.2" y="1027.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.2" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1065.2" y="1011.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.44%)</title><rect x="1066.2" y="1107.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.44%)</title><rect x="1066.2" y="1091.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1069.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1066.2" y="1075.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1069.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1066.2" y="1059.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.09%)</title><rect x="1066.2" y="1043.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (4 samples, 0.36%)</title><rect x="1067.3" y="1075.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.36%)</title><rect x="1067.3" y="1059.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1067.3" y="1043.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1067.3" y="1027.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1067.3" y="1011.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.3" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1067.3" y="995.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.3" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1067.3" y="979.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="963.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.3" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="947.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.3" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="931.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="915.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.3" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="899.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.3" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="883.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.3" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="867.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.3" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="851.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.3" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="835.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.3" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.3" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.3" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.3" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="771.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.3" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="755.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.3" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.3" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.3" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.3" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.3" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.3" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.3" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1070.3" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="627.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.3" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="611.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.3" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="595.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1070.3" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="579.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.3" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.3" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="547.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.3" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="531.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.3" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="515.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.3" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="499.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.3" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1070.3" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.3" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="451.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.3" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="435.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.3" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="419.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.3" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="403.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.3" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="387.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.3" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.3" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="355.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.3" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="339.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.3" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="323.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.3" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="307.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.3" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="291.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.3" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="275.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.3" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="259.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.3" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="243.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.3" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="227.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.3" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="211.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.3" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="195.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.3" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="179.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.3" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="163.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.3" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="147.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.3" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.3" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="115.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1070.3" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="99.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.3" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="83.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1070.3" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="67.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.3" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1067.3" y="51.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1070.3" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1067.3" y="35.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.3" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1068.3" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.3" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1068.3" y="947.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.3" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1068.3" y="931.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1068.3" y="915.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1071.3" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1068.3" y="899.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.3" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1068.3" y="883.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.3" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1068.3" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.3" y="878.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1068.3" y="851.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1071.3" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1069.4" y="1043.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1072.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1069.4" y="1027.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1072.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.4" y="1027.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1073.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.4" y="1011.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1073.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.4" y="995.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1070.4" y="979.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1070.4" y="963.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.4" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1071.5" y="1107.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.5" y="1118.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1071.5" y="1091.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1074.5" y="1102.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.18%)</title><rect x="1072.5" y="1107.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.5" y="1118.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.18%)</title><rect x="1072.5" y="1091.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (85 samples, 7.56%)</title><rect x="1074.6" y="1107.0" width="89.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.6" y="1118.0">PhaseIdeal..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1074.6" y="1091.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1075.7" y="1091.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1078.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.44%)</title><rect x="1077.8" y="1091.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1080.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.18%)</title><rect x="1080.9" y="1075.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.9" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (65 samples, 5.78%)</title><rect x="1083.0" y="1091.0" width="68.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1086.0" y="1102.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (64 samples, 5.69%)</title><rect x="1084.1" y="1075.0" width="67.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.1" y="1086.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.27%)</title><rect x="1086.2" y="1059.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (59 samples, 5.24%)</title><rect x="1089.3" y="1059.0" width="61.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.3" y="1070.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (15 samples, 1.33%)</title><rect x="1135.5" y="1043.0" width="15.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (5 samples, 0.44%)</title><rect x="1151.2" y="1091.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.27%)</title><rect x="1156.4" y="1091.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1159.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.09%)</title><rect x="1156.4" y="1075.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.18%)</title><rect x="1157.5" y="1075.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1158.5" y="1059.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.5" y="1070.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1158.5" y="1043.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1159.6" y="1091.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1160.6" y="1091.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1160.6" y="1075.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.6" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1160.6" y="1059.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.6" y="1070.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1160.6" y="1043.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="1054.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1161.7" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.7" y="1102.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1162.7" y="1091.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.71%)</title><rect x="1163.8" y="1107.0" width="8.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.8" y="1118.0"></text>
</g>
<g>
<title>MergeMemNode::hash() const (1 samples, 0.09%)</title><rect x="1163.8" y="1091.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.62%)</title><rect x="1164.8" y="1091.0" width="7.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.8" y="1102.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1164.8" y="1075.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.8" y="1086.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1164.8" y="1059.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.8" y="1070.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.27%)</title><rect x="1165.9" y="1075.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.9" y="1086.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1165.9" y="1059.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.9" y="1070.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1165.9" y="1043.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.9" y="1054.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1165.9" y="1027.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.9" y="1038.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1166.9" y="1059.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.9" y="1070.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1168.0" y="1059.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.0" y="1070.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1168.0" y="1043.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="1054.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1168.0" y="1027.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.0" y="1038.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.09%)</title><rect x="1169.0" y="1075.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.0" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1170.1" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.1" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1170.1" y="1059.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.1" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="1027.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.1" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="1011.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.1" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.1" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="979.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.1" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="963.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.1" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="947.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="931.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.1" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="915.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.1" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="899.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.1" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="894.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1170.1" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.1" y="878.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1170.1" y="851.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.1" y="862.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1171.1" y="1075.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.1" y="1086.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.09%)</title><rect x="1171.1" y="1059.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1172.2" y="1107.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.2" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1173.2" y="1107.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.2" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1173.2" y="1091.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.2" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1173.2" y="1075.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.2" y="1086.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.09%)</title><rect x="1173.2" y="1059.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.2" y="1070.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1173.2" y="1043.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1176.2" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1174.3" y="1107.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1174.3" y="1091.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1174.3" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.3" y="1086.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.3" y="1059.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.3" y="1070.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.3" y="1043.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.3" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.71%)</title><rect x="1175.3" y="1123.0" width="8.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.71%)</title><rect x="1175.3" y="1107.0" width="8.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.71%)</title><rect x="1175.3" y="1091.0" width="8.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.71%)</title><rect x="1175.3" y="1075.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.71%)</title><rect x="1175.3" y="1059.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.71%)</title><rect x="1175.3" y="1043.0" width="8.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="1054.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.3" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="1038.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.09%)</title><rect x="1175.3" y="1011.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1175.3" y="995.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1175.3" y="979.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="990.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1175.3" y="963.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.3" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.53%)</title><rect x="1176.4" y="1027.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.4" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.53%)</title><rect x="1176.4" y="1011.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.53%)</title><rect x="1176.4" y="995.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.53%)</title><rect x="1176.4" y="979.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.53%)</title><rect x="1176.4" y="963.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.53%)</title><rect x="1176.4" y="947.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1176.4" y="931.0" width="4.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.4" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1176.4" y="915.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1176.4" y="899.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1176.4" y="883.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1176.4" y="867.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.36%)</title><rect x="1176.4" y="851.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.4" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.36%)</title><rect x="1176.4" y="835.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.36%)</title><rect x="1176.4" y="819.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.36%)</title><rect x="1176.4" y="803.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.36%)</title><rect x="1176.4" y="787.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.36%)</title><rect x="1176.4" y="771.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="782.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1176.4" y="755.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="766.0"></text>
</g>
<g>
<title>BuildCutout::BuildCutout(GraphKit*, Node*, float, float) (1 samples, 0.09%)</title><rect x="1176.4" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="750.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1176.4" y="723.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.4" y="734.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1176.4" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1177.4" y="755.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1177.4" y="739.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1177.4" y="723.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1177.4" y="707.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1177.4" y="691.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1177.4" y="675.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1177.4" y="659.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1177.4" y="643.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1177.4" y="627.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1177.4" y="611.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1177.4" y="595.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1177.4" y="579.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.4" y="563.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.4" y="547.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.4" y="531.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.4" y="515.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.4" y="499.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.4" y="483.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.4" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1177.4" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1177.4" y="435.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1177.4" y="419.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1177.4" y="403.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1177.4" y="387.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1177.4" y="371.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.4" y="355.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.4" y="339.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="350.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.4" y="323.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="334.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1177.4" y="307.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="318.0"></text>
</g>
<g>
<title>ciMethod::is_initializer() const (1 samples, 0.09%)</title><rect x="1177.4" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1178.5" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="574.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.09%)</title><rect x="1178.5" y="547.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.5" y="558.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1178.5" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="542.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.09%)</title><rect x="1178.5" y="515.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.5" y="526.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1178.5" y="499.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1179.5" y="755.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.5" y="766.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1179.5" y="739.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.5" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.6" y="931.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.6" y="915.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1180.6" y="899.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1180.6" y="883.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1180.6" y="867.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1180.6" y="851.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1180.6" y="835.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.6" y="819.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1180.6" y="803.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1180.6" y="787.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1180.6" y="771.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1180.6" y="755.0" width="2.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1180.6" y="739.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1180.6" y="723.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1180.6" y="707.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1180.6" y="691.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1180.6" y="675.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1180.6" y="659.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1180.6" y="643.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.6" y="627.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.6" y="611.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.6" y="595.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.6" y="579.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.6" y="563.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.6" y="547.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.6" y="531.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.6" y="515.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.6" y="499.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.6" y="483.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.6" y="467.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.6" y="451.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.6" y="435.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="446.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.09%)</title><rect x="1180.6" y="419.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="430.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.09%)</title><rect x="1180.6" y="403.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.6" y="387.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="398.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1180.6" y="371.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="382.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1180.6" y="355.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="366.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1180.6" y="339.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="350.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1180.6" y="323.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.6" y="334.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1180.6" y="307.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.6" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.6" y="638.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1181.6" y="611.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.6" y="622.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1181.6" y="595.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.6" y="606.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1181.6" y="579.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.6" y="590.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.09%)</title><rect x="1181.6" y="563.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="574.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1181.6" y="547.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="1027.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="1011.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.7" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.7" y="979.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.7" y="963.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.7" y="947.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.7" y="931.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="915.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.7" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.7" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.7" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.7" y="851.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.7" y="835.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.7" y="803.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.7" y="787.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.7" y="771.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.7" y="755.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.7" y="739.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="723.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="707.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.7" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.7" y="675.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.7" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.7" y="643.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.7" y="627.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.7" y="611.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.7" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.7" y="595.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.7" y="606.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.09%)</title><rect x="1182.7" y="579.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.7" y="590.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.09%)</title><rect x="1182.7" y="563.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.7" y="574.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1182.7" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="558.0"></text>
</g>
<g>
<title>HaltNode::HaltNode(Node*, Node*) (1 samples, 0.09%)</title><rect x="1182.7" y="531.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="542.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1182.7" y="515.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.7" y="526.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1183.7" y="1155.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.7" y="1166.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1183.7" y="1139.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.7" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1183.7" y="1123.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.7" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1183.7" y="1107.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.7" y="1118.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.09%)</title><rect x="1183.7" y="1091.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="1102.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1183.7" y="1075.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.7" y="1086.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.09%)</title><rect x="1183.7" y="1059.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.7" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.09%)</title><rect x="1183.7" y="1043.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.7" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::state_at_entry() (1 samples, 0.09%)</title><rect x="1183.7" y="1027.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.7" y="1038.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.09%)</title><rect x="1184.8" y="1155.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.8" y="1166.0"></text>
</g>
<g>
<title>ciObjectFactory::ciObjectFactory(Arena*, int) (1 samples, 0.09%)</title><rect x="1184.8" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="1150.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.18%)</title><rect x="1185.8" y="1171.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="1182.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.18%)</title><rect x="1185.8" y="1155.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="1166.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.18%)</title><rect x="1185.8" y="1139.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.8" y="1150.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.09%)</title><rect x="1185.8" y="1123.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="1134.0"></text>
</g>
<g>
<title>CodeHeap::block_start(void*) const (1 samples, 0.09%)</title><rect x="1185.8" y="1107.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.8" y="1118.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.9" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.9" y="1134.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1186.9" y="1107.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="1118.0"></text>
</g>
<g>
<title>RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) (1 samples, 0.09%)</title><rect x="1186.9" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.9" y="1102.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="1219.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.9" y="1230.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="1203.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.9" y="1214.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1187.9" y="1187.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.9" y="1198.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1187.9" y="1171.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.9" y="1182.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1187.9" y="1155.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.9" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1187.9" y="1139.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.09%)</title><rect x="1187.9" y="1123.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="1134.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.09%)</title><rect x="1187.9" y="1107.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.9" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::tlab_capacity(Thread*) const (1 samples, 0.09%)</title><rect x="1187.9" y="1091.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.9" y="1102.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.09%)</title><rect x="1189.0" y="1187.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1192.0" y="1198.0"></text>
</g>
</g>
</svg>
