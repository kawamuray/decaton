<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1045"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1045"> </text>
<g id="frames">
<g>
<title>all (308 samples, 100.00%)</title><rect x="10.0" y="1011.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="1022.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (83 samples, 26.95%)</title><rect x="10.0" y="995.0" width="318.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (83 samples, 26.95%)</title><rect x="10.0" y="979.0" width="318.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.32%)</title><rect x="10.0" y="963.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="10.0" y="947.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="10.0" y="931.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info(JavaThread*, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.32%)</title><rect x="10.0" y="915.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.32%)</title><rect x="10.0" y="899.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.32%)</title><rect x="10.0" y="883.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.32%)</title><rect x="10.0" y="867.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="10.0" y="851.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.32%)</title><rect x="13.8" y="963.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.32%)</title><rect x="13.8" y="947.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.8" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.32%)</title><rect x="13.8" y="931.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.8" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.32%)</title><rect x="13.8" y="915.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.8" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.32%)</title><rect x="13.8" y="899.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.32%)</title><rect x="13.8" y="883.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.32%)</title><rect x="13.8" y="867.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.32%)</title><rect x="13.8" y="851.0" width="3.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.32%)</title><rect x="13.8" y="835.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.32%)</title><rect x="13.8" y="819.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$266/659058823.test (1 samples, 0.32%)</title><rect x="13.8" y="803.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (72 samples, 23.38%)</title><rect x="17.7" y="963.0" width="275.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.7" y="974.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$263/155185504.accept (70 samples, 22.73%)</title><rect x="17.7" y="947.0" width="268.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.7" y="958.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$0 (70 samples, 22.73%)</title><rect x="17.7" y="931.0" width="268.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.7" y="942.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (69 samples, 22.40%)</title><rect x="17.7" y="915.0" width="264.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="926.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (69 samples, 22.40%)</title><rect x="17.7" y="899.0" width="264.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.7" y="910.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (69 samples, 22.40%)</title><rect x="17.7" y="883.0" width="264.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="894.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (69 samples, 22.40%)</title><rect x="17.7" y="867.0" width="264.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.7" y="878.0">java/util/concurrent/Executors$Dele..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (69 samples, 22.40%)</title><rect x="17.7" y="851.0" width="264.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.7" y="862.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (69 samples, 22.40%)</title><rect x="17.7" y="835.0" width="264.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.7" y="846.0">java/util/concurrent/LinkedBlocking..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (64 samples, 20.78%)</title><rect x="17.7" y="819.0" width="245.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.7" y="830.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.65%)</title><rect x="17.7" y="803.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.65%)</title><rect x="17.7" y="787.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.32%)</title><rect x="21.5" y="771.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.32%)</title><rect x="21.5" y="755.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="24.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (62 samples, 20.13%)</title><rect x="25.3" y="803.0" width="237.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.3" y="814.0">java/util/concurrent/locks/Reen..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (62 samples, 20.13%)</title><rect x="25.3" y="787.0" width="237.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.3" y="798.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (61 samples, 19.81%)</title><rect x="25.3" y="771.0" width="233.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.3" y="782.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (61 samples, 19.81%)</title><rect x="25.3" y="755.0" width="233.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.3" y="766.0">java/util/concurrent/locks/Lock..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (61 samples, 19.81%)</title><rect x="25.3" y="739.0" width="233.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.3" y="750.0">sun/misc/Unsafe.unpark</text>
</g>
<g>
<title>Unsafe_Unpark (58 samples, 18.83%)</title><rect x="36.8" y="723.0" width="222.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="39.8" y="734.0">Unsafe_Unpark</text>
</g>
<g>
<title>Parker::unpark() (42 samples, 13.64%)</title><rect x="36.8" y="707.0" width="160.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="39.8" y="718.0">Parker::unpark()</text>
</g>
<g>
<title>__psynch_cvsignal (41 samples, 13.31%)</title><rect x="36.8" y="691.0" width="157.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="39.8" y="702.0">__psynch_cvsignal</text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.32%)</title><rect x="193.9" y="691.0" width="3.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="196.9" y="702.0"></text>
</g>
<g>
<title>_pthread_mutex_firstfit_unlock_slow (15 samples, 4.87%)</title><rect x="197.7" y="707.0" width="57.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="200.7" y="718.0">_pthre..</text>
</g>
<g>
<title>__psynch_mutexdrop (14 samples, 4.55%)</title><rect x="197.7" y="691.0" width="53.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="200.7" y="702.0">__psy..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_wake (1 samples, 0.32%)</title><rect x="251.4" y="691.0" width="3.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="254.4" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.32%)</title><rect x="255.2" y="707.0" width="3.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="258.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.32%)</title><rect x="259.0" y="771.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.32%)</title><rect x="262.9" y="819.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.32%)</title><rect x="262.9" y="803.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.32%)</title><rect x="262.9" y="787.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="265.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.32%)</title><rect x="266.7" y="819.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (1 samples, 0.32%)</title><rect x="266.7" y="803.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.32%)</title><rect x="266.7" y="787.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.97%)</title><rect x="270.5" y="819.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.97%)</title><rect x="270.5" y="803.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.97%)</title><rect x="270.5" y="787.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (1 samples, 0.32%)</title><rect x="282.0" y="915.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.32%)</title><rect x="282.0" y="899.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.0" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.32%)</title><rect x="282.0" y="883.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.0" y="894.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.32%)</title><rect x="282.0" y="867.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.0" y="878.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.32%)</title><rect x="282.0" y="851.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.32%)</title><rect x="285.8" y="947.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.32%)</title><rect x="285.8" y="931.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.32%)</title><rect x="285.8" y="915.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.32%)</title><rect x="285.8" y="899.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.32%)</title><rect x="289.7" y="947.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="292.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.32%)</title><rect x="289.7" y="931.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.92%)</title><rect x="293.5" y="963.0" width="34.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.5" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 2.92%)</title><rect x="293.5" y="947.0" width="34.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.5" y="958.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 1.95%)</title><rect x="293.5" y="931.0" width="23.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="296.5" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="293.5" y="915.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="296.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="293.5" y="899.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="293.5" y="883.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.32%)</title><rect x="293.5" y="867.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.32%)</title><rect x="293.5" y="851.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.32%)</title><rect x="293.5" y="835.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.32%)</title><rect x="293.5" y="819.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.32%)</title><rect x="293.5" y="803.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.32%)</title><rect x="293.5" y="787.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.32%)</title><rect x="293.5" y="771.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.5" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.32%)</title><rect x="293.5" y="755.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.5" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.32%)</title><rect x="293.5" y="739.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.5" y="750.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.32%)</title><rect x="293.5" y="723.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="296.5" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.32%)</title><rect x="293.5" y="707.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="296.5" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(KlassHandle, int, int, Thread*) (1 samples, 0.32%)</title><rect x="293.5" y="691.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="296.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.62%)</title><rect x="297.3" y="915.0" width="19.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.62%)</title><rect x="297.3" y="899.0" width="19.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="300.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.65%)</title><rect x="297.3" y="883.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.65%)</title><rect x="297.3" y="867.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.65%)</title><rect x="297.3" y="851.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.32%)</title><rect x="301.2" y="835.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.32%)</title><rect x="301.2" y="819.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.2" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.32%)</title><rect x="301.2" y="803.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="304.2" y="814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="301.2" y="787.0" width="3.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="304.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.32%)</title><rect x="305.0" y="883.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.32%)</title><rect x="305.0" y="867.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="305.0" y="851.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="308.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="305.0" y="835.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="308.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="305.0" y="819.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.32%)</title><rect x="305.0" y="803.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.0" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.32%)</title><rect x="305.0" y="787.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="798.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.32%)</title><rect x="305.0" y="771.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.32%)</title><rect x="308.8" y="883.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.32%)</title><rect x="308.8" y="867.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="308.8" y="851.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="311.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="308.8" y="835.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="308.8" y="819.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.32%)</title><rect x="308.8" y="803.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="311.8" y="814.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.32%)</title><rect x="308.8" y="787.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="311.8" y="798.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.32%)</title><rect x="308.8" y="771.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="311.8" y="782.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.32%)</title><rect x="308.8" y="755.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="311.8" y="766.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.32%)</title><rect x="308.8" y="739.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="311.8" y="750.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.32%)</title><rect x="308.8" y="723.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="311.8" y="734.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.32%)</title><rect x="308.8" y="707.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="311.8" y="718.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.32%)</title><rect x="308.8" y="691.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="311.8" y="702.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.32%)</title><rect x="308.8" y="675.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="311.8" y="686.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.32%)</title><rect x="308.8" y="659.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="311.8" y="670.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.32%)</title><rect x="308.8" y="643.0" width="3.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="311.8" y="654.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.32%)</title><rect x="308.8" y="627.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="311.8" y="638.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.32%)</title><rect x="308.8" y="611.0" width="3.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="311.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.32%)</title><rect x="312.7" y="883.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="315.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.32%)</title><rect x="312.7" y="867.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="315.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.32%)</title><rect x="312.7" y="851.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.7" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.32%)</title><rect x="312.7" y="835.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="315.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="312.7" y="819.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="315.7" y="830.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.32%)</title><rect x="312.7" y="803.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="315.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.65%)</title><rect x="316.5" y="931.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.65%)</title><rect x="316.5" y="915.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.32%)</title><rect x="316.5" y="899.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.32%)</title><rect x="316.5" y="883.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="319.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.32%)</title><rect x="316.5" y="867.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.5" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.32%)</title><rect x="316.5" y="851.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.5" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.32%)</title><rect x="316.5" y="835.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.32%)</title><rect x="320.3" y="899.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="323.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.32%)</title><rect x="320.3" y="883.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.3" y="894.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.32%)</title><rect x="320.3" y="867.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="323.3" y="878.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.32%)</title><rect x="320.3" y="851.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.32%)</title><rect x="320.3" y="835.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="323.3" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.32%)</title><rect x="320.3" y="819.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="323.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.32%)</title><rect x="324.2" y="931.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="324.2" y="915.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.32%)</title><rect x="324.2" y="899.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.32%)</title><rect x="324.2" y="883.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="327.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.32%)</title><rect x="324.2" y="867.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="327.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.32%)</title><rect x="324.2" y="851.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.32%)</title><rect x="324.2" y="835.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.32%)</title><rect x="324.2" y="819.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.32%)</title><rect x="324.2" y="803.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="327.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.32%)</title><rect x="324.2" y="787.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="327.2" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.32%)</title><rect x="324.2" y="771.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="327.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.32%)</title><rect x="324.2" y="755.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.32%)</title><rect x="324.2" y="739.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.32%)</title><rect x="324.2" y="723.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.2" y="734.0"></text>
</g>
<g>
<title>read (1 samples, 0.32%)</title><rect x="324.2" y="707.0" width="3.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="327.2" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (93 samples, 30.19%)</title><rect x="328.0" y="995.0" width="356.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.0" y="1006.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (93 samples, 30.19%)</title><rect x="328.0" y="979.0" width="356.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.0" y="990.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (93 samples, 30.19%)</title><rect x="328.0" y="963.0" width="356.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.0" y="974.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$277/405225669.run (14 samples, 4.55%)</title><rect x="335.6" y="947.0" width="53.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="338.6" y="958.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (14 samples, 4.55%)</title><rect x="335.6" y="931.0" width="53.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.6" y="942.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (14 samples, 4.55%)</title><rect x="335.6" y="915.0" width="53.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="338.6" y="926.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (14 samples, 4.55%)</title><rect x="335.6" y="899.0" width="53.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="338.6" y="910.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (5 samples, 1.62%)</title><rect x="335.6" y="883.0" width="19.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="338.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (4 samples, 1.30%)</title><rect x="339.5" y="867.0" width="15.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (4 samples, 1.30%)</title><rect x="339.5" y="851.0" width="15.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (4 samples, 1.30%)</title><rect x="339.5" y="835.0" width="15.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="342.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (4 samples, 1.30%)</title><rect x="339.5" y="819.0" width="15.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="342.5" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (4 samples, 1.30%)</title><rect x="339.5" y="803.0" width="15.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.5" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.32%)</title><rect x="339.5" y="787.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="342.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.32%)</title><rect x="339.5" y="771.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 0.97%)</title><rect x="343.3" y="787.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="346.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 0.97%)</title><rect x="343.3" y="771.0" width="11.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="346.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="343.3" y="755.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="346.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.32%)</title><rect x="343.3" y="739.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="346.3" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 0.65%)</title><rect x="347.1" y="755.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 0.65%)</title><rect x="347.1" y="739.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.65%)</title><rect x="347.1" y="723.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="350.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="347.1" y="707.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.32%)</title><rect x="351.0" y="707.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="351.0" y="691.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="354.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="351.0" y="675.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="354.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (9 samples, 2.92%)</title><rect x="354.8" y="883.0" width="34.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.8" y="894.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (3 samples, 0.97%)</title><rect x="354.8" y="867.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="357.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (3 samples, 0.97%)</title><rect x="354.8" y="851.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (1 samples, 0.32%)</title><rect x="354.8" y="835.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.8" y="846.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.32%)</title><rect x="354.8" y="819.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="357.8" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.32%)</title><rect x="354.8" y="803.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="357.8" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="354.8" y="787.0" width="3.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="357.8" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.32%)</title><rect x="358.6" y="835.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.6" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.32%)</title><rect x="358.6" y="819.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="361.6" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.32%)</title><rect x="358.6" y="803.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="361.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.32%)</title><rect x="358.6" y="787.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.6" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.32%)</title><rect x="358.6" y="771.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="361.6" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.32%)</title><rect x="362.5" y="835.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="365.5" y="846.0"></text>
</g>
<g>
<title>_res (1 samples, 0.32%)</title><rect x="362.5" y="819.0" width="3.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="365.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (4 samples, 1.30%)</title><rect x="366.3" y="867.0" width="15.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="369.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (4 samples, 1.30%)</title><rect x="366.3" y="851.0" width="15.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="369.3" y="862.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.32%)</title><rect x="370.1" y="835.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="373.1" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_virtual_call_C(JavaThread*) (1 samples, 0.32%)</title><rect x="374.0" y="835.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="377.0" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="374.0" y="819.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="377.0" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="374.0" y="803.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="377.0" y="814.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.32%)</title><rect x="374.0" y="787.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="377.0" y="798.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.32%)</title><rect x="374.0" y="771.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="377.0" y="782.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.32%)</title><rect x="374.0" y="755.0" width="3.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="377.0" y="766.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.32%)</title><rect x="374.0" y="739.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="377.0" y="750.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.32%)</title><rect x="374.0" y="723.0" width="3.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="377.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.32%)</title><rect x="377.8" y="835.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="380.8" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.32%)</title><rect x="377.8" y="819.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="380.8" y="830.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.32%)</title><rect x="377.8" y="803.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="380.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.65%)</title><rect x="381.6" y="867.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.65%)</title><rect x="381.6" y="851.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="384.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.65%)</title><rect x="381.6" y="835.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$288/1565919550.accept (2 samples, 0.65%)</title><rect x="381.6" y="819.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$1 (2 samples, 0.65%)</title><rect x="381.6" y="803.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.6" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (2 samples, 0.65%)</title><rect x="381.6" y="787.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="384.6" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (2 samples, 0.65%)</title><rect x="381.6" y="771.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.6" y="782.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.32%)</title><rect x="385.5" y="755.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="388.5" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.32%)</title><rect x="389.3" y="947.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="392.3" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.32%)</title><rect x="389.3" y="931.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="392.3" y="942.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.32%)</title><rect x="389.3" y="915.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="392.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.32%)</title><rect x="393.1" y="947.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="396.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.32%)</title><rect x="393.1" y="931.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="396.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.32%)</title><rect x="393.1" y="915.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.32%)</title><rect x="393.1" y="899.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.32%)</title><rect x="393.1" y="883.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="396.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (75 samples, 24.35%)</title><rect x="396.9" y="947.0" width="287.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="399.9" y="958.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (75 samples, 24.35%)</title><rect x="396.9" y="931.0" width="287.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.9" y="942.0">java/util/concurrent/LinkedBlockingQueu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (75 samples, 24.35%)</title><rect x="396.9" y="915.0" width="287.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.9" y="926.0">java/util/concurrent/locks/AbstractQueu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.65%)</title><rect x="396.9" y="899.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="399.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.65%)</title><rect x="396.9" y="883.0" width="7.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.65%)</title><rect x="396.9" y="867.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="399.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.65%)</title><rect x="396.9" y="851.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="399.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (73 samples, 23.70%)</title><rect x="404.6" y="899.0" width="279.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="407.6" y="910.0">java/util/concurrent/locks/LockSuppor..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (73 samples, 23.70%)</title><rect x="404.6" y="883.0" width="279.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="407.6" y="894.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.32%)</title><rect x="419.9" y="867.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="422.9" y="878.0"></text>
</g>
<g>
<title>JavaThreadStatusChanger::~JavaThreadStatusChanger() (1 samples, 0.32%)</title><rect x="423.8" y="867.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="426.8" y="878.0"></text>
</g>
<g>
<title>Unsafe_Park (67 samples, 21.75%)</title><rect x="427.6" y="867.0" width="256.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="430.6" y="878.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThreadStatusChanger::~JavaThreadStatusChanger() (2 samples, 0.65%)</title><rect x="427.6" y="851.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="430.6" y="862.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (64 samples, 20.78%)</title><rect x="435.3" y="851.0" width="245.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="438.3" y="862.0">Parker::park(bool, long)</text>
</g>
<g>
<title>__psynch_cvwait (53 samples, 17.21%)</title><rect x="435.3" y="835.0" width="203.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="438.3" y="846.0">__psynch_cvwait</text>
</g>
<g>
<title>_pthread_cond_wait (11 samples, 3.57%)</title><rect x="638.3" y="835.0" width="42.2" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="641.3" y="846.0">_pth..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_slow (10 samples, 3.25%)</title><rect x="642.1" y="819.0" width="38.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="645.1" y="830.0">_pt..</text>
</g>
<g>
<title>__psynch_mutexwait (9 samples, 2.92%)</title><rect x="642.1" y="803.0" width="34.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="645.1" y="814.0">__..</text>
</g>
<g>
<title>_pthread_mutex_firstfit_lock_wait (1 samples, 0.32%)</title><rect x="676.6" y="803.0" width="3.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="679.6" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.32%)</title><rect x="680.5" y="851.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="683.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (5 samples, 1.62%)</title><rect x="684.3" y="995.0" width="19.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="687.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/Object.wait (3 samples, 0.97%)</title><rect x="684.3" y="979.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="687.3" y="990.0"></text>
</g>
<g>
<title>JVM_MonitorWait (3 samples, 0.97%)</title><rect x="684.3" y="963.0" width="11.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="687.3" y="974.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (3 samples, 0.97%)</title><rect x="684.3" y="947.0" width="11.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="687.3" y="958.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (3 samples, 0.97%)</title><rect x="684.3" y="931.0" width="11.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="687.3" y="942.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 0.97%)</title><rect x="684.3" y="915.0" width="11.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="687.3" y="926.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 0.97%)</title><rect x="684.3" y="899.0" width="11.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="687.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.65%)</title><rect x="695.8" y="979.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="698.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.65%)</title><rect x="695.8" y="963.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="698.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="695.8" y="947.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="698.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.32%)</title><rect x="695.8" y="931.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="698.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.32%)</title><rect x="695.8" y="915.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="698.8" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.32%)</title><rect x="695.8" y="899.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.32%)</title><rect x="699.6" y="947.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="702.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.32%)</title><rect x="699.6" y="931.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="702.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.32%)</title><rect x="699.6" y="915.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="702.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.32%)</title><rect x="699.6" y="899.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="702.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.32%)</title><rect x="699.6" y="883.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="702.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.32%)</title><rect x="699.6" y="867.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="702.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.32%)</title><rect x="699.6" y="851.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="702.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.32%)</title><rect x="699.6" y="835.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="702.6" y="846.0"></text>
</g>
<g>
<title>thread_start (127 samples, 41.23%)</title><rect x="703.4" y="995.0" width="486.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="706.4" y="1006.0">thread_start</text>
</g>
<g>
<title>_pthread_start (127 samples, 41.23%)</title><rect x="703.4" y="979.0" width="486.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="706.4" y="990.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (127 samples, 41.23%)</title><rect x="703.4" y="963.0" width="486.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="706.4" y="974.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (127 samples, 41.23%)</title><rect x="703.4" y="947.0" width="486.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="706.4" y="958.0">java_start(Thread*)</text>
</g>
<g>
<title>ConcurrentG1RefineThread::run() (1 samples, 0.32%)</title><rect x="703.4" y="931.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="706.4" y="942.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::run_young_rs_sampling() (1 samples, 0.32%)</title><rect x="703.4" y="915.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="706.4" y="926.0"></text>
</g>
<g>
<title>ConcurrentG1RefineThread::sample_young_list_rs_lengths() (1 samples, 0.32%)</title><rect x="703.4" y="899.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="706.4" y="910.0"></text>
</g>
<g>
<title>YoungList::rs_length_sampling_next() (1 samples, 0.32%)</title><rect x="703.4" y="883.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="706.4" y="894.0"></text>
</g>
<g>
<title>HeapRegionRemSet::occupied() (1 samples, 0.32%)</title><rect x="703.4" y="867.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="706.4" y="878.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.32%)</title><rect x="703.4" y="851.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="706.4" y="862.0"></text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.65%)</title><rect x="707.3" y="931.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="710.3" y="942.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.32%)</title><rect x="707.3" y="915.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="710.3" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.32%)</title><rect x="707.3" y="899.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="710.3" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.32%)</title><rect x="707.3" y="883.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="710.3" y="894.0"></text>
</g>
<g>
<title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*, HeapRegion*) (1 samples, 0.32%)</title><rect x="707.3" y="867.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="710.3" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.32%)</title><rect x="707.3" y="851.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="710.3" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.32%)</title><rect x="711.1" y="915.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="714.1" y="926.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.32%)</title><rect x="711.1" y="899.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="714.1" y="910.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.32%)</title><rect x="711.1" y="883.0" width="3.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="714.1" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.32%)</title><rect x="711.1" y="867.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="714.1" y="878.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.32%)</title><rect x="711.1" y="851.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="714.1" y="862.0"></text>
</g>
<g>
<title>JavaThread::run() (119 samples, 38.64%)</title><rect x="714.9" y="931.0" width="455.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="717.9" y="942.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (119 samples, 38.64%)</title><rect x="714.9" y="915.0" width="455.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="717.9" y="926.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (112 samples, 36.36%)</title><rect x="714.9" y="899.0" width="429.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="717.9" y="910.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (109 samples, 35.39%)</title><rect x="714.9" y="883.0" width="417.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="717.9" y="894.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (99 samples, 32.14%)</title><rect x="714.9" y="867.0" width="379.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="717.9" y="878.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (99 samples, 32.14%)</title><rect x="714.9" y="851.0" width="379.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="717.9" y="862.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int..</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 15.91%)</title><rect x="714.9" y="835.0" width="187.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="717.9" y="846.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.65%)</title><rect x="714.9" y="819.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="717.9" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.32%)</title><rect x="714.9" y="803.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="717.9" y="814.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.32%)</title><rect x="714.9" y="787.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="717.9" y="798.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.32%)</title><rect x="714.9" y="771.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="717.9" y="782.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.32%)</title><rect x="718.8" y="803.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="721.8" y="814.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.32%)</title><rect x="718.8" y="787.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="721.8" y="798.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.32%)</title><rect x="722.6" y="819.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="725.6" y="830.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.32%)</title><rect x="722.6" y="803.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="725.6" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.32%)</title><rect x="722.6" y="787.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="725.6" y="798.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int(int) (1 samples, 0.32%)</title><rect x="722.6" y="771.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="725.6" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.97%)</title><rect x="726.4" y="819.0" width="11.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="729.4" y="830.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.32%)</title><rect x="726.4" y="803.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="729.4" y="814.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.32%)</title><rect x="726.4" y="787.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="729.4" y="798.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.32%)</title><rect x="726.4" y="771.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="729.4" y="782.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.32%)</title><rect x="726.4" y="755.0" width="3.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="729.4" y="766.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.65%)</title><rect x="730.3" y="803.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="733.3" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.65%)</title><rect x="730.3" y="787.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="733.3" y="798.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.32%)</title><rect x="730.3" y="771.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="733.3" y="782.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.32%)</title><rect x="730.3" y="755.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="733.3" y="766.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.32%)</title><rect x="730.3" y="739.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="733.3" y="750.0"></text>
</g>
<g>
<title>salI_rReg_immNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.32%)</title><rect x="730.3" y="723.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="733.3" y="734.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.32%)</title><rect x="730.3" y="707.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="733.3" y="718.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.32%)</title><rect x="730.3" y="691.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="733.3" y="702.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.32%)</title><rect x="730.3" y="675.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="733.3" y="686.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.32%)</title><rect x="730.3" y="659.0" width="3.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="733.3" y="670.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.32%)</title><rect x="734.1" y="771.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="737.1" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.32%)</title><rect x="737.9" y="819.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="740.9" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.32%)</title><rect x="737.9" y="803.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.9" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.62%)</title><rect x="741.8" y="819.0" width="19.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="744.8" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.32%)</title><rect x="741.8" y="803.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="744.8" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.32%)</title><rect x="741.8" y="787.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="744.8" y="798.0"></text>
</g>
<g>
<title>Block_Stack::push(unsigned int, Block*) (1 samples, 0.32%)</title><rect x="741.8" y="771.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.8" y="782.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.32%)</title><rect x="741.8" y="755.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="744.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 1.30%)</title><rect x="745.6" y="803.0" width="15.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="748.6" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.65%)</title><rect x="745.6" y="787.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="748.6" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.65%)</title><rect x="745.6" y="771.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="748.6" y="782.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.32%)</title><rect x="749.4" y="755.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="752.4" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.32%)</title><rect x="753.2" y="787.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="756.2" y="798.0"></text>
</g>
<g>
<title>jmpDirNode::pinned() const (1 samples, 0.32%)</title><rect x="757.1" y="787.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="760.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (37 samples, 12.01%)</title><rect x="760.9" y="819.0" width="141.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="763.9" y="830.0">PhaseChaitin::Regi..</text>
</g>
<g>
<title>MachSpillCopyNode::oper_input_base() const (1 samples, 0.32%)</title><rect x="760.9" y="803.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="763.9" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.65%)</title><rect x="764.7" y="803.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="767.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.65%)</title><rect x="772.4" y="803.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="775.4" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.32%)</title><rect x="776.2" y="787.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="779.2" y="798.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.32%)</title><rect x="776.2" y="771.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="779.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.32%)</title><rect x="780.1" y="803.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="783.1" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.30%)</title><rect x="783.9" y="803.0" width="15.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="786.9" y="814.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.32%)</title><rect x="791.6" y="787.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="794.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.32%)</title><rect x="795.4" y="787.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="798.4" y="798.0"></text>
</g>
<g>
<title>MachProjNode::ideal_reg() const (1 samples, 0.32%)</title><rect x="795.4" y="771.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="798.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 2.27%)</title><rect x="799.2" y="803.0" width="26.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="802.2" y="814.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.65%)</title><rect x="810.7" y="787.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="813.7" y="798.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (2 samples, 0.65%)</title><rect x="810.7" y="771.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="813.7" y="782.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.65%)</title><rect x="818.4" y="787.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="821.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.65%)</title><rect x="826.0" y="803.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="829.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.65%)</title><rect x="826.0" y="787.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="829.0" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.32%)</title><rect x="826.0" y="771.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="829.0" y="782.0"></text>
</g>
<g>
<title>RegMask::overlap(RegMask const&amp;) const (1 samples, 0.32%)</title><rect x="829.9" y="771.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="832.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 1.95%)</title><rect x="833.7" y="803.0" width="23.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="836.7" y="814.0">P..</text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (2 samples, 0.65%)</title><rect x="849.0" y="787.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="852.0" y="798.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (2 samples, 0.65%)</title><rect x="849.0" y="771.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="852.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.97%)</title><rect x="856.7" y="803.0" width="11.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="859.7" y="814.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.32%)</title><rect x="864.4" y="787.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.4" y="798.0"></text>
</g>
<g>
<title>_platform_bzero$VARIANT$Haswell (1 samples, 0.32%)</title><rect x="864.4" y="771.0" width="3.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="867.4" y="782.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.32%)</title><rect x="868.2" y="803.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="871.2" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.32%)</title><rect x="868.2" y="787.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="871.2" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (5 samples, 1.62%)</title><rect x="872.0" y="803.0" width="19.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="875.0" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (5 samples, 1.62%)</title><rect x="872.0" y="787.0" width="19.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.0" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="879.7" y="771.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="882.7" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (2 samples, 0.65%)</title><rect x="883.5" y="771.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.5" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.32%)</title><rect x="891.2" y="803.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="894.2" y="814.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.32%)</title><rect x="891.2" y="787.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="894.2" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.65%)</title><rect x="895.0" y="803.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="898.0" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.32%)</title><rect x="898.8" y="787.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="901.8" y="798.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.32%)</title><rect x="898.8" y="771.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="901.8" y="782.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.32%)</title><rect x="898.8" y="755.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="901.8" y="766.0"></text>
</g>
<g>
<title>IndexSet::alloc_block() (1 samples, 0.32%)</title><rect x="898.8" y="739.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="901.8" y="750.0"></text>
</g>
<g>
<title>IndexSet::populate_free_list() (1 samples, 0.32%)</title><rect x="898.8" y="723.0" width="3.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="901.8" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 12.99%)</title><rect x="902.7" y="835.0" width="153.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.7" y="846.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.65%)</title><rect x="902.7" y="819.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="905.7" y="830.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.65%)</title><rect x="902.7" y="803.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="905.7" y="814.0"></text>
</g>
<g>
<title>VectorSet::test_set(unsigned int) (1 samples, 0.32%)</title><rect x="906.5" y="787.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.5" y="798.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.32%)</title><rect x="910.3" y="819.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="913.3" y="830.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.32%)</title><rect x="910.3" y="803.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="913.3" y="814.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.32%)</title><rect x="914.2" y="819.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="917.2" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.32%)</title><rect x="914.2" y="803.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="917.2" y="814.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.32%)</title><rect x="914.2" y="787.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.2" y="798.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.32%)</title><rect x="914.2" y="771.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="917.2" y="782.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.32%)</title><rect x="914.2" y="755.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="917.2" y="766.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.32%)</title><rect x="914.2" y="739.0" width="3.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="917.2" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (31 samples, 10.06%)</title><rect x="918.0" y="819.0" width="118.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="921.0" y="830.0">PhaseIdealLoop..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (5 samples, 1.62%)</title><rect x="918.0" y="803.0" width="19.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="921.0" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (4 samples, 1.30%)</title><rect x="918.0" y="787.0" width="15.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="921.0" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (3 samples, 0.97%)</title><rect x="918.0" y="771.0" width="11.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.0" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.32%)</title><rect x="918.0" y="755.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="921.0" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.32%)</title><rect x="918.0" y="739.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="921.0" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.32%)</title><rect x="918.0" y="723.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="921.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.32%)</title><rect x="918.0" y="707.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.0" y="718.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.32%)</title><rect x="918.0" y="691.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="921.0" y="702.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.32%)</title><rect x="918.0" y="675.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="921.0" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.65%)</title><rect x="921.8" y="755.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="924.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (2 samples, 0.65%)</title><rect x="921.8" y="739.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="924.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.32%)</title><rect x="921.8" y="723.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="924.8" y="734.0"></text>
</g>
<g>
<title>Node::add_out(Node*) (1 samples, 0.32%)</title><rect x="921.8" y="707.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="924.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.32%)</title><rect x="925.6" y="723.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="928.6" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.32%)</title><rect x="929.5" y="771.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.32%)</title><rect x="929.5" y="755.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="932.5" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.32%)</title><rect x="929.5" y="739.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="932.5" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.32%)</title><rect x="933.3" y="787.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="936.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.32%)</title><rect x="933.3" y="771.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="936.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.32%)</title><rect x="933.3" y="755.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="936.3" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.32%)</title><rect x="933.3" y="739.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="936.3" y="750.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.32%)</title><rect x="937.1" y="803.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="940.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.97%)</title><rect x="941.0" y="803.0" width="11.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="944.0" y="814.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.32%)</title><rect x="944.8" y="787.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="947.8" y="798.0"></text>
</g>
<g>
<title>NTarjan::setdepth(unsigned int, unsigned int*) (1 samples, 0.32%)</title><rect x="948.6" y="787.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="951.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 1.62%)</title><rect x="952.5" y="803.0" width="19.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="955.5" y="814.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.32%)</title><rect x="956.3" y="787.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="959.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_node(Node*) const (3 samples, 0.97%)</title><rect x="960.1" y="787.0" width="11.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="963.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 2.27%)</title><rect x="971.6" y="803.0" width="26.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="974.6" y="814.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 1.30%)</title><rect x="983.1" y="787.0" width="15.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="986.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.65%)</title><rect x="986.9" y="771.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="989.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.32%)</title><rect x="990.8" y="755.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="993.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.32%)</title><rect x="990.8" y="739.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="993.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.32%)</title><rect x="990.8" y="723.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="993.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1 samples, 0.32%)</title><rect x="990.8" y="707.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="993.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(Node*) const (1 samples, 0.32%)</title><rect x="994.6" y="771.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="997.6" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.32%)</title><rect x="998.4" y="803.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.4" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.32%)</title><rect x="1002.3" y="803.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.32%)</title><rect x="1002.3" y="787.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.32%)</title><rect x="1002.3" y="771.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1005.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate_insertion_point(Node*, Deoptimization::DeoptReason) (1 samples, 0.32%)</title><rect x="1002.3" y="755.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.3" y="766.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.32%)</title><rect x="1002.3" y="739.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1005.3" y="750.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason) (1 samples, 0.32%)</title><rect x="1002.3" y="723.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.3" y="734.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.32%)</title><rect x="1002.3" y="707.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1005.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 1.62%)</title><rect x="1006.1" y="803.0" width="19.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.1" y="814.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.32%)</title><rect x="1009.9" y="787.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1012.9" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.97%)</title><rect x="1013.8" y="787.0" width="11.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1016.8" y="798.0"></text>
</g>
<g>
<title>ConLNode::Opcode() const (1 samples, 0.32%)</title><rect x="1013.8" y="771.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1016.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.65%)</title><rect x="1017.6" y="771.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1020.6" y="782.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.32%)</title><rect x="1017.6" y="755.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1020.6" y="766.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.32%)</title><rect x="1017.6" y="739.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1020.6" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.32%)</title><rect x="1021.4" y="755.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1024.4" y="766.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.32%)</title><rect x="1021.4" y="739.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1024.4" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.97%)</title><rect x="1025.3" y="803.0" width="11.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1028.3" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.97%)</title><rect x="1025.3" y="787.0" width="11.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.3" y="798.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1025.3" y="771.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1028.3" y="782.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.32%)</title><rect x="1025.3" y="755.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1028.3" y="766.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1029.1" y="771.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1032.1" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1032.9" y="771.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.32%)</title><rect x="1032.9" y="755.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1035.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1032.9" y="739.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1035.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1032.9" y="723.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1032.9" y="707.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1035.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1032.9" y="691.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1035.9" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1032.9" y="675.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.9" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1032.9" y="659.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1035.9" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1032.9" y="643.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1035.9" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1032.9" y="627.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.9" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1032.9" y="611.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1035.9" y="622.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.32%)</title><rect x="1032.9" y="595.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1035.9" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.32%)</title><rect x="1032.9" y="579.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.9" y="590.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.32%)</title><rect x="1032.9" y="563.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1035.9" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 1.62%)</title><rect x="1036.8" y="819.0" width="19.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1039.8" y="830.0"></text>
</g>
<g>
<title>LoadBNode::Value(PhaseTransform*) const (1 samples, 0.32%)</title><rect x="1036.8" y="803.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1039.8" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.30%)</title><rect x="1040.6" y="803.0" width="15.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1043.6" y="814.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1040.6" y="787.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.6" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.32%)</title><rect x="1044.4" y="787.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1047.4" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.32%)</title><rect x="1048.2" y="787.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.2" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.32%)</title><rect x="1048.2" y="771.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1051.2" y="782.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1052.1" y="787.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.1" y="798.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.32%)</title><rect x="1052.1" y="771.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 2.60%)</title><rect x="1055.9" y="835.0" width="30.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.9" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 2.60%)</title><rect x="1055.9" y="819.0" width="30.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1058.9" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 2.60%)</title><rect x="1055.9" y="803.0" width="30.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1058.9" y="814.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 2.60%)</title><rect x="1055.9" y="787.0" width="30.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1058.9" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 2.60%)</title><rect x="1055.9" y="771.0" width="30.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1058.9" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.95%)</title><rect x="1055.9" y="755.0" width="23.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.9" y="766.0">P..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1055.9" y="739.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1058.9" y="750.0"></text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.32%)</title><rect x="1055.9" y="723.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1058.9" y="734.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.32%)</title><rect x="1055.9" y="707.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.9" y="718.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.32%)</title><rect x="1055.9" y="691.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1058.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.62%)</title><rect x="1059.7" y="739.0" width="19.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.7" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.62%)</title><rect x="1059.7" y="723.0" width="19.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1062.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.62%)</title><rect x="1059.7" y="707.0" width="19.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.62%)</title><rect x="1059.7" y="691.0" width="19.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1062.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.62%)</title><rect x="1059.7" y="675.0" width="19.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1062.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.62%)</title><rect x="1059.7" y="659.0" width="19.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.65%)</title><rect x="1059.7" y="643.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.65%)</title><rect x="1059.7" y="627.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.65%)</title><rect x="1059.7" y="611.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.65%)</title><rect x="1059.7" y="595.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.65%)</title><rect x="1059.7" y="579.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.65%)</title><rect x="1059.7" y="563.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.7" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1063.6" y="547.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1066.6" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.32%)</title><rect x="1063.6" y="531.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.6" y="542.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.32%)</title><rect x="1063.6" y="515.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.6" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.32%)</title><rect x="1063.6" y="499.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1066.6" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.32%)</title><rect x="1063.6" y="483.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.6" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.32%)</title><rect x="1063.6" y="467.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.6" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1063.6" y="451.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.6" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1063.6" y="435.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.6" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.32%)</title><rect x="1063.6" y="419.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1066.6" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.32%)</title><rect x="1063.6" y="403.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.6" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.32%)</title><rect x="1063.6" y="387.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1066.6" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1063.6" y="371.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.6" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1063.6" y="355.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.6" y="366.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.32%)</title><rect x="1063.6" y="339.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1066.6" y="350.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.32%)</title><rect x="1063.6" y="323.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.6" y="334.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.32%)</title><rect x="1063.6" y="307.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.6" y="318.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="1063.6" y="291.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1066.6" y="302.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="1063.6" y="275.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.6" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::OverpassLookupMode) const (1 samples, 0.32%)</title><rect x="1063.6" y="259.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1066.6" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.32%)</title><rect x="1063.6" y="243.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.6" y="254.0"></text>
</g>
<g>
<title>binary_search(Array&lt;Method*&gt;*, Symbol*) (1 samples, 0.32%)</title><rect x="1063.6" y="227.0" width="3.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1066.6" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.97%)</title><rect x="1067.4" y="643.0" width="11.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1070.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.97%)</title><rect x="1067.4" y="627.0" width="11.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.97%)</title><rect x="1067.4" y="611.0" width="11.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.97%)</title><rect x="1067.4" y="595.0" width="11.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.97%)</title><rect x="1067.4" y="579.0" width="11.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.97%)</title><rect x="1067.4" y="563.0" width="11.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1070.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.97%)</title><rect x="1067.4" y="547.0" width="11.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.4" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1067.4" y="531.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.4" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.32%)</title><rect x="1067.4" y="515.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.4" y="526.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.32%)</title><rect x="1067.4" y="499.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.4" y="510.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.32%)</title><rect x="1067.4" y="483.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.4" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.32%)</title><rect x="1067.4" y="467.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1070.4" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.32%)</title><rect x="1067.4" y="451.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.4" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1067.4" y="435.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.4" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.32%)</title><rect x="1067.4" y="419.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.4" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.32%)</title><rect x="1067.4" y="403.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1070.4" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 0.32%)</title><rect x="1067.4" y="387.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.4" y="398.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.32%)</title><rect x="1067.4" y="371.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.4" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1067.4" y="355.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1070.4" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1067.4" y="339.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.4" y="350.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.32%)</title><rect x="1067.4" y="323.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.4" y="334.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol*) (1 samples, 0.32%)</title><rect x="1067.4" y="307.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.4" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.65%)</title><rect x="1071.2" y="531.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1074.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.65%)</title><rect x="1071.2" y="515.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1074.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.65%)</title><rect x="1071.2" y="499.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.65%)</title><rect x="1071.2" y="483.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.65%)</title><rect x="1071.2" y="467.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.65%)</title><rect x="1071.2" y="451.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1074.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.65%)</title><rect x="1071.2" y="435.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1074.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.65%)</title><rect x="1071.2" y="419.0" width="7.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1074.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.65%)</title><rect x="1071.2" y="403.0" width="7.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.65%)</title><rect x="1071.2" y="387.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.65%)</title><rect x="1071.2" y="371.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1074.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1071.2" y="355.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1071.2" y="339.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1071.2" y="323.0" width="3.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1071.2" y="307.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1071.2" y="291.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1071.2" y="275.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1074.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1071.2" y="259.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1074.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1071.2" y="243.0" width="3.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1074.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1071.2" y="227.0" width="3.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1074.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1071.2" y="211.0" width="3.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1074.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1071.2" y="195.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1074.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1071.2" y="179.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1074.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.32%)</title><rect x="1071.2" y="163.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1074.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.32%)</title><rect x="1071.2" y="147.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.2" y="158.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.32%)</title><rect x="1071.2" y="131.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.2" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.32%)</title><rect x="1071.2" y="115.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1074.2" y="126.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1071.2" y="99.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1074.2" y="110.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.32%)</title><rect x="1071.2" y="83.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.2" y="94.0"></text>
</g>
<g>
<title>MemNode::check_if_adr_maybe_raw(Node*) (1 samples, 0.32%)</title><rect x="1071.2" y="67.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1074.2" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.32%)</title><rect x="1071.2" y="51.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.2" y="62.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.32%)</title><rect x="1071.2" y="35.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.32%)</title><rect x="1075.1" y="355.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1078.1" y="366.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.32%)</title><rect x="1075.1" y="339.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.1" y="350.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.32%)</title><rect x="1075.1" y="323.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.1" y="334.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.32%)</title><rect x="1075.1" y="307.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1078.1" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.32%)</title><rect x="1075.1" y="291.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.1" y="302.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.32%)</title><rect x="1075.1" y="275.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1078.1" y="286.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.32%)</title><rect x="1075.1" y="259.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1078.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (2 samples, 0.65%)</title><rect x="1078.9" y="755.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1081.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.32%)</title><rect x="1078.9" y="739.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1081.9" y="750.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.32%)</title><rect x="1078.9" y="723.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.9" y="734.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.32%)</title><rect x="1078.9" y="707.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.9" y="718.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.32%)</title><rect x="1078.9" y="691.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.9" y="702.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1078.9" y="675.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.9" y="686.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1078.9" y="659.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1081.9" y="670.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.32%)</title><rect x="1078.9" y="643.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1081.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.32%)</title><rect x="1082.7" y="739.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1085.7" y="750.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool) (1 samples, 0.32%)</title><rect x="1082.7" y="723.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1085.7" y="734.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.32%)</title><rect x="1082.7" y="707.0" width="3.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1085.7" y="718.0"></text>
</g>
<g>
<title>Node::del_out(Node*) (1 samples, 0.32%)</title><rect x="1082.7" y="691.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.7" y="702.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.32%)</title><rect x="1086.6" y="835.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.6" y="846.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.32%)</title><rect x="1086.6" y="819.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.6" y="830.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.32%)</title><rect x="1090.4" y="835.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.4" y="846.0"></text>
</g>
<g>
<title>nmethod::post_compiled_method_load_event() (1 samples, 0.32%)</title><rect x="1090.4" y="819.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.4" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.32%)</title><rect x="1090.4" y="803.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.4" y="814.0"></text>
</g>
<g>
<title>__psynch_cvsignal (1 samples, 0.32%)</title><rect x="1090.4" y="787.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1093.4" y="798.0"></text>
</g>
<g>
<title>CompilationLog::log_compile(JavaThread*, CompileTask*) (1 samples, 0.32%)</title><rect x="1094.2" y="867.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.2" y="878.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.32%)</title><rect x="1094.2" y="851.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1097.2" y="862.0"></text>
</g>
<g>
<title>Method::print_short_name(outputStream*) (1 samples, 0.32%)</title><rect x="1094.2" y="835.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1097.2" y="846.0"></text>
</g>
<g>
<title>Klass::external_name() const (1 samples, 0.32%)</title><rect x="1094.2" y="819.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.2" y="830.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (6 samples, 1.95%)</title><rect x="1098.1" y="867.0" width="22.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.1" y="878.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (6 samples, 1.95%)</title><rect x="1098.1" y="851.0" width="22.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.1" y="862.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (6 samples, 1.95%)</title><rect x="1098.1" y="835.0" width="22.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1101.1" y="846.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (6 samples, 1.95%)</title><rect x="1098.1" y="819.0" width="22.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.1" y="830.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (4 samples, 1.30%)</title><rect x="1098.1" y="803.0" width="15.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.1" y="814.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 1.30%)</title><rect x="1098.1" y="787.0" width="15.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.1" y="798.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 1.30%)</title><rect x="1098.1" y="771.0" width="15.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.1" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 1.30%)</title><rect x="1098.1" y="755.0" width="15.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1101.1" y="766.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.32%)</title><rect x="1098.1" y="739.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1101.1" y="750.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.32%)</title><rect x="1098.1" y="723.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.1" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.97%)</title><rect x="1101.9" y="739.0" width="11.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.9" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.97%)</title><rect x="1101.9" y="723.0" width="11.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.9" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.97%)</title><rect x="1101.9" y="707.0" width="11.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.9" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.65%)</title><rect x="1101.9" y="691.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.9" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (2 samples, 0.65%)</title><rect x="1101.9" y="675.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.9" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.65%)</title><rect x="1101.9" y="659.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.9" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.65%)</title><rect x="1101.9" y="643.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.9" y="654.0"></text>
</g>
<g>
<title>BlockBegin::try_merge(ValueStack*) (1 samples, 0.32%)</title><rect x="1101.9" y="627.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.9" y="638.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.32%)</title><rect x="1101.9" y="611.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.9" y="622.0"></text>
</g>
<g>
<title>ciMethod::raw_liveness_at_bci(int) (1 samples, 0.32%)</title><rect x="1101.9" y="595.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.9" y="606.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.32%)</title><rect x="1101.9" y="579.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.9" y="590.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.32%)</title><rect x="1101.9" y="563.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.9" y="574.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::compute_gen_kill_range(ciBytecodeStream*) (1 samples, 0.32%)</title><rect x="1101.9" y="547.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.9" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::next() (1 samples, 0.32%)</title><rect x="1101.9" y="531.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.9" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.32%)</title><rect x="1105.7" y="627.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.7" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.32%)</title><rect x="1105.7" y="611.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.7" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.32%)</title><rect x="1105.7" y="595.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.7" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.32%)</title><rect x="1105.7" y="579.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.7" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.32%)</title><rect x="1105.7" y="563.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.7" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.32%)</title><rect x="1105.7" y="547.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.7" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.32%)</title><rect x="1105.7" y="531.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.7" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*) (1 samples, 0.32%)</title><rect x="1105.7" y="515.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.7" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.32%)</title><rect x="1105.7" y="499.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.7" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.32%)</title><rect x="1105.7" y="483.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1108.7" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.32%)</title><rect x="1105.7" y="467.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.7" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.32%)</title><rect x="1105.7" y="451.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1108.7" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.32%)</title><rect x="1105.7" y="435.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.7" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.32%)</title><rect x="1105.7" y="419.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1108.7" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.32%)</title><rect x="1105.7" y="403.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.7" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.32%)</title><rect x="1105.7" y="387.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.7" y="398.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.32%)</title><rect x="1109.5" y="691.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.5" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1109.5" y="675.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.5" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1109.5" y="659.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.5" y="670.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.32%)</title><rect x="1109.5" y="643.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.5" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.32%)</title><rect x="1109.5" y="627.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.5" y="638.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.32%)</title><rect x="1109.5" y="611.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.5" y="622.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.32%)</title><rect x="1109.5" y="595.0" width="3.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.5" y="606.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.32%)</title><rect x="1109.5" y="579.0" width="3.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.5" y="590.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.32%)</title><rect x="1109.5" y="563.0" width="3.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1112.5" y="574.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.32%)</title><rect x="1109.5" y="547.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.5" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.32%)</title><rect x="1109.5" y="531.0" width="3.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1112.5" y="542.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.32%)</title><rect x="1113.4" y="803.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.4" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.32%)</title><rect x="1113.4" y="787.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1116.4" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_stubs(CodeStubList*) (1 samples, 0.32%)</title><rect x="1113.4" y="771.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.4" y="782.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.32%)</title><rect x="1113.4" y="755.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.4" y="766.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.32%)</title><rect x="1113.4" y="739.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.4" y="750.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.32%)</title><rect x="1113.4" y="723.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.4" y="734.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.32%)</title><rect x="1113.4" y="707.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.4" y="718.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.32%)</title><rect x="1113.4" y="691.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.4" y="702.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.32%)</title><rect x="1113.4" y="675.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.4" y="686.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.32%)</title><rect x="1113.4" y="659.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.4" y="670.0"></text>
</g>
<g>
<title>DebugInformationRecorder::serialize_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.32%)</title><rect x="1113.4" y="643.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1116.4" y="654.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.32%)</title><rect x="1113.4" y="627.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.4" y="638.0"></text>
</g>
<g>
<title>DIR_Chunk::find_match(GrowableArray&lt;DIR_Chunk*&gt;*, int, DebugInformationRecorder*) (1 samples, 0.32%)</title><rect x="1113.4" y="611.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.4" y="622.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.32%)</title><rect x="1117.2" y="803.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1120.2" y="814.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.32%)</title><rect x="1117.2" y="787.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1120.2" y="798.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.32%)</title><rect x="1117.2" y="771.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1120.2" y="782.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.32%)</title><rect x="1117.2" y="755.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.2" y="766.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (1 samples, 0.32%)</title><rect x="1117.2" y="739.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.2" y="750.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.32%)</title><rect x="1117.2" y="723.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1120.2" y="734.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.32%)</title><rect x="1117.2" y="707.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.2" y="718.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(IntervalState, int) (1 samples, 0.32%)</title><rect x="1117.2" y="691.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1120.2" y="702.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.97%)</title><rect x="1121.0" y="867.0" width="11.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.0" y="878.0"></text>
</g>
<g>
<title>Chunk::next_chop() (3 samples, 0.97%)</title><rect x="1121.0" y="851.0" width="11.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.0" y="862.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (2 samples, 0.65%)</title><rect x="1124.9" y="835.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.9" y="846.0"></text>
</g>
<g>
<title>free_large (2 samples, 0.65%)</title><rect x="1124.9" y="819.0" width="7.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1127.9" y="830.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (2 samples, 0.65%)</title><rect x="1124.9" y="803.0" width="7.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1127.9" y="814.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (2 samples, 0.65%)</title><rect x="1124.9" y="787.0" width="7.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1127.9" y="798.0"></text>
</g>
<g>
<title>CompileQueue::get() (3 samples, 0.97%)</title><rect x="1132.5" y="883.0" width="11.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.5" y="894.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.32%)</title><rect x="1132.5" y="867.0" width="3.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.5" y="878.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::is_method_profiled(Method*) (1 samples, 0.32%)</title><rect x="1132.5" y="851.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.5" y="862.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.65%)</title><rect x="1136.4" y="867.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.4" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.65%)</title><rect x="1136.4" y="851.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.4" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.65%)</title><rect x="1136.4" y="835.0" width="7.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.4" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.65%)</title><rect x="1136.4" y="819.0" width="7.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1139.4" y="830.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (6 samples, 1.95%)</title><rect x="1144.0" y="899.0" width="23.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.0" y="910.0">S..</text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (4 samples, 1.30%)</title><rect x="1144.0" y="883.0" width="15.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.0" y="894.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (4 samples, 1.30%)</title><rect x="1144.0" y="867.0" width="15.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.0" y="878.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (4 samples, 1.30%)</title><rect x="1144.0" y="851.0" width="15.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1147.0" y="862.0"></text>
</g>
<g>
<title>Method::jmethod_id() (2 samples, 0.65%)</title><rect x="1147.9" y="835.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.9" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::get_jmethod_id(instanceKlassHandle, methodHandle) (1 samples, 0.32%)</title><rect x="1151.7" y="819.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.7" y="830.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.32%)</title><rect x="1155.5" y="835.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.5" y="846.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.32%)</title><rect x="1155.5" y="819.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.5" y="830.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int() (1 samples, 0.32%)</title><rect x="1155.5" y="803.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.5" y="814.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.65%)</title><rect x="1159.4" y="883.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.4" y="894.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.65%)</title><rect x="1159.4" y="867.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.4" y="878.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 0.65%)</title><rect x="1159.4" y="851.0" width="7.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1162.4" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.65%)</title><rect x="1159.4" y="835.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.4" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.65%)</title><rect x="1159.4" y="819.0" width="7.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1162.4" y="830.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.32%)</title><rect x="1167.0" y="899.0" width="3.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1170.0" y="910.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.32%)</title><rect x="1167.0" y="883.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.0" y="894.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.32%)</title><rect x="1167.0" y="867.0" width="3.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1170.0" y="878.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.32%)</title><rect x="1167.0" y="851.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="862.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.32%)</title><rect x="1167.0" y="835.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="846.0"></text>
</g>
<g>
<title>GCC_except_table15 (1 samples, 0.32%)</title><rect x="1167.0" y="819.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1170.0" y="830.0"></text>
</g>
<g>
<title>_dispatch_queue_attrs (1 samples, 0.32%)</title><rect x="1167.0" y="803.0" width="3.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1170.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="1167.0" y="787.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1170.0" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="1167.0" y="771.0" width="3.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1170.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="1167.0" y="755.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1170.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="1167.0" y="739.0" width="3.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1170.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="1167.0" y="723.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1170.0" y="734.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="1167.0" y="707.0" width="3.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1170.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="1167.0" y="691.0" width="3.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1170.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="1167.0" y="675.0" width="3.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1170.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="1167.0" y="659.0" width="3.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1170.0" y="670.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.97%)</title><rect x="1170.8" y="931.0" width="11.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.8" y="942.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.97%)</title><rect x="1170.8" y="915.0" width="11.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.8" y="926.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.32%)</title><rect x="1170.8" y="899.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.8" y="910.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.32%)</title><rect x="1170.8" y="883.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.8" y="894.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.32%)</title><rect x="1170.8" y="867.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.8" y="878.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.32%)</title><rect x="1170.8" y="851.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.8" y="862.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.65%)</title><rect x="1174.7" y="899.0" width="7.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="910.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.65%)</title><rect x="1174.7" y="883.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="894.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.65%)</title><rect x="1174.7" y="867.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.7" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.65%)</title><rect x="1174.7" y="851.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (2 samples, 0.65%)</title><rect x="1174.7" y="835.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.7" y="846.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.32%)</title><rect x="1174.7" y="819.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.7" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.32%)</title><rect x="1174.7" y="803.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.32%)</title><rect x="1174.7" y="787.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.7" y="798.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (1 samples, 0.32%)</title><rect x="1174.7" y="771.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1177.7" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.32%)</title><rect x="1174.7" y="755.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="766.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.32%)</title><rect x="1178.5" y="819.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>WatcherThread::run() (2 samples, 0.65%)</title><rect x="1182.3" y="931.0" width="7.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="942.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (2 samples, 0.65%)</title><rect x="1182.3" y="915.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="926.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.65%)</title><rect x="1182.3" y="899.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.3" y="910.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.65%)</title><rect x="1182.3" y="883.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.3" y="894.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.65%)</title><rect x="1182.3" y="867.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="878.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.65%)</title><rect x="1182.3" y="851.0" width="7.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1185.3" y="862.0"></text>
</g>
</g>
</svg>
