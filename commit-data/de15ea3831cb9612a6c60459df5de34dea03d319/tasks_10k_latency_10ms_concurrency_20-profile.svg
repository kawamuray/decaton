<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="885"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="885"> </text>
<g id="frames">
<g>
<title>all (230 samples, 100.00%)</title><rect x="10.0" y="851.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="862.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.43%)</title><rect x="10.0" y="835.0" width="5.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int) (1 samples, 0.43%)</title><rect x="10.0" y="819.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap_inner(JavaThread*, int) (1 samples, 0.43%)</title><rect x="10.0" y="803.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>Events::log_deopt_message(Thread*, char const*, ...) (1 samples, 0.43%)</title><rect x="10.0" y="787.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>StringEventLog::logv(Thread*, char const*, __va_list_tag*) (1 samples, 0.43%)</title><rect x="10.0" y="771.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>jio_vsnprintf (1 samples, 0.43%)</title><rect x="10.0" y="755.0" width="5.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>vsnprintf (1 samples, 0.43%)</title><rect x="10.0" y="739.0" width="5.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>_vsnprintf (1 samples, 0.43%)</title><rect x="10.0" y="723.0" width="5.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>__v2printf (1 samples, 0.43%)</title><rect x="10.0" y="707.0" width="5.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>__vfprintf (1 samples, 0.43%)</title><rect x="10.0" y="691.0" width="5.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>__sfvwrite (1 samples, 0.43%)</title><rect x="10.0" y="675.0" width="5.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>_platform_memmove$VARIANT$Haswell (1 samples, 0.43%)</title><rect x="10.0" y="659.0" width="5.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (8 samples, 3.48%)</title><rect x="15.1" y="835.0" width="41.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.1" y="846.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (8 samples, 3.48%)</title><rect x="15.1" y="819.0" width="41.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="18.1" y="830.0">com..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.48%)</title><rect x="15.1" y="803.0" width="41.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.1" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.48%)</title><rect x="15.1" y="787.0" width="41.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.1" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 3.48%)</title><rect x="15.1" y="771.0" width="41.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.1" y="782.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.43%)</title><rect x="15.1" y="755.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="18.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.rejoinNeededOrPending (1 samples, 0.43%)</title><rect x="15.1" y="739.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="18.1" y="750.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.43%)</title><rect x="15.1" y="723.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.1" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.43%)</title><rect x="15.1" y="707.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.1" y="718.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.43%)</title><rect x="15.1" y="691.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="18.1" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.43%)</title><rect x="15.1" y="675.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.1" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.43%)</title><rect x="15.1" y="659.0" width="5.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="18.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.17%)</title><rect x="20.3" y="755.0" width="25.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.3" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.17%)</title><rect x="20.3" y="739.0" width="25.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.3" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 2.17%)</title><rect x="20.3" y="723.0" width="25.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.3" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 2.17%)</title><rect x="20.3" y="707.0" width="25.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.3" y="718.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.clear (1 samples, 0.43%)</title><rect x="20.3" y="691.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.3" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (1 samples, 0.43%)</title><rect x="20.3" y="675.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (4 samples, 1.74%)</title><rect x="25.4" y="691.0" width="20.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.4" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (4 samples, 1.74%)</title><rect x="25.4" y="675.0" width="20.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.4" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (4 samples, 1.74%)</title><rect x="25.4" y="659.0" width="20.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.4" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueSelectorImpl.doSelect (4 samples, 1.74%)</title><rect x="25.4" y="643.0" width="20.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.4" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.poll (4 samples, 1.74%)</title><rect x="25.4" y="627.0" width="20.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.4" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/KQueueArrayWrapper.kevent0 (4 samples, 1.74%)</title><rect x="25.4" y="611.0" width="20.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.4" y="622.0"></text>
</g>
<g>
<title>kevent (4 samples, 1.74%)</title><rect x="25.4" y="595.0" width="20.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="28.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (2 samples, 0.87%)</title><rect x="45.9" y="755.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.87%)</title><rect x="45.9" y="739.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.87%)</title><rect x="45.9" y="723.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="48.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.87%)</title><rect x="45.9" y="707.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="48.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.87%)</title><rect x="45.9" y="691.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="48.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (2 samples, 0.87%)</title><rect x="45.9" y="675.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (2 samples, 0.87%)</title><rect x="45.9" y="659.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="48.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator$FetchMetrics.increment (1 samples, 0.43%)</title><rect x="45.9" y="643.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="48.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.43%)</title><rect x="51.0" y="643.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="54.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.43%)</title><rect x="51.0" y="627.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.0" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.43%)</title><rect x="51.0" y="611.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="54.0" y="622.0"></text>
</g>
<g>
<title>rcmd_af.canonnamebuf (1 samples, 0.43%)</title><rect x="51.0" y="595.0" width="5.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="54.0" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.run (157 samples, 68.26%)</title><rect x="56.2" y="835.0" width="805.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.2" y="846.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (157 samples, 68.26%)</title><rect x="56.2" y="819.0" width="805.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.2" y="830.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (157 samples, 68.26%)</title><rect x="56.2" y="803.0" width="805.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="59.2" y="814.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.43%)</title><rect x="66.4" y="787.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.4" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$278/2146040499.run (153 samples, 66.52%)</title><rect x="71.6" y="787.0" width="784.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.6" y="798.0">com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$278/2146040499.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0 (153 samples, 66.52%)</title><rect x="71.6" y="771.0" width="784.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="74.6" y="782.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$0</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (153 samples, 66.52%)</title><rect x="71.6" y="755.0" width="784.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="74.6" y="766.0">com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (153 samples, 66.52%)</title><rect x="71.6" y="739.0" width="784.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.6" y="750.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (2 samples, 0.87%)</title><rect x="71.6" y="723.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/299644693.extract (2 samples, 0.87%)</title><rect x="71.6" y="707.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (2 samples, 0.87%)</title><rect x="71.6" y="691.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (2 samples, 0.87%)</title><rect x="71.6" y="675.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (2 samples, 0.87%)</title><rect x="71.6" y="659.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (2 samples, 0.87%)</title><rect x="71.6" y="643.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.43%)</title><rect x="71.6" y="627.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.43%)</title><rect x="71.6" y="611.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="74.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.43%)</title><rect x="71.6" y="595.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.43%)</title><rect x="71.6" y="579.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.6" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.43%)</title><rect x="71.6" y="563.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="74.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.43%)</title><rect x="71.6" y="547.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="74.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.43%)</title><rect x="71.6" y="531.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.43%)</title><rect x="76.7" y="627.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="79.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 0.43%)</title><rect x="76.7" y="611.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.43%)</title><rect x="76.7" y="595.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.43%)</title><rect x="76.7" y="579.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.43%)</title><rect x="76.7" y="563.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.43%)</title><rect x="76.7" y="547.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="79.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.43%)</title><rect x="76.7" y="531.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (151 samples, 65.65%)</title><rect x="81.8" y="723.0" width="774.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.8" y="734.0">com/linecorp/decaton/processor/runtime/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (1 samples, 0.43%)</title><rect x="81.8" y="707.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.8" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (1 samples, 0.43%)</title><rect x="81.8" y="691.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.8" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.43%)</title><rect x="81.8" y="675.0" width="5.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="84.8" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.43%)</title><rect x="81.8" y="659.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="84.8" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.43%)</title><rect x="81.8" y="643.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.43%)</title><rect x="81.8" y="627.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.43%)</title><rect x="81.8" y="611.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.8" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.43%)</title><rect x="81.8" y="595.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="84.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (149 samples, 64.78%)</title><rect x="87.0" y="707.0" width="764.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.0" y="718.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (149 samples, 64.78%)</title><rect x="87.0" y="691.0" width="764.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.0" y="702.0">com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1419027151.process (148 samples, 64.35%)</title><rect x="92.1" y="675.0" width="759.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.1" y="686.0">com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$203/1419027151.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (148 samples, 64.35%)</title><rect x="92.1" y="659.0" width="759.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.1" y="670.0">com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (148 samples, 64.35%)</title><rect x="92.1" y="643.0" width="759.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.1" y="654.0">com/linecorp/decaton/benchmark/Recording.process</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (148 samples, 64.35%)</title><rect x="92.1" y="627.0" width="759.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.1" y="638.0">com/linecorp/decaton/benchmark/Recording$ChildRecording.process</text>
</g>
<g>
<title>java/lang/Thread.sleep (148 samples, 64.35%)</title><rect x="92.1" y="611.0" width="759.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.1" y="622.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (146 samples, 63.48%)</title><rect x="102.3" y="595.0" width="749.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="105.3" y="606.0">JVM_Sleep</text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.43%)</title><rect x="102.3" y="579.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="105.3" y="590.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (145 samples, 63.04%)</title><rect x="107.5" y="579.0" width="743.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="110.5" y="590.0">os::sleep(Thread*, long, bool)</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (145 samples, 63.04%)</title><rect x="107.5" y="563.0" width="743.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="110.5" y="574.0">os::PlatformEvent::park(long)</text>
</g>
<g>
<title>__gettimeofday (4 samples, 1.74%)</title><rect x="107.5" y="547.0" width="20.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="110.5" y="558.0"></text>
</g>
<g>
<title>__psynch_cvwait (141 samples, 61.30%)</title><rect x="128.0" y="547.0" width="723.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="131.0" y="558.0">__psynch_cvwait</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1330074914.linkToTargetMethod (1 samples, 0.43%)</title><rect x="851.4" y="707.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="854.4" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/2054574951.invokeStatic_L3_L (1 samples, 0.43%)</title><rect x="851.4" y="691.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="854.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/619457625.get$Lambda (1 samples, 0.43%)</title><rect x="851.4" y="675.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$281/619457625.&lt;init&gt; (1 samples, 0.43%)</title><rect x="851.4" y="659.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="854.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.43%)</title><rect x="856.5" y="787.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="859.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.43%)</title><rect x="856.5" y="771.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="859.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.43%)</title><rect x="856.5" y="755.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="859.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.43%)</title><rect x="856.5" y="739.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="859.5" y="750.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.43%)</title><rect x="856.5" y="723.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="859.5" y="734.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.43%)</title><rect x="856.5" y="707.0" width="5.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="859.5" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.43%)</title><rect x="856.5" y="691.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="859.5" y="702.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.43%)</title><rect x="856.5" y="675.0" width="5.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="859.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (3 samples, 1.30%)</title><rect x="861.7" y="835.0" width="15.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="864.7" y="846.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.43%)</title><rect x="861.7" y="819.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="864.7" y="830.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.43%)</title><rect x="861.7" y="803.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="864.7" y="814.0"></text>
</g>
<g>
<title>ObjectSynchronizer::wait(Handle, long, Thread*) (1 samples, 0.43%)</title><rect x="861.7" y="787.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="864.7" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.43%)</title><rect x="861.7" y="771.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="864.7" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.43%)</title><rect x="861.7" y="755.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.7" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.43%)</title><rect x="861.7" y="739.0" width="5.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="864.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.sendHeartbeatRequest (1 samples, 0.43%)</title><rect x="866.8" y="819.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="869.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatResponseHandler.&lt;init&gt; (1 samples, 0.43%)</title><rect x="866.8" y="803.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="869.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatResponseHandler.&lt;init&gt; (1 samples, 0.43%)</title><rect x="866.8" y="787.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="869.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.43%)</title><rect x="871.9" y="819.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="874.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.43%)</title><rect x="871.9" y="803.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.43%)</title><rect x="871.9" y="787.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="874.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.43%)</title><rect x="871.9" y="771.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="874.9" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.43%)</title><rect x="871.9" y="755.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="874.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$85/110666895.get (1 samples, 0.43%)</title><rect x="871.9" y="739.0" width="5.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="874.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.recoverableException (1 samples, 0.43%)</title><rect x="871.9" y="723.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="874.9" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$EmptySet.isEmpty (1 samples, 0.43%)</title><rect x="871.9" y="707.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="874.9" y="718.0"></text>
</g>
<g>
<title>thread_start (61 samples, 26.52%)</title><rect x="877.0" y="835.0" width="313.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="880.0" y="846.0">thread_start</text>
</g>
<g>
<title>_pthread_start (61 samples, 26.52%)</title><rect x="877.0" y="819.0" width="313.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="880.0" y="830.0">_pthread_start</text>
</g>
<g>
<title>_pthread_body (61 samples, 26.52%)</title><rect x="877.0" y="803.0" width="313.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="880.0" y="814.0">_pthread_body</text>
</g>
<g>
<title>java_start(Thread*) (61 samples, 26.52%)</title><rect x="877.0" y="787.0" width="313.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="880.0" y="798.0">java_start(Thread*)</text>
</g>
<g>
<title>JavaThread::run() (57 samples, 24.78%)</title><rect x="877.0" y="771.0" width="292.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="880.0" y="782.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (57 samples, 24.78%)</title><rect x="877.0" y="755.0" width="292.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="880.0" y="766.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (54 samples, 23.48%)</title><rect x="877.0" y="739.0" width="277.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.0" y="750.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (53 samples, 23.04%)</title><rect x="877.0" y="723.0" width="272.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.0" y="734.0">CompileBroker::invoke_compiler_on_me..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (50 samples, 21.74%)</title><rect x="877.0" y="707.0" width="256.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.0" y="718.0">C2Compiler::compile_method(ciEnv*,..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (50 samples, 21.74%)</title><rect x="877.0" y="691.0" width="256.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="880.0" y="702.0">Compile::Compile(ciEnv*, C2Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (28 samples, 12.17%)</title><rect x="877.0" y="675.0" width="143.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="880.0" y="686.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.43%)</title><rect x="877.0" y="659.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="880.0" y="670.0"></text>
</g>
<g>
<title>Compile::FillExceptionTables(unsigned int, unsigned int*, unsigned int*, Label*) (1 samples, 0.43%)</title><rect x="877.0" y="643.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="880.0" y="654.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.30%)</title><rect x="882.2" y="659.0" width="15.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="885.2" y="670.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.87%)</title><rect x="882.2" y="643.0" width="10.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="885.2" y="654.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.87%)</title><rect x="882.2" y="627.0" width="10.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="885.2" y="638.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.43%)</title><rect x="887.3" y="611.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="890.3" y="622.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.43%)</title><rect x="887.3" y="595.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="890.3" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.43%)</title><rect x="887.3" y="579.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="890.3" y="590.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.43%)</title><rect x="887.3" y="563.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="890.3" y="574.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.43%)</title><rect x="892.4" y="643.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="895.4" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.87%)</title><rect x="897.6" y="659.0" width="10.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="900.6" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.87%)</title><rect x="897.6" y="643.0" width="10.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="900.6" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.87%)</title><rect x="897.6" y="627.0" width="10.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="900.6" y="638.0"></text>
</g>
<g>
<title>storePNode::ideal_Opcode() const (1 samples, 0.43%)</title><rect x="902.7" y="611.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="905.7" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 9.57%)</title><rect x="907.8" y="659.0" width="112.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="910.8" y="670.0">PhaseChaitin::..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.87%)</title><rect x="907.8" y="643.0" width="10.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="910.8" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.74%)</title><rect x="918.1" y="643.0" width="20.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="921.1" y="654.0"></text>
</g>
<g>
<title>Block::end_idx() const (1 samples, 0.43%)</title><rect x="923.2" y="627.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.2" y="638.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.43%)</title><rect x="923.2" y="611.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="926.2" y="622.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.43%)</title><rect x="928.3" y="627.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="931.3" y="638.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.43%)</title><rect x="928.3" y="611.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.3" y="622.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.43%)</title><rect x="933.5" y="627.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="936.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.74%)</title><rect x="938.6" y="643.0" width="20.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="941.6" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.87%)</title><rect x="938.6" y="627.0" width="10.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="941.6" y="638.0"></text>
</g>
<g>
<title>IndexSet::insert(unsigned int) (1 samples, 0.43%)</title><rect x="938.6" y="611.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="941.6" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.43%)</title><rect x="943.7" y="611.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="946.7" y="622.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.43%)</title><rect x="948.9" y="627.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="951.9" y="638.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.43%)</title><rect x="954.0" y="627.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="957.0" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.43%)</title><rect x="959.1" y="643.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="962.1" y="654.0"></text>
</g>
<g>
<title>Block::end_idx() const (1 samples, 0.43%)</title><rect x="959.1" y="627.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="962.1" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.87%)</title><rect x="964.3" y="643.0" width="10.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="967.3" y="654.0"></text>
</g>
<g>
<title>RegMask::is_bound(unsigned int) const (1 samples, 0.43%)</title><rect x="969.4" y="627.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="972.4" y="638.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.43%)</title><rect x="969.4" y="611.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.87%)</title><rect x="974.5" y="643.0" width="10.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="977.5" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.87%)</title><rect x="974.5" y="627.0" width="10.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="977.5" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.43%)</title><rect x="984.8" y="643.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="987.8" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.43%)</title><rect x="984.8" y="627.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.8" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.43%)</title><rect x="989.9" y="643.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.9" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::next() (1 samples, 0.43%)</title><rect x="989.9" y="627.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.9" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.43%)</title><rect x="995.0" y="643.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.0" y="654.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.43%)</title><rect x="995.0" y="627.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="998.0" y="638.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.74%)</title><rect x="1000.2" y="643.0" width="20.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1003.2" y="654.0"></text>
</g>
<g>
<title>IndexSet::clear() (1 samples, 0.43%)</title><rect x="1010.4" y="627.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.4" y="638.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.43%)</title><rect x="1010.4" y="611.0" width="5.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1013.4" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.43%)</title><rect x="1015.6" y="627.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1018.6" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.43%)</title><rect x="1015.6" y="611.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1018.6" y="622.0"></text>
</g>
<g>
<title>Compile::Optimize() (18 samples, 7.83%)</title><rect x="1020.7" y="675.0" width="92.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1023.7" y="686.0">Compile::Op..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.43%)</title><rect x="1020.7" y="659.0" width="5.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1023.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.43%)</title><rect x="1025.8" y="659.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1028.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.43%)</title><rect x="1025.8" y="643.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1028.8" y="654.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.43%)</title><rect x="1025.8" y="627.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.8" y="638.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.43%)</title><rect x="1031.0" y="659.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.0" y="670.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.43%)</title><rect x="1031.0" y="643.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1034.0" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.43%)</title><rect x="1031.0" y="627.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1034.0" y="638.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.43%)</title><rect x="1031.0" y="611.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.0" y="622.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.43%)</title><rect x="1031.0" y="595.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.0" y="606.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.43%)</title><rect x="1036.1" y="659.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1039.1" y="670.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.43%)</title><rect x="1036.1" y="643.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.1" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 4.78%)</title><rect x="1041.2" y="659.0" width="56.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1044.2" y="670.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.30%)</title><rect x="1041.2" y="643.0" width="15.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1044.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.43%)</title><rect x="1056.6" y="643.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1059.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.43%)</title><rect x="1056.6" y="627.0" width="5.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1059.6" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.43%)</title><rect x="1056.6" y="611.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1059.6" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.43%)</title><rect x="1056.6" y="595.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1059.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl(Node*, Node*, Node*) (1 samples, 0.43%)</title><rect x="1056.6" y="579.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1059.6" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.43%)</title><rect x="1056.6" y="563.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1059.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.43%)</title><rect x="1061.7" y="643.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.7" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.43%)</title><rect x="1061.7" y="627.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1064.7" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.43%)</title><rect x="1061.7" y="611.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() (1 samples, 0.43%)</title><rect x="1066.9" y="643.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1069.9" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.43%)</title><rect x="1066.9" y="627.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.43%)</title><rect x="1066.9" y="611.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1069.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate_insertion_point(Node*, Deoptimization::DeoptReason) (1 samples, 0.43%)</title><rect x="1066.9" y="595.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.9" y="606.0"></text>
</g>
<g>
<title>Opaque1Node::Opcode() const (1 samples, 0.43%)</title><rect x="1066.9" y="579.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1069.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.43%)</title><rect x="1072.0" y="643.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.43%)</title><rect x="1072.0" y="627.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1075.0" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.43%)</title><rect x="1072.0" y="611.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.0" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.43%)</title><rect x="1072.0" y="595.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1075.0" y="606.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.43%)</title><rect x="1072.0" y="579.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.0" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.30%)</title><rect x="1077.1" y="643.0" width="15.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.1" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.30%)</title><rect x="1077.1" y="627.0" width="15.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1080.1" y="638.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1077.1" y="611.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1080.1" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.43%)</title><rect x="1077.1" y="595.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1080.1" y="606.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.43%)</title><rect x="1077.1" y="579.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.1" y="590.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.43%)</title><rect x="1077.1" y="563.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.1" y="574.0"></text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1082.3" y="611.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1085.3" y="622.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.43%)</title><rect x="1087.4" y="611.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1090.4" y="622.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.43%)</title><rect x="1092.5" y="643.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.5" y="654.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.43%)</title><rect x="1092.5" y="627.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.5" y="638.0"></text>
</g>
<g>
<title>Chunk::operator delete(void*) (1 samples, 0.43%)</title><rect x="1092.5" y="611.0" width="5.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.5" y="622.0"></text>
</g>
<g>
<title>free_large (1 samples, 0.43%)</title><rect x="1092.5" y="595.0" width="5.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1095.5" y="606.0"></text>
</g>
<g>
<title>mvm_deallocate_pages (1 samples, 0.43%)</title><rect x="1092.5" y="579.0" width="5.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1095.5" y="590.0"></text>
</g>
<g>
<title>si_module_static_search.search_vtable (1 samples, 0.43%)</title><rect x="1092.5" y="563.0" width="5.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1095.5" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.30%)</title><rect x="1097.7" y="659.0" width="15.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.7" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.30%)</title><rect x="1097.7" y="643.0" width="15.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1100.7" y="654.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.43%)</title><rect x="1097.7" y="627.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1100.7" y="638.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.43%)</title><rect x="1097.7" y="611.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.7" y="622.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.43%)</title><rect x="1097.7" y="595.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.7" y="606.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.43%)</title><rect x="1097.7" y="579.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1100.7" y="590.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.43%)</title><rect x="1097.7" y="563.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.7" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.43%)</title><rect x="1102.8" y="627.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.8" y="638.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1107.9" y="627.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.9" y="638.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.43%)</title><rect x="1107.9" y="611.0" width="5.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.9" y="622.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.43%)</title><rect x="1113.0" y="675.0" width="5.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.0" y="686.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.43%)</title><rect x="1113.0" y="659.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.0" y="670.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.43%)</title><rect x="1113.0" y="643.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1116.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.30%)</title><rect x="1118.2" y="675.0" width="15.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.30%)</title><rect x="1118.2" y="659.0" width="15.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.30%)</title><rect x="1118.2" y="643.0" width="15.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.30%)</title><rect x="1118.2" y="627.0" width="15.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.30%)</title><rect x="1118.2" y="611.0" width="15.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.30%)</title><rect x="1118.2" y="595.0" width="15.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.2" y="606.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.43%)</title><rect x="1118.2" y="579.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.2" y="590.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.43%)</title><rect x="1118.2" y="563.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.2" y="574.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.43%)</title><rect x="1118.2" y="547.0" width="5.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.2" y="558.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.43%)</title><rect x="1118.2" y="531.0" width="5.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.87%)</title><rect x="1123.3" y="579.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.87%)</title><rect x="1123.3" y="563.0" width="10.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.87%)</title><rect x="1123.3" y="547.0" width="10.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.87%)</title><rect x="1123.3" y="531.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.87%)</title><rect x="1123.3" y="515.0" width="10.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.87%)</title><rect x="1123.3" y="499.0" width="10.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.3" y="510.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1123.3" y="483.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.3" y="494.0"></text>
</g>
<g>
<title>GraphKit::null_check_receiver_before_call(ciMethod*) (1 samples, 0.43%)</title><rect x="1123.3" y="467.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.3" y="478.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.43%)</title><rect x="1123.3" y="451.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.3" y="462.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.43%)</title><rect x="1123.3" y="435.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.3" y="446.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.43%)</title><rect x="1123.3" y="419.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.3" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1128.4" y="483.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1128.4" y="467.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1128.4" y="451.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1128.4" y="435.0" width="5.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1131.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1128.4" y="419.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1128.4" y="403.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.43%)</title><rect x="1128.4" y="387.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1128.4" y="371.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1128.4" y="355.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1128.4" y="339.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1128.4" y="323.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1128.4" y="307.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.43%)</title><rect x="1128.4" y="291.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.43%)</title><rect x="1128.4" y="275.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.4" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.43%)</title><rect x="1128.4" y="259.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.43%)</title><rect x="1128.4" y="243.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.43%)</title><rect x="1128.4" y="227.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.43%)</title><rect x="1128.4" y="211.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.43%)</title><rect x="1128.4" y="195.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.43%)</title><rect x="1128.4" y="179.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.4" y="190.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.43%)</title><rect x="1128.4" y="163.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.4" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.43%)</title><rect x="1128.4" y="147.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.4" y="158.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.43%)</title><rect x="1128.4" y="131.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.4" y="142.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.43%)</title><rect x="1128.4" y="115.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.4" y="126.0"></text>
</g>
<g>
<title>MemNode::check_if_adr_maybe_raw(Node*) (1 samples, 0.43%)</title><rect x="1128.4" y="99.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.4" y="110.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.43%)</title><rect x="1128.4" y="83.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.4" y="94.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.43%)</title><rect x="1128.4" y="67.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.4" y="78.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.43%)</title><rect x="1128.4" y="51.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.4" y="62.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.43%)</title><rect x="1128.4" y="35.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.4" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.87%)</title><rect x="1133.6" y="707.0" width="10.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.6" y="718.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.87%)</title><rect x="1133.6" y="691.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.6" y="702.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.87%)</title><rect x="1133.6" y="675.0" width="10.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.6" y="686.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.87%)</title><rect x="1133.6" y="659.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.6" y="670.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.87%)</title><rect x="1133.6" y="643.0" width="10.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.6" y="654.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.87%)</title><rect x="1133.6" y="627.0" width="10.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.6" y="638.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.43%)</title><rect x="1133.6" y="611.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.6" y="622.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.43%)</title><rect x="1133.6" y="595.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.6" y="606.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.43%)</title><rect x="1138.7" y="611.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.7" y="622.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.43%)</title><rect x="1138.7" y="595.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.7" y="606.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*, int) (1 samples, 0.43%)</title><rect x="1143.8" y="707.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.8" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.43%)</title><rect x="1143.8" y="691.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.8" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::find_non_perm(oopDesc*) (1 samples, 0.43%)</title><rect x="1143.8" y="675.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.8" y="686.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.43%)</title><rect x="1149.0" y="723.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.0" y="734.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.43%)</title><rect x="1149.0" y="707.0" width="5.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.0" y="718.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.43%)</title><rect x="1149.0" y="691.0" width="5.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.0" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.43%)</title><rect x="1149.0" y="675.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.0" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.43%)</title><rect x="1149.0" y="659.0" width="5.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1152.0" y="670.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.87%)</title><rect x="1154.1" y="739.0" width="10.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.1" y="750.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.87%)</title><rect x="1154.1" y="723.0" width="10.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.1" y="734.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.87%)</title><rect x="1154.1" y="707.0" width="10.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.1" y="718.0"></text>
</g>
<g>
<title>ParkCommon(ParkEvent*, long) (2 samples, 0.87%)</title><rect x="1154.1" y="691.0" width="10.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1157.1" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.87%)</title><rect x="1154.1" y="675.0" width="10.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.1" y="686.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.87%)</title><rect x="1154.1" y="659.0" width="10.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1157.1" y="670.0"></text>
</g>
<g>
<title>attach_listener_thread_entry(JavaThread*, Thread*) (1 samples, 0.43%)</title><rect x="1164.3" y="739.0" width="5.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1167.3" y="750.0"></text>
</g>
<g>
<title>JvmtiExport::load_agent_library(AttachOperation*, outputStream*) (1 samples, 0.43%)</title><rect x="1164.3" y="723.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.3" y="734.0"></text>
</g>
<g>
<title>Agent_OnAttach (1 samples, 0.43%)</title><rect x="1164.3" y="707.0" width="5.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1167.3" y="718.0"></text>
</g>
<g>
<title>Profiler::run(Arguments&amp;) (1 samples, 0.43%)</title><rect x="1164.3" y="691.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.3" y="702.0"></text>
</g>
<g>
<title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp; std::__1::__put_character_sequence&lt;char, std::__1::char_traits&lt;char&gt; &gt;(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, char const*, unsigned long) (1 samples, 0.43%)</title><rect x="1164.3" y="675.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.3" y="686.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 1.74%)</title><rect x="1169.5" y="771.0" width="20.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.5" y="782.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.43%)</title><rect x="1169.5" y="755.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.5" y="766.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.43%)</title><rect x="1169.5" y="739.0" width="5.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1172.5" y="750.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (3 samples, 1.30%)</title><rect x="1174.6" y="755.0" width="15.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.6" y="766.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (3 samples, 1.30%)</title><rect x="1174.6" y="739.0" width="15.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.6" y="750.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (3 samples, 1.30%)</title><rect x="1174.6" y="723.0" width="15.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.6" y="734.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (3 samples, 1.30%)</title><rect x="1174.6" y="707.0" width="15.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.6" y="718.0"></text>
</g>
<g>
<title>__psynch_cvwait (3 samples, 1.30%)</title><rect x="1174.6" y="691.0" width="15.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1177.6" y="702.0"></text>
</g>
</g>
</svg>
