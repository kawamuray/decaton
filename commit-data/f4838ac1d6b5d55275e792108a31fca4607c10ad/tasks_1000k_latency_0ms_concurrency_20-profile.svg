<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,443 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.07%)</title><rect x="10.0" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2019.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="2003.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1987.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1971.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1955.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1939.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1923.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1891.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1827.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1811.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1795.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1779.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1763.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1747.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1731.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1715.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1683.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1667.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1651.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1635.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1603.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1587.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1571.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1555.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1539.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1523.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1507.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1491.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1475.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1459.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1427.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1411.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1395.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1379.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1347.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1331.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1315.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1283.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1267.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1251.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1235.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1219.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1203.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1187.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1171.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1155.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1123.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1107.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1091.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1075.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1059.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1043.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="979.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="963.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="947.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="931.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="915.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="899.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="883.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="867.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="851.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="835.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="787.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="755.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="723.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="707.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="691.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="675.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="643.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="611.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="595.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="579.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="563.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="547.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="531.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="515.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="499.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="483.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="467.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="435.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="419.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="403.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="387.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="371.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="355.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="339.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="323.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="291.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="275.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="259.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="243.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="227.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="211.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="195.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="179.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="163.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="131.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="115.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="99.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="83.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="67.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="51.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="10.0" y="35.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="2035.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="2019.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="2003.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1987.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.8" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1971.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1955.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1939.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1923.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1907.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1891.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1843.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1827.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1811.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.8" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1795.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1779.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1763.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.8" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1747.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1731.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.8" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1715.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1683.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1667.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1651.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1635.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1619.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1603.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1587.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1571.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1555.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1539.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1523.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1507.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1491.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1475.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1459.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1443.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1427.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1411.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1395.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1379.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1363.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1347.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1331.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1315.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1283.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1267.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1251.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1235.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1219.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1187.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1171.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1155.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1139.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1123.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1107.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1091.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1075.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1059.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1043.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1027.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="1011.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="995.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="979.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="963.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="947.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="931.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="899.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="883.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="867.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="851.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="835.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="819.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="803.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="787.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="771.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="755.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="739.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="723.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="707.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="691.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="675.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="659.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="643.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="627.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="611.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="595.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="579.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="563.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="547.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="531.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="515.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="499.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="483.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="467.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="451.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="435.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="419.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="403.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="387.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="371.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="355.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="339.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="323.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="307.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="291.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="275.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="259.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="243.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="227.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="211.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="195.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="179.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="163.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="147.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="131.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="115.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="99.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="83.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="67.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.8" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="10.8" y="51.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.8" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="10.8" y="35.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.8" y="46.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="11.6" y="2035.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.6" y="2046.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.07%)</title><rect x="11.6" y="2019.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="14.6" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (271 samples, 18.78%)</title><rect x="12.5" y="2035.0" width="221.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.5" y="2046.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.commitCompletedOffsets (1 samples, 0.07%)</title><rect x="13.3" y="2019.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.3" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.commitOffsets (1 samples, 0.07%)</title><rect x="13.3" y="2003.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.3" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pollOnce (269 samples, 18.64%)</title><rect x="14.1" y="2019.0" width="220.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.1" y="2030.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.updateHighWatermarks (5 samples, 0.35%)</title><rect x="14.1" y="2003.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.1" y="2014.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.28%)</title><rect x="14.9" y="1987.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.9" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts$$Lambda$248/1760696481.accept (4 samples, 0.28%)</title><rect x="14.9" y="1971.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.9" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.updateHighWatermark (4 samples, 0.28%)</title><rect x="14.9" y="1955.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.9" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.28%)</title><rect x="14.9" y="1939.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.9" y="1950.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.28%)</title><rect x="14.9" y="1923.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.9" y="1934.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.07%)</title><rect x="17.4" y="1907.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.4" y="1918.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.07%)</title><rect x="17.4" y="1891.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.4" y="1902.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.07%)</title><rect x="17.4" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="20.4" y="1886.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.07%)</title><rect x="17.4" y="1859.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="20.4" y="1870.0"></text>
</g>
<g>
<title>CompilationPolicy::is_compilation_enabled() (1 samples, 0.07%)</title><rect x="17.4" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="20.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.pausePartitions (1 samples, 0.07%)</title><rect x="18.2" y="2003.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.2" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsPause (1 samples, 0.07%)</title><rect x="18.2" y="1987.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.2" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="18.2" y="1971.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.2" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="18.2" y="1955.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.2" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="18.2" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="18.2" y="1923.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (1 samples, 0.07%)</title><rect x="18.2" y="1907.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="18.2" y="1891.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.2" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.resumePartitions (1 samples, 0.07%)</title><rect x="19.0" y="2003.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.0" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.partitionsNeedsResume (1 samples, 0.07%)</title><rect x="19.0" y="1987.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.0" y="1998.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="19.0" y="1971.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.0" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="19.0" y="1955.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.0" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="19.0" y="1939.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.0" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="19.0" y="1923.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.0" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="19.0" y="1907.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="19.0" y="1891.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.0" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="19.8" y="2003.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.8" y="2014.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (206 samples, 14.28%)</title><rect x="20.6" y="2003.0" width="168.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="23.6" y="2014.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$$Lambda$247/1090373150.accept (205 samples, 14.21%)</title><rect x="20.6" y="1987.0" width="167.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.6" y="1998.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.lambda$pollOnce$38 (205 samples, 14.21%)</title><rect x="20.6" y="1971.0" width="167.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.6" y="1982.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContext.addRequest (168 samples, 11.64%)</title><rect x="20.6" y="1955.0" width="137.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.6" y="1966.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionProcessor.addTask (168 samples, 11.64%)</title><rect x="20.6" y="1939.0" width="137.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="23.6" y="1950.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.putTask (168 samples, 11.64%)</title><rect x="20.6" y="1923.0" width="137.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="23.6" y="1934.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (168 samples, 11.64%)</title><rect x="20.6" y="1907.0" width="137.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.6" y="1918.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (168 samples, 11.64%)</title><rect x="20.6" y="1891.0" width="137.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="23.6" y="1902.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (136 samples, 9.42%)</title><rect x="44.3" y="1875.0" width="111.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.3" y="1886.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (118 samples, 8.18%)</title><rect x="44.3" y="1859.0" width="96.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.3" y="1870.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (118 samples, 8.18%)</title><rect x="44.3" y="1843.0" width="96.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.3" y="1854.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (118 samples, 8.18%)</title><rect x="44.3" y="1827.0" width="96.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.3" y="1838.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (118 samples, 8.18%)</title><rect x="44.3" y="1811.0" width="96.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="47.3" y="1822.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (118 samples, 8.18%)</title><rect x="44.3" y="1795.0" width="96.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.3" y="1806.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (68 samples, 4.71%)</title><rect x="85.2" y="1779.0" width="55.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.2" y="1790.0">sun/m..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.07%)</title><rect x="86.9" y="1763.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="89.9" y="1774.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.07%)</title><rect x="87.7" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="90.7" y="1774.0"></text>
</g>
<g>
<title>Unsafe_Unpark (60 samples, 4.16%)</title><rect x="88.5" y="1763.0" width="49.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="91.5" y="1774.0">Unsaf..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.21%)</title><rect x="89.3" y="1747.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="92.3" y="1758.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.14%)</title><rect x="91.8" y="1747.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="94.8" y="1758.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.14%)</title><rect x="93.4" y="1747.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="96.4" y="1758.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 2.84%)</title><rect x="95.0" y="1747.0" width="33.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="98.0" y="1758.0">__..</text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 0.76%)</title><rect x="128.6" y="1747.0" width="9.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="131.6" y="1758.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 0.21%)</title><rect x="137.6" y="1763.0" width="2.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="140.6" y="1774.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.07%)</title><rect x="140.0" y="1763.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="143.0" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 1.25%)</title><rect x="140.8" y="1859.0" width="14.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="143.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.25%)</title><rect x="140.8" y="1843.0" width="14.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.25%)</title><rect x="140.8" y="1827.0" width="14.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="143.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.25%)</title><rect x="140.8" y="1811.0" width="14.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="143.8" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.21%)</title><rect x="155.6" y="1875.0" width="2.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="158.6" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/PartitionContexts.get (2 samples, 0.14%)</title><rect x="158.0" y="1955.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.0" y="1966.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.14%)</title><rect x="158.0" y="1939.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="161.0" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.14%)</title><rect x="158.0" y="1923.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="161.0" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/TaskRequest.&lt;init&gt; (35 samples, 2.43%)</title><rect x="159.6" y="1955.0" width="28.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="162.6" y="1966.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (35 samples, 2.43%)</title><rect x="159.6" y="1939.0" width="28.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.6" y="1950.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (19 samples, 1.32%)</title><rect x="171.9" y="1923.0" width="15.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="174.9" y="1934.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (12 samples, 0.83%)</title><rect x="173.5" y="1907.0" width="9.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.5" y="1918.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (12 samples, 0.83%)</title><rect x="173.5" y="1891.0" width="9.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="176.5" y="1902.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (12 samples, 0.83%)</title><rect x="173.5" y="1875.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="176.5" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="177.6" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="180.6" y="1870.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.07%)</title><rect x="177.6" y="1843.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="180.6" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.07%)</title><rect x="177.6" y="1827.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="180.6" y="1838.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.07%)</title><rect x="177.6" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="180.6" y="1822.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.07%)</title><rect x="177.6" y="1795.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="180.6" y="1806.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.07%)</title><rect x="177.6" y="1779.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="180.6" y="1790.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.42%)</title><rect x="178.5" y="1859.0" width="4.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="181.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.35%)</title><rect x="183.4" y="1907.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.4" y="1918.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="187.4" y="1923.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="190.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="188.3" y="1987.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="191.3" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="188.3" y="1971.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="191.3" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="188.3" y="1955.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.07%)</title><rect x="188.3" y="1939.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.3" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.07%)</title><rect x="188.3" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="191.3" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="188.3" y="1907.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="191.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 3.81%)</title><rect x="189.1" y="2003.0" width="45.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="192.1" y="2014.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (54 samples, 3.74%)</title><rect x="189.1" y="1987.0" width="44.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="192.1" y="1998.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (28 samples, 1.94%)</title><rect x="189.1" y="1971.0" width="22.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.1" y="1982.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.14%)</title><rect x="189.1" y="1955.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.1" y="1966.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.07%)</title><rect x="189.1" y="1939.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="192.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.07%)</title><rect x="189.9" y="1939.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="192.9" y="1950.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.07%)</title><rect x="189.9" y="1923.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="192.9" y="1934.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.07%)</title><rect x="189.9" y="1907.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="192.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (26 samples, 1.80%)</title><rect x="190.7" y="1955.0" width="21.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="193.7" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (26 samples, 1.80%)</title><rect x="190.7" y="1939.0" width="21.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="193.7" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (23 samples, 1.59%)</title><rect x="190.7" y="1923.0" width="18.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="193.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (23 samples, 1.59%)</title><rect x="190.7" y="1907.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.69%)</title><rect x="192.4" y="1891.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.07%)</title><rect x="192.4" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="195.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.07%)</title><rect x="192.4" y="1859.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="192.4" y="1843.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="195.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="192.4" y="1827.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="192.4" y="1811.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.07%)</title><rect x="192.4" y="1795.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="195.4" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.07%)</title><rect x="192.4" y="1779.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.4" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="192.4" y="1763.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.07%)</title><rect x="192.4" y="1747.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.4" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.07%)</title><rect x="192.4" y="1731.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.28%)</title><rect x="193.2" y="1875.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="196.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.28%)</title><rect x="193.2" y="1859.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.2" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.28%)</title><rect x="193.2" y="1843.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.2" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.28%)</title><rect x="193.2" y="1827.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.2" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.28%)</title><rect x="193.2" y="1811.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.2" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.28%)</title><rect x="193.2" y="1795.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="196.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.28%)</title><rect x="193.2" y="1779.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="196.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.35%)</title><rect x="196.4" y="1875.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.35%)</title><rect x="196.4" y="1859.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="199.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.ensureNoneRemaining (5 samples, 0.35%)</title><rect x="196.4" y="1843.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (11 samples, 0.76%)</title><rect x="200.5" y="1891.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.07%)</title><rect x="200.5" y="1875.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.69%)</title><rect x="201.4" y="1875.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.42%)</title><rect x="203.8" y="1859.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.8" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.42%)</title><rect x="203.8" y="1843.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="206.8" y="1854.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.28%)</title><rect x="205.4" y="1827.0" width="3.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="208.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.07%)</title><rect x="208.7" y="1859.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="211.7" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.07%)</title><rect x="208.7" y="1843.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.07%)</title><rect x="209.5" y="1923.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.07%)</title><rect x="209.5" y="1907.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.07%)</title><rect x="209.5" y="1891.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="212.5" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="209.5" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.5" y="1886.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="209.5" y="1859.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="212.5" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.07%)</title><rect x="210.3" y="1923.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.07%)</title><rect x="210.3" y="1907.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.07%)</title><rect x="210.3" y="1891.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.3" y="1902.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="210.3" y="1875.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="213.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.07%)</title><rect x="210.3" y="1859.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.07%)</title><rect x="210.3" y="1843.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="213.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.07%)</title><rect x="210.3" y="1827.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.07%)</title><rect x="211.2" y="1923.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="214.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (14 samples, 0.97%)</title><rect x="212.0" y="1971.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="215.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (12 samples, 0.83%)</title><rect x="212.0" y="1955.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (10 samples, 0.69%)</title><rect x="212.0" y="1939.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.0" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.14%)</title><rect x="213.6" y="1923.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$209/266008856.accept (2 samples, 0.14%)</title><rect x="213.6" y="1907.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.07%)</title><rect x="214.4" y="1891.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="217.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.07%)</title><rect x="214.4" y="1875.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.07%)</title><rect x="214.4" y="1859.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$211/1666848816.apply (1 samples, 0.07%)</title><rect x="214.4" y="1843.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="217.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.07%)</title><rect x="214.4" y="1827.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.4" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="215.3" y="1923.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.3" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="215.3" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="215.3" y="1891.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="215.3" y="1875.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.07%)</title><rect x="215.3" y="1859.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.07%)</title><rect x="215.3" y="1843.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.3" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.07%)</title><rect x="215.3" y="1827.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.3" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.07%)</title><rect x="215.3" y="1811.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="218.3" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.07%)</title><rect x="215.3" y="1795.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.3" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.07%)</title><rect x="216.1" y="1923.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.07%)</title><rect x="216.1" y="1907.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.1" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="216.1" y="1891.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="216.1" y="1875.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="216.1" y="1859.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="219.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="216.1" y="1843.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.1" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="216.1" y="1827.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.07%)</title><rect x="216.1" y="1811.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.1" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$220/1364608936.get (1 samples, 0.07%)</title><rect x="216.1" y="1795.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.1" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (3 samples, 0.21%)</title><rect x="216.9" y="1923.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.9" y="1934.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (3 samples, 0.21%)</title><rect x="216.9" y="1907.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.9" y="1918.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (2 samples, 0.14%)</title><rect x="217.7" y="1891.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.7" y="1902.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.14%)</title><rect x="217.7" y="1875.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="220.7" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.14%)</title><rect x="217.7" y="1859.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.7" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.14%)</title><rect x="217.7" y="1843.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.7" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="217.7" y="1827.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="220.7" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.07%)</title><rect x="218.5" y="1827.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.5" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.07%)</title><rect x="219.3" y="1923.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.3" y="1934.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="219.3" y="1907.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="222.3" y="1918.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="219.3" y="1891.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="222.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (2 samples, 0.14%)</title><rect x="220.2" y="1939.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (2 samples, 0.14%)</title><rect x="220.2" y="1923.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.14%)</title><rect x="220.2" y="1907.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="223.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.14%)</title><rect x="220.2" y="1891.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.2" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (2 samples, 0.14%)</title><rect x="220.2" y="1875.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="223.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.14%)</title><rect x="220.2" y="1859.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.14%)</title><rect x="220.2" y="1843.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="223.2" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (2 samples, 0.14%)</title><rect x="220.2" y="1827.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="223.2" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (2 samples, 0.14%)</title><rect x="220.2" y="1811.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.2" y="1822.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (2 samples, 0.14%)</title><rect x="220.2" y="1795.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.2" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (2 samples, 0.14%)</title><rect x="220.2" y="1779.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="223.2" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.14%)</title><rect x="221.8" y="1955.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="224.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.07%)</title><rect x="221.8" y="1939.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="224.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.07%)</title><rect x="221.8" y="1923.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="224.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.maybeUpdateSubscriptionMetadata (1 samples, 0.07%)</title><rect x="222.6" y="1939.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.07%)</title><rect x="222.6" y="1923.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.21%)</title><rect x="223.4" y="1971.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.21%)</title><rect x="223.4" y="1955.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.07%)</title><rect x="223.4" y="1939.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.07%)</title><rect x="223.4" y="1923.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.07%)</title><rect x="223.4" y="1907.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getInt (1 samples, 0.07%)</title><rect x="223.4" y="1891.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.get (1 samples, 0.07%)</title><rect x="223.4" y="1875.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getFieldOrDefault (1 samples, 0.07%)</title><rect x="223.4" y="1859.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.14%)</title><rect x="224.2" y="1939.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="227.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.14%)</title><rect x="224.2" y="1923.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.07%)</title><rect x="224.2" y="1907.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.07%)</title><rect x="224.2" y="1891.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.2" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.07%)</title><rect x="224.2" y="1875.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.07%)</title><rect x="224.2" y="1859.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.2" y="1870.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.07%)</title><rect x="224.2" y="1843.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.2" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.07%)</title><rect x="224.2" y="1827.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.2" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.writerCleanup (1 samples, 0.07%)</title><rect x="224.2" y="1811.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="227.2" y="1822.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.07%)</title><rect x="224.2" y="1795.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="227.2" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.07%)</title><rect x="225.1" y="1907.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.07%)</title><rect x="225.1" y="1891.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.07%)</title><rect x="225.1" y="1875.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.07%)</title><rect x="225.1" y="1859.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.07%)</title><rect x="225.1" y="1843.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.1" y="1854.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.07%)</title><rect x="225.1" y="1827.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.1" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="225.1" y="1811.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="228.1" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.49%)</title><rect x="225.9" y="1971.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (7 samples, 0.49%)</title><rect x="225.9" y="1955.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.9" y="1966.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="225.9" y="1939.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="228.9" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="225.9" y="1923.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="228.9" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="225.9" y="1907.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.07%)</title><rect x="226.7" y="1939.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.7" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.07%)</title><rect x="226.7" y="1923.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="229.7" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.07%)</title><rect x="226.7" y="1907.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.07%)</title><rect x="226.7" y="1891.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.28%)</title><rect x="227.5" y="1939.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="230.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.14%)</title><rect x="227.5" y="1923.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="230.5" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.14%)</title><rect x="227.5" y="1907.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.5" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="227.5" y="1891.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.5" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.07%)</title><rect x="227.5" y="1875.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.5" y="1886.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.07%)</title><rect x="227.5" y="1859.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="230.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="227.5" y="1843.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.5" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="227.5" y="1827.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="230.5" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="228.3" y="1891.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.14%)</title><rect x="229.2" y="1923.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.07%)</title><rect x="230.0" y="1907.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.0" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.07%)</title><rect x="230.0" y="1891.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.07%)</title><rect x="230.0" y="1875.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.07%)</title><rect x="230.0" y="1859.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.0" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.07%)</title><rect x="230.0" y="1843.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.0" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="230.0" y="1827.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.0" y="1838.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.07%)</title><rect x="230.0" y="1811.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.0" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.07%)</title><rect x="230.0" y="1795.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.0" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.07%)</title><rect x="230.0" y="1779.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.0" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$242/452536756.test (1 samples, 0.07%)</title><rect x="230.0" y="1763.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.0" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.07%)</title><rect x="230.0" y="1747.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.0" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$241/1668146827.test (1 samples, 0.07%)</title><rect x="230.0" y="1731.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="233.0" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$6 (1 samples, 0.07%)</title><rect x="230.0" y="1715.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.0" y="1726.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.07%)</title><rect x="230.0" y="1699.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.0" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.07%)</title><rect x="230.0" y="1683.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.0" y="1694.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="230.0" y="1667.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.0" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.07%)</title><rect x="230.0" y="1651.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.0" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.07%)</title><rect x="230.8" y="1939.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.07%)</title><rect x="230.8" y="1923.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.07%)</title><rect x="230.8" y="1907.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.07%)</title><rect x="230.8" y="1891.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="233.8" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.07%)</title><rect x="230.8" y="1875.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.8" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.07%)</title><rect x="230.8" y="1859.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.07%)</title><rect x="230.8" y="1843.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="233.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.07%)</title><rect x="231.6" y="1971.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="234.6" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="231.6" y="1955.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="231.6" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="234.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="231.6" y="1923.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.6" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="231.6" y="1907.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="234.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.07%)</title><rect x="232.4" y="1971.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.4" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="232.4" y="1955.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="232.4" y="1939.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.07%)</title><rect x="232.4" y="1923.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="232.4" y="1907.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.07%)</title><rect x="233.2" y="1987.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.2" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="233.2" y="1971.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.2" y="1982.0"></text>
</g>
<g>
<title>java/lang/Thread.run (682 samples, 47.26%)</title><rect x="234.1" y="2035.0" width="557.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.1" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (682 samples, 47.26%)</title><rect x="234.1" y="2019.0" width="557.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.1" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (682 samples, 47.26%)</title><rect x="234.1" y="2003.0" width="557.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.1" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit$$Lambda$261/1293035696.run (451 samples, 31.25%)</title><rect x="238.1" y="1987.0" width="368.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.1" y="1998.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.lambda$putTask$49 (451 samples, 31.25%)</title><rect x="238.1" y="1971.0" width="368.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.1" y="1982.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (450 samples, 31.19%)</title><rect x="239.0" y="1955.0" width="368.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.0" y="1966.0">com/linecorp/decaton/processor/runtime/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.scheduleThenProcess (443 samples, 30.70%)</title><rect x="239.0" y="1939.0" width="362.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.0" y="1950.0">com/linecorp/decaton/processor/runtime/ProcessPip..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="247.1" y="1923.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="250.1" y="1934.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="247.1" y="1907.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="250.1" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.extract (143 samples, 9.91%)</title><rect x="248.0" y="1923.0" width="116.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.0" y="1934.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$41/715378067.extract (143 samples, 9.91%)</title><rect x="248.0" y="1907.0" width="116.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.0" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (143 samples, 9.91%)</title><rect x="248.0" y="1891.0" width="116.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.0" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (143 samples, 9.91%)</title><rect x="248.0" y="1875.0" width="116.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.0" y="1886.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (143 samples, 9.91%)</title><rect x="248.0" y="1859.0" width="116.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="251.0" y="1870.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (143 samples, 9.91%)</title><rect x="248.0" y="1843.0" width="116.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.0" y="1854.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (52 samples, 3.60%)</title><rect x="248.0" y="1827.0" width="42.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="251.0" y="1838.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (26 samples, 1.80%)</title><rect x="248.0" y="1811.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.0" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (20 samples, 1.39%)</title><rect x="248.0" y="1795.0" width="16.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.0" y="1806.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="253.7" y="1779.0" width="0.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="256.7" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="253.7" y="1763.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="256.7" y="1774.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="254.5" y="1779.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="257.5" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.35%)</title><rect x="257.8" y="1779.0" width="4.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="260.8" y="1790.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.35%)</title><rect x="257.8" y="1763.0" width="4.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="260.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.14%)</title><rect x="261.9" y="1779.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.14%)</title><rect x="261.9" y="1763.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.9" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.14%)</title><rect x="261.9" y="1747.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.9" y="1758.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="263.5" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="266.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (6 samples, 0.42%)</title><rect x="264.3" y="1795.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.21%)</title><rect x="264.3" y="1779.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.21%)</title><rect x="266.8" y="1779.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.8" y="1790.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (3 samples, 0.21%)</title><rect x="266.8" y="1763.0" width="2.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="269.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 1.80%)</title><rect x="269.2" y="1811.0" width="21.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="272.2" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (3 samples, 0.21%)</title><rect x="269.2" y="1795.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="272.2" y="1806.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="270.9" y="1779.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (23 samples, 1.59%)</title><rect x="271.7" y="1795.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.21%)</title><rect x="273.3" y="1779.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.14%)</title><rect x="274.1" y="1763.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (13 samples, 0.90%)</title><rect x="275.8" y="1779.0" width="10.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (13 samples, 0.90%)</title><rect x="275.8" y="1763.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.07%)</title><rect x="275.8" y="1747.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.8" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="275.8" y="1731.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="278.8" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="275.8" y="1715.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="278.8" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="275.8" y="1699.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="278.8" y="1710.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="275.8" y="1683.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="278.8" y="1694.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.07%)</title><rect x="275.8" y="1667.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="278.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (12 samples, 0.83%)</title><rect x="276.6" y="1747.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.35%)</title><rect x="286.4" y="1779.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.07%)</title><rect x="289.7" y="1763.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.7" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="289.7" y="1747.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="292.7" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="289.7" y="1731.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="292.7" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="289.7" y="1715.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="292.7" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="289.7" y="1699.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="292.7" y="1710.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="289.7" y="1683.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="292.7" y="1694.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.07%)</title><rect x="289.7" y="1667.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="292.7" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (84 samples, 5.82%)</title><rect x="290.5" y="1827.0" width="68.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.5" y="1838.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.35%)</title><rect x="290.5" y="1811.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="293.5" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.35%)</title><rect x="290.5" y="1795.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.5" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.21%)</title><rect x="290.5" y="1779.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="293.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (3 samples, 0.21%)</title><rect x="290.5" y="1763.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 0.14%)</title><rect x="292.9" y="1779.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.28%)</title><rect x="294.6" y="1811.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="297.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.28%)</title><rect x="294.6" y="1795.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.6" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (1 samples, 0.07%)</title><rect x="295.4" y="1779.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.14%)</title><rect x="296.2" y="1779.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.76%)</title><rect x="297.8" y="1811.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.49%)</title><rect x="300.3" y="1795.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.49%)</title><rect x="300.3" y="1779.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="303.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.42%)</title><rect x="301.1" y="1763.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.1" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.14%)</title><rect x="302.8" y="1747.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="305.8" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.14%)</title><rect x="302.8" y="1731.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="305.8" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.14%)</title><rect x="302.8" y="1715.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="305.8" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="303.6" y="1699.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="306.6" y="1710.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.07%)</title><rect x="303.6" y="1683.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="306.6" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="304.4" y="1747.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="307.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.07%)</title><rect x="306.0" y="1795.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="309.0" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.42%)</title><rect x="306.8" y="1811.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="309.8" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.42%)</title><rect x="306.8" y="1795.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="309.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="308.5" y="1779.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="311.5" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="308.5" y="1763.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="311.5" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="308.5" y="1747.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="311.5" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.07%)</title><rect x="308.5" y="1731.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="311.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.21%)</title><rect x="309.3" y="1779.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.21%)</title><rect x="309.3" y="1763.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.21%)</title><rect x="309.3" y="1747.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (58 samples, 4.02%)</title><rect x="311.7" y="1811.0" width="47.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="314.7" y="1822.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.04%)</title><rect x="311.7" y="1795.0" width="12.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.14%)</title><rect x="315.0" y="1779.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="318.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.28%)</title><rect x="316.7" y="1779.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.28%)</title><rect x="316.7" y="1763.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.28%)</title><rect x="316.7" y="1747.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="319.9" y="1779.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.9" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="319.9" y="1763.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.28%)</title><rect x="320.7" y="1779.0" width="3.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (43 samples, 2.98%)</title><rect x="324.0" y="1795.0" width="35.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.0" y="1806.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (42 samples, 2.91%)</title><rect x="324.8" y="1779.0" width="34.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.8" y="1790.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (42 samples, 2.91%)</title><rect x="324.8" y="1763.0" width="34.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.8" y="1774.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.04%)</title><rect x="332.2" y="1747.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="335.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.21%)</title><rect x="337.1" y="1731.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.14%)</title><rect x="339.5" y="1731.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="342.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.14%)</title><rect x="339.5" y="1715.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.14%)</title><rect x="339.5" y="1699.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.07%)</title><rect x="340.4" y="1683.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="343.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.07%)</title><rect x="341.2" y="1731.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="344.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.07%)</title><rect x="341.2" y="1715.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="344.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.21%)</title><rect x="342.0" y="1731.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.0" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.42%)</title><rect x="344.5" y="1747.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.42%)</title><rect x="344.5" y="1731.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="347.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.42%)</title><rect x="344.5" y="1715.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="347.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.42%)</title><rect x="344.5" y="1699.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.5" y="1710.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.42%)</title><rect x="344.5" y="1683.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.42%)</title><rect x="349.4" y="1747.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="352.4" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.42%)</title><rect x="349.4" y="1731.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="352.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.42%)</title><rect x="349.4" y="1715.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.42%)</title><rect x="349.4" y="1699.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="352.4" y="1710.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.42%)</title><rect x="349.4" y="1683.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="352.4" y="1694.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.42%)</title><rect x="349.4" y="1667.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.4" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (2 samples, 0.14%)</title><rect x="352.6" y="1651.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.6" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.42%)</title><rect x="354.3" y="1747.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="357.3" y="1758.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.42%)</title><rect x="354.3" y="1731.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="357.3" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.42%)</title><rect x="354.3" y="1715.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="357.3" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="358.4" y="1699.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="361.4" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.07%)</title><rect x="358.4" y="1683.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="361.4" y="1694.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.07%)</title><rect x="358.4" y="1667.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="361.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.49%)</title><rect x="359.2" y="1827.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.2" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.49%)</title><rect x="359.2" y="1811.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.49%)</title><rect x="359.2" y="1795.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="362.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="359.2" y="1779.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="362.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.07%)</title><rect x="360.0" y="1779.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (3 samples, 0.21%)</title><rect x="360.8" y="1779.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="363.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.14%)</title><rect x="363.3" y="1779.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="366.3" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.14%)</title><rect x="363.3" y="1763.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="366.3" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (266 samples, 18.43%)</title><rect x="364.9" y="1923.0" width="217.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.9" y="1934.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.close (47 samples, 3.26%)</title><rect x="366.5" y="1907.0" width="38.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="369.5" y="1918.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (47 samples, 3.26%)</title><rect x="366.5" y="1891.0" width="38.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="369.5" y="1902.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (43 samples, 2.98%)</title><rect x="369.8" y="1875.0" width="35.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="372.8" y="1886.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.21%)</title><rect x="374.7" y="1859.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="377.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.21%)</title><rect x="374.7" y="1843.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="377.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.21%)</title><rect x="374.7" y="1827.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="377.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.21%)</title><rect x="374.7" y="1811.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.21%)</title><rect x="374.7" y="1795.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="377.7" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.14%)</title><rect x="375.5" y="1779.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="378.5" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (34 samples, 2.36%)</title><rect x="377.2" y="1859.0" width="27.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="380.2" y="1870.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.62%)</title><rect x="397.6" y="1843.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="400.6" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 0.62%)</title><rect x="397.6" y="1827.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="400.6" y="1838.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.28%)</title><rect x="401.7" y="1811.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="404.7" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.28%)</title><rect x="405.0" y="1907.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.0" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.21%)</title><rect x="405.8" y="1891.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.21%)</title><rect x="405.8" y="1875.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.8" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="407.4" y="1859.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="410.4" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="407.4" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="410.4" y="1854.0"></text>
</g>
<g>
<title>post_allocation_notify(KlassHandle, oopDesc*, int) (1 samples, 0.07%)</title><rect x="407.4" y="1827.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="410.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.loggingContext (141 samples, 9.77%)</title><rect x="408.2" y="1907.0" width="115.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="411.2" y="1918.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (139 samples, 9.63%)</title><rect x="408.2" y="1891.0" width="113.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.2" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (48 samples, 3.33%)</title><rect x="411.5" y="1875.0" width="39.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="414.5" y="1886.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="411.5" y="1859.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.5" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.07%)</title><rect x="411.5" y="1843.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="414.5" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="411.5" y="1827.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="414.5" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="411.5" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="414.5" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="411.5" y="1795.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="414.5" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="411.5" y="1779.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="414.5" y="1790.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.07%)</title><rect x="411.5" y="1763.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="414.5" y="1774.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (46 samples, 3.19%)</title><rect x="412.3" y="1859.0" width="37.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.3" y="1870.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (33 samples, 2.29%)</title><rect x="417.2" y="1843.0" width="27.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="420.2" y="1854.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (22 samples, 1.52%)</title><rect x="423.0" y="1827.0" width="17.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="426.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (22 samples, 1.52%)</title><rect x="423.0" y="1811.0" width="17.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.0" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (22 samples, 1.52%)</title><rect x="423.0" y="1795.0" width="17.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="426.0" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.55%)</title><rect x="430.3" y="1779.0" width="6.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="433.3" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.21%)</title><rect x="430.3" y="1763.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="433.3" y="1774.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.07%)</title><rect x="430.3" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="433.3" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.14%)</title><rect x="431.1" y="1747.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="434.1" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.14%)</title><rect x="431.1" y="1731.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="434.1" y="1742.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.07%)</title><rect x="431.1" y="1715.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="434.1" y="1726.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.07%)</title><rect x="432.0" y="1715.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="435.0" y="1726.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (2 samples, 0.14%)</title><rect x="432.8" y="1763.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="435.8" y="1774.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.21%)</title><rect x="434.4" y="1763.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="437.4" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="434.4" y="1747.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="437.4" y="1758.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="434.4" y="1731.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="437.4" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (2 samples, 0.14%)</title><rect x="435.2" y="1747.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="438.2" y="1758.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.35%)</title><rect x="436.9" y="1779.0" width="4.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="439.9" y="1790.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.14%)</title><rect x="440.9" y="1827.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.9" y="1838.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="442.6" y="1827.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="445.6" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="443.4" y="1827.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="446.4" y="1838.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.07%)</title><rect x="444.2" y="1843.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="447.2" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.42%)</title><rect x="445.0" y="1843.0" width="4.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="448.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.07%)</title><rect x="449.9" y="1859.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="452.9" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="449.9" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="452.9" y="1854.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="449.9" y="1827.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="452.9" y="1838.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.07%)</title><rect x="449.9" y="1811.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="452.9" y="1822.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (5 samples, 0.35%)</title><rect x="450.8" y="1875.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="453.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.07%)</title><rect x="450.8" y="1859.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="453.8" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="450.8" y="1843.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="453.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.28%)</title><rect x="451.6" y="1859.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.6" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.28%)</title><rect x="451.6" y="1843.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="454.6" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="454.0" y="1827.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="457.0" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="454.0" y="1811.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="457.0" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="454.0" y="1795.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="457.0" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="454.0" y="1779.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="457.0" y="1790.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.07%)</title><rect x="454.0" y="1763.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="457.0" y="1774.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (82 samples, 5.68%)</title><rect x="454.9" y="1875.0" width="67.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.9" y="1886.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (81 samples, 5.61%)</title><rect x="455.7" y="1859.0" width="66.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.7" y="1870.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.49%)</title><rect x="455.7" y="1843.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="458.7" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.49%)</title><rect x="455.7" y="1827.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.49%)</title><rect x="455.7" y="1811.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.49%)</title><rect x="455.7" y="1795.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.7" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.07%)</title><rect x="460.6" y="1779.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="463.6" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="460.6" y="1763.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.6" y="1774.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (74 samples, 5.13%)</title><rect x="461.4" y="1843.0" width="60.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.4" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (67 samples, 4.64%)</title><rect x="467.1" y="1827.0" width="54.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="470.1" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (33 samples, 2.29%)</title><rect x="494.9" y="1811.0" width="27.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.9" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.14%)</title><rect x="509.6" y="1795.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="512.6" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.69%)</title><rect x="511.3" y="1795.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.3" y="1806.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.21%)</title><rect x="519.5" y="1795.0" width="2.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="522.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.07%)</title><rect x="521.9" y="1891.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="524.9" y="1902.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="522.7" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="525.7" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.push (51 samples, 3.53%)</title><rect x="523.5" y="1907.0" width="41.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="526.5" y="1918.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/LoggingContext.&lt;init&gt; (2 samples, 0.14%)</title><rect x="523.5" y="1891.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="526.5" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.pushDownStream (49 samples, 3.40%)</title><rect x="525.2" y="1891.0" width="40.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="528.2" y="1902.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$199/168951277.process (15 samples, 1.04%)</title><rect x="526.8" y="1875.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="529.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$1 (15 samples, 1.04%)</title><rect x="526.8" y="1859.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="529.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (11 samples, 0.76%)</title><rect x="530.1" y="1843.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.1" y="1854.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="534.2" y="1827.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="537.2" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.07%)</title><rect x="534.2" y="1811.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="537.2" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.07%)</title><rect x="534.2" y="1795.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="537.2" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.07%)</title><rect x="534.2" y="1779.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="537.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.07%)</title><rect x="534.2" y="1763.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="537.2" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.07%)</title><rect x="534.2" y="1747.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="537.2" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.28%)</title><rect x="535.0" y="1827.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="538.0" y="1838.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="535.8" y="1811.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="538.8" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.14%)</title><rect x="536.6" y="1811.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="539.6" y="1822.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="537.4" y="1795.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="540.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (1 samples, 0.07%)</title><rect x="538.3" y="1827.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="541.3" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/1259818259.complete (1 samples, 0.07%)</title><rect x="539.1" y="1875.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl.&lt;init&gt; (8 samples, 0.55%)</title><rect x="539.9" y="1875.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="542.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 0.55%)</title><rect x="539.9" y="1859.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="542.9" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/306123060.linkToTargetMethod (8 samples, 0.55%)</title><rect x="546.4" y="1875.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="549.4" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/198761306.invokeStatic_L_L (8 samples, 0.55%)</title><rect x="546.4" y="1859.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="549.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/1259818259.get$Lambda (8 samples, 0.55%)</title><rect x="546.4" y="1843.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.4" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessingContextImpl$$Lambda$269/1259818259.&lt;init&gt; (6 samples, 0.42%)</title><rect x="548.1" y="1827.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="551.1" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.14%)</title><rect x="553.0" y="1875.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="556.0" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.28%)</title><rect x="554.6" y="1875.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="557.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.21%)</title><rect x="555.4" y="1859.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="558.4" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.21%)</title><rect x="555.4" y="1843.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="558.4" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="557.9" y="1875.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="560.9" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.55%)</title><rect x="558.7" y="1875.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="561.7" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="562.0" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="565.0" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="562.0" y="1843.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="565.0" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="562.0" y="1827.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="565.0" y="1838.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.07%)</title><rect x="562.0" y="1811.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="565.0" y="1822.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.07%)</title><rect x="562.8" y="1859.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="565.8" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="562.8" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="565.8" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="562.8" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="565.8" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="562.8" y="1811.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="565.8" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.07%)</title><rect x="562.8" y="1795.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="565.8" y="1806.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.07%)</title><rect x="562.8" y="1779.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="565.8" y="1790.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.14%)</title><rect x="563.6" y="1859.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="566.6" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="565.2" y="1907.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="568.2" y="1918.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="565.2" y="1891.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="568.2" y="1902.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="565.2" y="1875.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="568.2" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="565.2" y="1859.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="568.2" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="565.2" y="1843.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="568.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (1 samples, 0.07%)</title><rect x="566.1" y="1907.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="569.1" y="1918.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="566.1" y="1891.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="569.1" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="566.1" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="569.1" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="566.1" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="569.1" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.32%)</title><rect x="566.9" y="1907.0" width="15.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="569.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 1.32%)</title><rect x="566.9" y="1891.0" width="15.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="569.9" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.62%)</title><rect x="569.3" y="1875.0" width="7.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="572.3" y="1886.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.55%)</title><rect x="570.2" y="1859.0" width="6.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="573.2" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.49%)</title><rect x="576.7" y="1875.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="579.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1372438479.accept (7 samples, 0.49%)</title><rect x="576.7" y="1859.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="579.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (7 samples, 0.49%)</title><rect x="576.7" y="1843.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="579.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (7 samples, 0.49%)</title><rect x="576.7" y="1827.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="579.7" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (7 samples, 0.49%)</title><rect x="576.7" y="1811.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="579.7" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.create (7 samples, 0.49%)</title><rect x="576.7" y="1795.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="579.7" y="1806.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.14%)</title><rect x="580.8" y="1779.0" width="1.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="583.8" y="1790.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.14%)</title><rect x="580.8" y="1763.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="583.8" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.18%)</title><rect x="582.4" y="1923.0" width="13.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="585.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.18%)</title><rect x="582.4" y="1907.0" width="13.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="585.4" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.process (3 samples, 0.21%)</title><rect x="583.2" y="1891.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 0.90%)</title><rect x="585.7" y="1891.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="588.7" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline$$Lambda$271/1372438479.accept (13 samples, 0.90%)</title><rect x="585.7" y="1875.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="588.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessPipeline.lambda$process$23 (13 samples, 0.90%)</title><rect x="585.7" y="1859.0" width="10.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="588.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils$Timer.duration (13 samples, 0.90%)</title><rect x="585.7" y="1843.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="588.7" y="1854.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (13 samples, 0.90%)</title><rect x="585.7" y="1827.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="588.7" y="1838.0"></text>
</g>
<g>
<title>java/time/Duration.create (13 samples, 0.90%)</title><rect x="585.7" y="1811.0" width="10.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.7" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.42%)</title><rect x="596.3" y="1923.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="599.3" y="1934.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.42%)</title><rect x="596.3" y="1907.0" width="4.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="599.3" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/Utils.timer (7 samples, 0.49%)</title><rect x="601.2" y="1939.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="604.2" y="1950.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.28%)</title><rect x="603.7" y="1923.0" width="3.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="606.7" y="1934.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.28%)</title><rect x="603.7" y="1907.0" width="3.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="606.7" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorUnit.processTask (3 samples, 0.21%)</title><rect x="607.0" y="1987.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.0" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.28%)</title><rect x="609.4" y="1987.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="612.4" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.28%)</title><rect x="609.4" y="1971.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.4" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.28%)</title><rect x="609.4" y="1955.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="612.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.28%)</title><rect x="609.4" y="1939.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="612.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.07%)</title><rect x="611.9" y="1923.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="614.9" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (219 samples, 15.18%)</title><rect x="612.7" y="1987.0" width="179.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.7" y="1998.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (218 samples, 15.11%)</title><rect x="613.5" y="1971.0" width="178.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.5" y="1982.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (179 samples, 12.40%)</title><rect x="633.1" y="1955.0" width="146.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="636.1" y="1966.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 0.83%)</title><rect x="635.6" y="1939.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 0.83%)</title><rect x="635.6" y="1923.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.83%)</title><rect x="635.6" y="1907.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.6" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.83%)</title><rect x="635.6" y="1891.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.6" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (164 samples, 11.37%)</title><rect x="645.4" y="1939.0" width="134.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="648.4" y="1950.0">java/util/concurr..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (164 samples, 11.37%)</title><rect x="645.4" y="1923.0" width="134.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.4" y="1934.0">sun/misc/Unsafe.p..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.07%)</title><rect x="649.5" y="1907.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="652.5" y="1918.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (4 samples, 0.28%)</title><rect x="650.3" y="1907.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="653.3" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (148 samples, 10.26%)</title><rect x="653.6" y="1907.0" width="121.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="656.6" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.14%)</title><rect x="656.8" y="1891.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="659.8" y="1902.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.07%)</title><rect x="658.5" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="661.5" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 1.52%)</title><rect x="659.3" y="1891.0" width="18.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="662.3" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (11 samples, 0.76%)</title><rect x="665.0" y="1875.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="668.0" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.28%)</title><rect x="668.3" y="1859.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="671.3" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.14%)</title><rect x="669.9" y="1843.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="672.9" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.14%)</title><rect x="671.6" y="1859.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="674.6" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="673.2" y="1859.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="676.2" y="1870.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.21%)</title><rect x="674.0" y="1875.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="677.0" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="676.5" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="679.5" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.07%)</title><rect x="677.3" y="1891.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="680.3" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.07%)</title><rect x="678.1" y="1891.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="681.1" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.21%)</title><rect x="678.9" y="1891.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="681.9" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.42%)</title><rect x="681.4" y="1891.0" width="4.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="684.4" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (28 samples, 1.94%)</title><rect x="686.3" y="1891.0" width="22.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="689.3" y="1902.0">_..</text>
</g>
<g>
<title>__pthread_cond_wait (62 samples, 4.30%)</title><rect x="709.2" y="1891.0" width="50.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="712.2" y="1902.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.28%)</title><rect x="759.9" y="1891.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="762.9" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.07%)</title><rect x="763.1" y="1891.0" width="0.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="766.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.07%)</title><rect x="764.0" y="1891.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="767.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (8 samples, 0.55%)</title><rect x="764.8" y="1891.0" width="6.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="767.8" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.07%)</title><rect x="771.3" y="1891.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="774.3" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.14%)</title><rect x="772.1" y="1891.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="775.1" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="773.8" y="1891.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="776.8" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.21%)</title><rect x="774.6" y="1907.0" width="2.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="777.6" y="1918.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.21%)</title><rect x="777.0" y="1907.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="780.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.07%)</title><rect x="779.5" y="1955.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="782.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.07%)</title><rect x="779.5" y="1939.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="782.5" y="1950.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="779.5" y="1923.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="782.5" y="1934.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="779.5" y="1907.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="782.5" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="779.5" y="1891.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="782.5" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 0.97%)</title><rect x="780.3" y="1955.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.97%)</title><rect x="780.3" y="1939.0" width="11.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="783.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.97%)</title><rect x="780.3" y="1923.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.97%)</title><rect x="780.3" y="1907.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="783.3" y="1918.0"></text>
</g>
<g>
<title>start_thread (486 samples, 33.68%)</title><rect x="791.8" y="2035.0" width="397.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="794.8" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (486 samples, 33.68%)</title><rect x="791.8" y="2019.0" width="397.4" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="794.8" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.25%)</title><rect x="791.8" y="2003.0" width="14.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="794.8" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (1 samples, 0.07%)</title><rect x="791.8" y="1987.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="794.8" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.07%)</title><rect x="791.8" y="1971.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="794.8" y="1982.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="791.8" y="1955.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="794.8" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (17 samples, 1.18%)</title><rect x="792.6" y="1987.0" width="13.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="795.6" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.35%)</title><rect x="792.6" y="1971.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="795.6" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.14%)</title><rect x="792.6" y="1955.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="795.6" y="1966.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.21%)</title><rect x="794.2" y="1955.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="797.2" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.42%)</title><rect x="796.7" y="1971.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="799.7" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.28%)</title><rect x="796.7" y="1955.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="799.7" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.21%)</title><rect x="796.7" y="1939.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="799.7" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.21%)</title><rect x="796.7" y="1923.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="799.7" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.21%)</title><rect x="796.7" y="1907.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="799.7" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="799.1" y="1939.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="802.1" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.07%)</title><rect x="799.1" y="1923.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="802.1" y="1934.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.07%)</title><rect x="799.1" y="1907.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="802.1" y="1918.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.07%)</title><rect x="799.1" y="1891.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="802.1" y="1902.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.07%)</title><rect x="799.1" y="1875.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="802.1" y="1886.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="799.1" y="1859.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.1" y="1870.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.14%)</title><rect x="799.9" y="1955.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="802.9" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.14%)</title><rect x="799.9" y="1939.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="802.9" y="1950.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (6 samples, 0.42%)</title><rect x="801.6" y="1971.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="804.6" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (6 samples, 0.42%)</title><rect x="801.6" y="1955.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="804.6" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (4 samples, 0.28%)</title><rect x="801.6" y="1939.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="804.6" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (4 samples, 0.28%)</title><rect x="801.6" y="1923.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="804.6" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.28%)</title><rect x="801.6" y="1907.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="804.6" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (4 samples, 0.28%)</title><rect x="801.6" y="1891.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="804.6" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.21%)</title><rect x="802.4" y="1875.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="805.4" y="1886.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.07%)</title><rect x="803.2" y="1859.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="806.2" y="1870.0"></text>
</g>
<g>
<title>MemRegion::intersection(MemRegion) const (1 samples, 0.07%)</title><rect x="804.0" y="1859.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="807.0" y="1870.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.14%)</title><rect x="804.8" y="1939.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="807.8" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.14%)</title><rect x="804.8" y="1923.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="807.8" y="1934.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.07%)</title><rect x="805.7" y="1907.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="808.7" y="1918.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.07%)</title><rect x="805.7" y="1891.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="808.7" y="1902.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.07%)</title><rect x="805.7" y="1875.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="808.7" y="1886.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.07%)</title><rect x="805.7" y="1859.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="808.7" y="1870.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.07%)</title><rect x="805.7" y="1843.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="808.7" y="1854.0"></text>
</g>
<g>
<title>Assembler::locate_operand(unsigned char*, Assembler::WhichOperand) (1 samples, 0.07%)</title><rect x="805.7" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="808.7" y="1838.0"></text>
</g>
<g>
<title>JavaThread::run() (467 samples, 32.36%)</title><rect x="806.5" y="2003.0" width="381.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="809.5" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (467 samples, 32.36%)</title><rect x="806.5" y="1987.0" width="381.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="809.5" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (466 samples, 32.29%)</title><rect x="806.5" y="1971.0" width="381.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="809.5" y="1982.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (465 samples, 32.22%)</title><rect x="806.5" y="1955.0" width="380.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="809.5" y="1966.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (465 samples, 32.22%)</title><rect x="806.5" y="1939.0" width="380.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="809.5" y="1950.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (465 samples, 32.22%)</title><rect x="806.5" y="1923.0" width="380.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="809.5" y="1934.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int..</text>
</g>
<g>
<title>Compile::Code_Gen() (144 samples, 9.98%)</title><rect x="806.5" y="1907.0" width="117.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="809.5" y="1918.0">Compile::Code_..</text>
</g>
<g>
<title>Compile::Output() (5 samples, 0.35%)</title><rect x="806.5" y="1891.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="809.5" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (4 samples, 0.28%)</title><rect x="806.5" y="1875.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="809.5" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.07%)</title><rect x="808.9" y="1859.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="811.9" y="1870.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.07%)</title><rect x="808.9" y="1843.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="811.9" y="1854.0"></text>
</g>
<g>
<title>OopMap::set_narrowoop(VMRegImpl*) (1 samples, 0.07%)</title><rect x="808.9" y="1827.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="811.9" y="1838.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="809.8" y="1875.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="812.8" y="1886.0"></text>
</g>
<g>
<title>loadNNode::reloc() const (1 samples, 0.07%)</title><rect x="809.8" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="812.8" y="1870.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (9 samples, 0.62%)</title><rect x="810.6" y="1891.0" width="7.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="813.6" y="1902.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.14%)</title><rect x="811.4" y="1875.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="814.4" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="811.4" y="1859.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="814.4" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="811.4" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="814.4" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.07%)</title><rect x="812.2" y="1859.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="815.2" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="812.2" y="1843.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="815.2" y="1854.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (5 samples, 0.35%)</title><rect x="813.0" y="1875.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="816.0" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (4 samples, 0.28%)</title><rect x="813.8" y="1859.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="816.8" y="1870.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.07%)</title><rect x="817.1" y="1875.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="820.1" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.07%)</title><rect x="817.1" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="820.1" y="1870.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.07%)</title><rect x="817.1" y="1843.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="820.1" y="1854.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.76%)</title><rect x="817.9" y="1891.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="820.9" y="1902.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (11 samples, 0.76%)</title><rect x="817.9" y="1875.0" width="9.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="820.9" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (6 samples, 0.42%)</title><rect x="818.7" y="1859.0" width="5.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="821.7" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.07%)</title><rect x="823.7" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="826.7" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.07%)</title><rect x="823.7" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="826.7" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="823.7" y="1827.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="826.7" y="1838.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (1 samples, 0.07%)</title><rect x="823.7" y="1811.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="826.7" y="1822.0"></text>
</g>
<g>
<title>MachReturnNode::MachReturnNode() (1 samples, 0.07%)</title><rect x="823.7" y="1795.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="826.7" y="1806.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.21%)</title><rect x="824.5" y="1859.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="827.5" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.14%)</title><rect x="824.5" y="1843.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="827.5" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.07%)</title><rect x="824.5" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="827.5" y="1838.0"></text>
</g>
<g>
<title>TypeRawPtr::add_offset(long) const (1 samples, 0.07%)</title><rect x="825.3" y="1827.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="828.3" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="826.1" y="1843.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="829.1" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="826.1" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="829.1" y="1838.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="826.1" y="1811.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="829.1" y="1822.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.07%)</title><rect x="826.1" y="1795.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.1" y="1806.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="826.1" y="1779.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="829.1" y="1790.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="826.1" y="1763.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="829.1" y="1774.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.07%)</title><rect x="826.9" y="1891.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="829.9" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.07%)</title><rect x="826.9" y="1875.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="829.9" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.35%)</title><rect x="827.7" y="1891.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="830.7" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.35%)</title><rect x="827.7" y="1875.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="830.7" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.14%)</title><rect x="827.7" y="1859.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="830.7" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.07%)</title><rect x="828.6" y="1843.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="831.6" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (3 samples, 0.21%)</title><rect x="829.4" y="1859.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="832.4" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (113 samples, 7.83%)</title><rect x="831.8" y="1891.0" width="92.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="834.8" y="1902.0">PhaseChaiti..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="831.8" y="1875.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="834.8" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="832.6" y="1875.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="835.6" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.21%)</title><rect x="833.5" y="1875.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="836.5" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (11 samples, 0.76%)</title><rect x="835.9" y="1875.0" width="9.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="838.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="836.7" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="839.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (8 samples, 0.55%)</title><rect x="837.6" y="1859.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.6" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.07%)</title><rect x="840.0" y="1843.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="843.0" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="840.8" y="1843.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="843.8" y="1854.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="843.3" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="846.3" y="1854.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.07%)</title><rect x="844.1" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="847.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.49%)</title><rect x="844.9" y="1875.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="847.9" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="846.5" y="1859.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="849.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.28%)</title><rect x="847.4" y="1859.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="850.4" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.07%)</title><rect x="849.0" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="852.0" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="849.8" y="1843.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="852.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (13 samples, 0.90%)</title><rect x="850.6" y="1875.0" width="10.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="853.6" y="1886.0"></text>
</g>
<g>
<title>MachSpillCopyNode::MachSpillCopyNode(Node*, RegMask const&amp;, RegMask const&amp;) (1 samples, 0.07%)</title><rect x="858.0" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="861.0" y="1870.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.07%)</title><rect x="858.0" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="861.0" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.07%)</title><rect x="858.8" y="1859.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="861.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.07%)</title><rect x="859.6" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="862.6" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.07%)</title><rect x="859.6" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="862.6" y="1854.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.07%)</title><rect x="860.5" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="863.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (24 samples, 1.66%)</title><rect x="861.3" y="1875.0" width="19.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="864.3" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.14%)</title><rect x="867.8" y="1859.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="870.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="869.4" y="1859.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="872.4" y="1870.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.07%)</title><rect x="870.3" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="873.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (10 samples, 0.69%)</title><rect x="871.1" y="1859.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="874.1" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.21%)</title><rect x="876.0" y="1843.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="879.0" y="1854.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="878.4" y="1843.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="881.4" y="1854.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.07%)</title><rect x="879.3" y="1859.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="882.3" y="1870.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="880.1" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="883.1" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.07%)</title><rect x="880.9" y="1875.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="883.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.49%)</title><rect x="881.7" y="1875.0" width="5.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="884.7" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.14%)</title><rect x="885.8" y="1859.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.49%)</title><rect x="887.4" y="1875.0" width="5.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="890.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.07%)</title><rect x="892.3" y="1859.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="895.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.07%)</title><rect x="893.2" y="1875.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="896.2" y="1886.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (15 samples, 1.04%)</title><rect x="894.0" y="1875.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="897.0" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (15 samples, 1.04%)</title><rect x="894.0" y="1859.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="897.0" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (15 samples, 1.04%)</title><rect x="894.0" y="1843.0" width="12.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="897.0" y="1854.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (5 samples, 0.35%)</title><rect x="894.0" y="1827.0" width="4.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="897.0" y="1838.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (9 samples, 0.62%)</title><rect x="898.1" y="1827.0" width="7.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="901.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.07%)</title><rect x="905.4" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="908.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.28%)</title><rect x="906.2" y="1875.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="909.2" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="908.7" y="1859.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="911.7" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (6 samples, 0.42%)</title><rect x="909.5" y="1875.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.5" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.28%)</title><rect x="911.2" y="1859.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="914.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.21%)</title><rect x="914.4" y="1875.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="917.4" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.21%)</title><rect x="914.4" y="1859.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="917.4" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.62%)</title><rect x="916.9" y="1875.0" width="7.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="919.9" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.21%)</title><rect x="921.0" y="1859.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="924.0" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.07%)</title><rect x="923.4" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.4" y="1870.0"></text>
</g>
<g>
<title>Compile::Optimize() (309 samples, 21.41%)</title><rect x="924.2" y="1907.0" width="252.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="927.2" y="1918.0">Compile::Optimize()</text>
</g>
<g>
<title>CmpNode::bottom_type() const (1 samples, 0.07%)</title><rect x="924.2" y="1891.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="927.2" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.07%)</title><rect x="925.1" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="928.1" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.07%)</title><rect x="925.1" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="928.1" y="1886.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="925.9" y="1891.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="928.9" y="1902.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="925.9" y="1875.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="928.9" y="1886.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.07%)</title><rect x="925.9" y="1859.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="928.9" y="1870.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="925.9" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="928.9" y="1854.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="925.9" y="1827.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="928.9" y="1838.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="925.9" y="1811.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="928.9" y="1822.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="925.9" y="1795.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.9" y="1806.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="925.9" y="1779.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.9" y="1790.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="925.9" y="1763.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="928.9" y="1774.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="925.9" y="1747.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="928.9" y="1758.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="925.9" y="1731.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="928.9" y="1742.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="925.9" y="1715.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="928.9" y="1726.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="925.9" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="928.9" y="1710.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="925.9" y="1683.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="928.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="925.9" y="1667.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="928.9" y="1678.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="925.9" y="1651.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="928.9" y="1662.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="925.9" y="1635.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="928.9" y="1646.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="925.9" y="1619.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="928.9" y="1630.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="925.9" y="1603.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="928.9" y="1614.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="925.9" y="1587.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="928.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="925.9" y="1571.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="928.9" y="1582.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="925.9" y="1555.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="928.9" y="1566.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="925.9" y="1539.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="928.9" y="1550.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.07%)</title><rect x="925.9" y="1523.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="928.9" y="1534.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="925.9" y="1507.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="928.9" y="1518.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="925.9" y="1491.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="928.9" y="1502.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="925.9" y="1475.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="928.9" y="1486.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.07%)</title><rect x="926.7" y="1891.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="929.7" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.07%)</title><rect x="926.7" y="1875.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="929.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.07%)</title><rect x="926.7" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="929.7" y="1870.0"></text>
</g>
<g>
<title>TypePtr::empty() const (1 samples, 0.07%)</title><rect x="926.7" y="1843.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="929.7" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.35%)</title><rect x="927.5" y="1891.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.5" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.35%)</title><rect x="927.5" y="1875.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="930.5" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (5 samples, 0.35%)</title><rect x="927.5" y="1859.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="930.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.28%)</title><rect x="928.3" y="1843.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="931.3" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1827.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.3" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1811.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="931.3" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1795.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="931.3" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1779.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="931.3" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1763.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.3" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1747.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.3" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1731.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="931.3" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1715.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="931.3" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1699.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="931.3" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1683.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="931.3" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1667.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="931.3" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1651.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="931.3" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1635.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="931.3" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1619.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.3" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="928.3" y="1603.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.3" y="1614.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="928.3" y="1587.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="931.3" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="929.1" y="1827.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="932.1" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.21%)</title><rect x="929.1" y="1811.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="932.1" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1795.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="932.1" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1779.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.1" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1763.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.1" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1747.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="932.1" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1731.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.1" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1715.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="932.1" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1699.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="932.1" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1683.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.1" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1667.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.1" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1651.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="932.1" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1635.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="932.1" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1619.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="932.1" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1603.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="932.1" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1587.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="932.1" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1571.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="932.1" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1555.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="932.1" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.07%)</title><rect x="929.1" y="1539.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="932.1" y="1550.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.07%)</title><rect x="929.1" y="1523.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="932.1" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="930.0" y="1795.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="933.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="930.0" y="1779.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="933.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="930.0" y="1763.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="933.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="930.0" y="1747.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="933.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="930.0" y="1731.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="930.0" y="1715.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.14%)</title><rect x="930.0" y="1699.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1683.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="933.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1667.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="933.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1651.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1635.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1619.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="933.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1603.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="933.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1587.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="933.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1571.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="933.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1555.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1539.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="933.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1523.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1507.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1491.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1475.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1459.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="933.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1443.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="933.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1427.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="933.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1411.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="933.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1395.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1379.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="933.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1363.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1347.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1331.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1315.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1299.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1283.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="933.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1267.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="933.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1251.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="933.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1235.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1219.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1203.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="933.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1187.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="933.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1171.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="933.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1155.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1139.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="933.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1123.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1107.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="933.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1091.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="933.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1075.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1059.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="933.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1043.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="933.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1027.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.0" y="1011.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="933.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.8" y="1683.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="933.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="930.8" y="1667.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="933.8" y="1678.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="930.8" y="1651.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="933.8" y="1662.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.07%)</title><rect x="930.8" y="1635.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.8" y="1646.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.07%)</title><rect x="931.6" y="1891.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.6" y="1902.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="931.6" y="1875.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="934.6" y="1886.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="931.6" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.6" y="1870.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="931.6" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="934.6" y="1854.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.07%)</title><rect x="931.6" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="934.6" y="1838.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.14%)</title><rect x="932.4" y="1891.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="935.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.14%)</title><rect x="932.4" y="1875.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="935.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.07%)</title><rect x="933.2" y="1859.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (269 samples, 18.64%)</title><rect x="934.0" y="1891.0" width="220.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="937.0" y="1902.0">PhaseIdealLoop::build_and_opt..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="934.0" y="1875.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.0" y="1886.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="934.0" y="1859.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="937.0" y="1870.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="934.0" y="1843.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="937.0" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="934.0" y="1827.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.0" y="1838.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="934.0" y="1811.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="937.0" y="1822.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="934.0" y="1795.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="937.0" y="1806.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="934.0" y="1779.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.0" y="1790.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="934.0" y="1763.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="937.0" y="1774.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="934.0" y="1747.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.0" y="1758.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="934.0" y="1731.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="937.0" y="1742.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="934.0" y="1715.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="937.0" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="934.0" y="1699.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.0" y="1710.0"></text>
</g>
<g>
<title>PhaseIdealLoop::stride_of_possible_iv(Node*) (1 samples, 0.07%)</title><rect x="934.0" y="1683.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="937.0" y="1694.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="934.9" y="1731.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="937.9" y="1742.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="934.9" y="1715.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="937.9" y="1726.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.07%)</title><rect x="934.9" y="1699.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.9" y="1710.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.07%)</title><rect x="935.7" y="1875.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="938.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.07%)</title><rect x="935.7" y="1859.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="938.7" y="1870.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.07%)</title><rect x="935.7" y="1843.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="938.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.35%)</title><rect x="936.5" y="1875.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.5" y="1886.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.14%)</title><rect x="938.1" y="1859.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="941.1" y="1870.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.07%)</title><rect x="939.8" y="1859.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="942.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.35%)</title><rect x="940.6" y="1875.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="943.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.21%)</title><rect x="942.2" y="1859.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (242 samples, 16.77%)</title><rect x="944.7" y="1875.0" width="197.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="947.7" y="1886.0">PhaseIdealLoop::build_loop..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (240 samples, 16.63%)</title><rect x="946.3" y="1859.0" width="196.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="949.3" y="1870.0">PhaseIdealLoop::build_loop..</text>
</g>
<g>
<title>Node::unique_ctrl_out() (3 samples, 0.21%)</title><rect x="947.1" y="1843.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="950.1" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (14 samples, 0.97%)</title><rect x="949.6" y="1843.0" width="11.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (222 samples, 15.38%)</title><rect x="961.0" y="1843.0" width="181.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="964.0" y="1854.0">PhaseIdealLoop::get_lat..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.14%)</title><rect x="1116.4" y="1827.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1116.4" y="1811.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1119.4" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (28 samples, 1.94%)</title><rect x="1118.0" y="1827.0" width="22.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.0" y="1838.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.14%)</title><rect x="1140.9" y="1827.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.07%)</title><rect x="1141.8" y="1811.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.8" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.07%)</title><rect x="1142.6" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 0.35%)</title><rect x="1143.4" y="1875.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.07%)</title><rect x="1144.2" y="1859.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1144.2" y="1843.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.21%)</title><rect x="1145.0" y="1859.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.07%)</title><rect x="1145.0" y="1843.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.0" y="1854.0"></text>
</g>
<g>
<title>IdealLoopTree::is_member(IdealLoopTree const*) const (1 samples, 0.07%)</title><rect x="1145.0" y="1827.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.0" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.14%)</title><rect x="1145.8" y="1843.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.8" y="1854.0"></text>
</g>
<g>
<title>LoadNode::size_of() const (1 samples, 0.07%)</title><rect x="1145.8" y="1827.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.8" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1146.7" y="1827.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.7" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1146.7" y="1811.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.7" y="1822.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.55%)</title><rect x="1147.5" y="1875.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.42%)</title><rect x="1147.5" y="1859.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.5" y="1870.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1147.5" y="1843.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.5" y="1854.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1147.5" y="1827.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1148.3" y="1843.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.07%)</title><rect x="1148.3" y="1827.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="1838.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.07%)</title><rect x="1148.3" y="1811.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.3" y="1822.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.28%)</title><rect x="1149.1" y="1843.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.1" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1149.1" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.1" y="1838.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (3 samples, 0.21%)</title><rect x="1149.9" y="1827.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.9" y="1838.0"></text>
</g>
<g>
<title>SubNode::Value(PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1152.4" y="1859.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="1870.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.07%)</title><rect x="1153.2" y="1859.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (25 samples, 1.73%)</title><rect x="1154.0" y="1891.0" width="20.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (25 samples, 1.73%)</title><rect x="1154.0" y="1875.0" width="20.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.0" y="1886.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1154.0" y="1859.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.0" y="1870.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1154.0" y="1843.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.0" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.07%)</title><rect x="1154.0" y="1827.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.0" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1154.0" y="1811.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.0" y="1822.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.14%)</title><rect x="1154.8" y="1843.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.8" y="1854.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.14%)</title><rect x="1154.8" y="1827.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1157.8" y="1838.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.14%)</title><rect x="1154.8" y="1811.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.8" y="1822.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.14%)</title><rect x="1156.5" y="1859.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.21%)</title><rect x="1158.1" y="1859.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.1" y="1870.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.07%)</title><rect x="1158.9" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.9" y="1854.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.07%)</title><rect x="1159.7" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.7" y="1854.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.07%)</title><rect x="1159.7" y="1827.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.35%)</title><rect x="1160.6" y="1859.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (4 samples, 0.28%)</title><rect x="1161.4" y="1843.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.4" y="1854.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 0.14%)</title><rect x="1162.2" y="1827.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.2" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.07%)</title><rect x="1163.8" y="1827.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.8" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (6 samples, 0.42%)</title><rect x="1164.7" y="1859.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.7" y="1870.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.07%)</title><rect x="1166.3" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.3" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (3 samples, 0.21%)</title><rect x="1167.1" y="1843.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.1" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (3 samples, 0.21%)</title><rect x="1169.6" y="1859.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="1870.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1171.2" y="1843.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.2" y="1854.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1171.2" y="1827.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.21%)</title><rect x="1172.0" y="1859.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.0" y="1870.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.07%)</title><rect x="1172.0" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.0" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.07%)</title><rect x="1172.8" y="1843.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.8" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1173.6" y="1843.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.6" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (3 samples, 0.21%)</title><rect x="1174.5" y="1891.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.21%)</title><rect x="1174.5" y="1875.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.14%)</title><rect x="1175.3" y="1859.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.07%)</title><rect x="1175.3" y="1843.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="1854.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.07%)</title><rect x="1175.3" y="1827.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="1838.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1176.1" y="1843.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.1" y="1854.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.07%)</title><rect x="1176.1" y="1827.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.1" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 0.76%)</title><rect x="1176.9" y="1907.0" width="9.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.9" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 0.76%)</title><rect x="1176.9" y="1891.0" width="9.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 0.76%)</title><rect x="1176.9" y="1875.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 0.76%)</title><rect x="1176.9" y="1859.0" width="9.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.9" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 0.76%)</title><rect x="1176.9" y="1843.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.76%)</title><rect x="1176.9" y="1827.0" width="9.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.62%)</title><rect x="1176.9" y="1811.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.62%)</title><rect x="1176.9" y="1795.0" width="7.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.62%)</title><rect x="1176.9" y="1779.0" width="7.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.9" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.62%)</title><rect x="1176.9" y="1763.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.62%)</title><rect x="1176.9" y="1747.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.62%)</title><rect x="1176.9" y="1731.0" width="7.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.9" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1176.9" y="1715.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.9" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.42%)</title><rect x="1176.9" y="1699.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.42%)</title><rect x="1176.9" y="1683.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.42%)</title><rect x="1176.9" y="1667.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.9" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.42%)</title><rect x="1176.9" y="1651.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.42%)</title><rect x="1176.9" y="1635.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.9" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1176.9" y="1619.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.9" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.42%)</title><rect x="1176.9" y="1603.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.42%)</title><rect x="1176.9" y="1587.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.9" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.42%)</title><rect x="1176.9" y="1571.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.9" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.42%)</title><rect x="1176.9" y="1555.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.42%)</title><rect x="1176.9" y="1539.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.9" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.42%)</title><rect x="1176.9" y="1523.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.9" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.42%)</title><rect x="1176.9" y="1507.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="1518.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.07%)</title><rect x="1176.9" y="1491.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.9" y="1502.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1176.9" y="1475.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="1486.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1176.9" y="1459.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="1470.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1176.9" y="1443.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="1454.0"></text>
</g>
<g>
<title>Compile::set_node_notes_at(int, Node_Notes*) (1 samples, 0.07%)</title><rect x="1176.9" y="1427.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.9" y="1438.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.07%)</title><rect x="1176.9" y="1411.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1179.9" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.35%)</title><rect x="1177.7" y="1491.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.35%)</title><rect x="1177.7" y="1475.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.7" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.35%)</title><rect x="1177.7" y="1459.0" width="4.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.35%)</title><rect x="1177.7" y="1443.0" width="4.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="1454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1177.7" y="1427.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.7" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1177.7" y="1411.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1177.7" y="1395.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1177.7" y="1379.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.7" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1177.7" y="1363.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1177.7" y="1347.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="1358.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.07%)</title><rect x="1177.7" y="1331.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="1342.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.07%)</title><rect x="1177.7" y="1315.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="1326.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.07%)</title><rect x="1177.7" y="1299.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.7" y="1310.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.07%)</title><rect x="1177.7" y="1283.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="1294.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.07%)</title><rect x="1177.7" y="1267.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="1278.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.7" y="1251.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.07%)</title><rect x="1177.7" y="1235.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1178.6" y="1331.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.6" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1178.6" y="1315.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="1326.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.07%)</title><rect x="1178.6" y="1299.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.6" y="1310.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.07%)</title><rect x="1178.6" y="1283.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.6" y="1294.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.07%)</title><rect x="1178.6" y="1267.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="1278.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.07%)</title><rect x="1178.6" y="1251.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="1299.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1283.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1267.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1179.4" y="1251.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1179.4" y="1235.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1179.4" y="1219.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1179.4" y="1203.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1179.4" y="1187.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1179.4" y="1171.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1179.4" y="1155.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1179.4" y="1139.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="1150.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1179.4" y="1123.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.4" y="1134.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1179.4" y="1107.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="1118.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.07%)</title><rect x="1179.4" y="1091.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.2" y="1427.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.2" y="1411.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.2" y="1395.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.2" y="1379.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.2" y="1363.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.2" y="1347.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.2" y="1331.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.2" y="1315.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.2" y="1299.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.2" y="1283.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.2" y="1267.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.2" y="1251.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1180.2" y="1235.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.2" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1180.2" y="1219.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1180.2" y="1203.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1180.2" y="1187.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1180.2" y="1171.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1180.2" y="1155.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.2" y="1139.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.2" y="1123.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.2" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.2" y="1107.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1180.2" y="1091.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1180.2" y="1075.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1180.2" y="1059.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1180.2" y="1043.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.2" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1180.2" y="1027.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.2" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1180.2" y="1011.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1180.2" y="995.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.2" y="1006.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.07%)</title><rect x="1180.2" y="979.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1181.0" y="1139.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1181.0" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="1134.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.07%)</title><rect x="1181.0" y="1107.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="1118.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.07%)</title><rect x="1181.0" y="1091.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="1102.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.07%)</title><rect x="1181.0" y="1075.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.0" y="1086.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.07%)</title><rect x="1181.0" y="1059.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.0" y="1070.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1181.0" y="1043.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1181.0" y="1027.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.0" y="1038.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1181.0" y="1011.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1181.8" y="1715.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1181.8" y="1699.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1181.8" y="1683.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1181.8" y="1667.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1181.8" y="1651.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1181.8" y="1635.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1181.8" y="1619.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1181.8" y="1603.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1181.8" y="1587.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1181.8" y="1571.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1181.8" y="1555.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1181.8" y="1539.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1181.8" y="1523.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1181.8" y="1507.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.8" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1181.8" y="1491.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1181.8" y="1475.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1181.8" y="1459.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1181.8" y="1443.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1181.8" y="1427.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1181.8" y="1411.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1181.8" y="1395.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1181.8" y="1379.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1181.8" y="1363.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1181.8" y="1347.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1181.8" y="1331.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.21%)</title><rect x="1181.8" y="1315.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.21%)</title><rect x="1181.8" y="1299.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.21%)</title><rect x="1181.8" y="1283.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.21%)</title><rect x="1181.8" y="1267.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.21%)</title><rect x="1181.8" y="1251.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.21%)</title><rect x="1181.8" y="1235.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1181.8" y="1219.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1181.8" y="1203.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1181.8" y="1187.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1181.8" y="1171.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1181.8" y="1155.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.8" y="1139.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1181.8" y="1123.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.8" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1181.8" y="1107.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1181.8" y="1091.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1181.8" y="1075.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1181.8" y="1059.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1181.8" y="1043.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="1054.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.07%)</title><rect x="1181.8" y="1027.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="1038.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1181.8" y="1011.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="1022.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1181.8" y="995.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="1006.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1181.8" y="979.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="990.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.07%)</title><rect x="1181.8" y="963.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="974.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.07%)</title><rect x="1181.8" y="947.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="958.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.07%)</title><rect x="1181.8" y="931.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.07%)</title><rect x="1182.6" y="1139.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.6" y="1150.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.07%)</title><rect x="1182.6" y="1123.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="1134.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.07%)</title><rect x="1182.6" y="1107.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.6" y="1118.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1182.6" y="1091.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.6" y="1102.0"></text>
</g>
<g>
<title>TypeInt::make(int, int, int) (1 samples, 0.07%)</title><rect x="1182.6" y="1075.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.6" y="1086.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.07%)</title><rect x="1182.6" y="1059.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1185.6" y="1070.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1183.5" y="1219.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.5" y="1230.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1183.5" y="1203.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.5" y="1214.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.07%)</title><rect x="1183.5" y="1187.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.5" y="1198.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.07%)</title><rect x="1183.5" y="1171.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.5" y="1182.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1184.3" y="1811.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1184.3" y="1795.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.3" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1184.3" y="1779.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1184.3" y="1763.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1184.3" y="1747.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.3" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1184.3" y="1731.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1184.3" y="1715.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.3" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1184.3" y="1699.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.3" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1184.3" y="1683.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1184.3" y="1667.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1184.3" y="1651.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1184.3" y="1635.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.3" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1184.3" y="1619.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1184.3" y="1603.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.3" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1184.3" y="1587.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1184.3" y="1571.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1184.3" y="1555.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1184.3" y="1539.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1184.3" y="1523.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1184.3" y="1507.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1184.3" y="1491.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1184.3" y="1475.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1184.3" y="1459.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1184.3" y="1443.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.14%)</title><rect x="1184.3" y="1427.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.14%)</title><rect x="1184.3" y="1411.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.14%)</title><rect x="1184.3" y="1395.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.14%)</title><rect x="1184.3" y="1379.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.14%)</title><rect x="1184.3" y="1363.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.14%)</title><rect x="1184.3" y="1347.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.3" y="1358.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.07%)</title><rect x="1184.3" y="1331.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.3" y="1342.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.07%)</title><rect x="1184.3" y="1315.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.3" y="1326.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.07%)</title><rect x="1184.3" y="1299.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="1310.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.07%)</title><rect x="1184.3" y="1283.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1185.1" y="1331.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="1342.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.1" y="1315.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.1" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.1" y="1299.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.1" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1185.1" y="1283.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1185.1" y="1267.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1185.1" y="1251.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1185.1" y="1235.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1185.1" y="1219.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1185.1" y="1203.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.1" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1185.1" y="1187.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.1" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1185.1" y="1171.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1185.1" y="1155.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1185.1" y="1139.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="1150.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.07%)</title><rect x="1185.1" y="1123.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="1134.0"></text>
</g>
<g>
<title>ReplacedNodes::transfer_from(ReplacedNodes const&amp;, unsigned int) (1 samples, 0.07%)</title><rect x="1185.1" y="1107.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.1" y="1118.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.07%)</title><rect x="1185.9" y="1907.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="1918.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1185.9" y="1891.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="1902.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.07%)</title><rect x="1185.9" y="1875.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="1886.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.07%)</title><rect x="1185.9" y="1859.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="1870.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.07%)</title><rect x="1185.9" y="1843.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="1854.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.07%)</title><rect x="1185.9" y="1827.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.9" y="1838.0"></text>
</g>
<g>
<title>CallRelocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*) (1 samples, 0.07%)</title><rect x="1185.9" y="1811.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="1822.0"></text>
</g>
<g>
<title>Relocation::pd_call_destination(unsigned char*) (1 samples, 0.07%)</title><rect x="1185.9" y="1795.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="1806.0"></text>
</g>
<g>
<title>NativeGeneralJump::jump_destination() const (1 samples, 0.07%)</title><rect x="1185.9" y="1779.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="1790.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.07%)</title><rect x="1186.7" y="1955.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.7" y="1966.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.07%)</title><rect x="1186.7" y="1939.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.7" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.07%)</title><rect x="1186.7" y="1923.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.07%)</title><rect x="1186.7" y="1907.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="1918.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.07%)</title><rect x="1186.7" y="1891.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="1902.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.07%)</title><rect x="1186.7" y="1875.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="1886.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.07%)</title><rect x="1187.5" y="1971.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.5" y="1982.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.07%)</title><rect x="1187.5" y="1955.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.5" y="1966.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.07%)</title><rect x="1187.5" y="1939.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.5" y="1950.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.07%)</title><rect x="1187.5" y="1923.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1190.5" y="1934.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.07%)</title><rect x="1187.5" y="1907.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.5" y="1918.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.07%)</title><rect x="1187.5" y="1891.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="1902.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1188.4" y="2003.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.4" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1188.4" y="1987.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.4" y="1998.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.07%)</title><rect x="1188.4" y="1971.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.4" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.07%)</title><rect x="1188.4" y="1955.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.4" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.07%)</title><rect x="1188.4" y="1939.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.4" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.07%)</title><rect x="1188.4" y="1923.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.4" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.07%)</title><rect x="1188.4" y="1907.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.4" y="1918.0"></text>
</g>
<g>
<title>CollectedHeap::ensure_parsability(bool) (1 samples, 0.07%)</title><rect x="1188.4" y="1891.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.4" y="1902.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool) (1 samples, 0.07%)</title><rect x="1188.4" y="1875.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.4" y="1886.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.07%)</title><rect x="1188.4" y="1859.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.4" y="1870.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="1189.2" y="2035.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1192.2" y="2046.0"></text>
</g>
</g>
</svg>
